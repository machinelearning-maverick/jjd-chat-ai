id,Title,Content,Date
21,"Junior Java Developer, co to w ogóle znaczy?","<!-- wp:paragraph {""align"":""left""} -->
<p class=""has-text-align-left"">Słysząc określenie Junior Java Developer, czyli młodszy programista Java często zastanawiamy się, co to w ogóle znaczy? W dalszej części tego artykułu zastanowimy się nad tym patrząc z perspektywy osoby starającej się o pierwszą pracę oraz pracodawcy, omówimy kwestie umiejętności oraz doświadczenia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""left""} -->
<p class=""has-text-align-left"">Sam wyraz Junior, czyli młodszy, wskazuje na osobę z mniejszym doświadczeniem niż osoba pracująca dłużej na stanowisku Java Developer'a. Można przyjąć, że Junior Java Developer, to osoba, która zna podstawy języka Java, napisała aplikację/program inne niż ""Hello World!"" i rozumie zasady programowania obiektowego. Należy dodać, że znajomość języka Java i samo programowanie, to dopiero wierzchołek góry lodowej w porównaniu z tym, co będzie wymagane na stanowisku młodszego programisty Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""left""} -->
<p class=""has-text-align-left"">Czy są jakieś przedziały czasowe, mierzone w latach mówiące o tym, kiedy zaczyna się, a kiedy kończy się stanowisko Junior Java Developer? Moim zdaniem, nie ma sztywnych ram czasowych, zależy, to głównie od wiedzy i umiejętności jakie posiada dana osoba. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""left""} -->
<p class=""has-text-align-left"">Z perspektywy pracodawcy Junior Java Developer, to osoba, która ma minimum trzy lub sześć miesięcy doświadczenia w programowaniu w języku Java, zna techniki i narzędzia wykorzystywane na tym stanowisku. Pracodawca powinien zdawać sobie sprawę z tego, że Junior Java Developer będzie potrzebować mentora, osoby, która zapozna go z projektem, w którym będzie uczestniczył oraz będzie wspierać początkującego programistę w bieżących zadaniach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""left""} -->
<p class=""has-text-align-left"">Patrząc z perspektywy osoby starającej się o stanowisko Junior Java Developer'a, ogrom wiedzy, którą należy przyswoić może przytłaczać, mówi się, że ""próg wejścia"" jest bardzo wysoki, jest w tym trochę prawdy, ale nie oznacza to, że niemożliwym jest nauczenie się tego wszystkiego. Poza znajomością samych podstaw języka Java, trzeb będzie znać techniki i narzędzia wykorzystywane podczas codziennej pracy z kodem pisanym w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Odnośnie powyższego, to więcej informacji o narzędziach pracy można znaleźć w <a href=""https://www.juniorjavadeveloper.pl/2020/01/10/co-jest-potrzebne-do-programowania-w-jezyku-java/"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""Co jest potrzebne do programowania w języku Java? (otwiera się na nowej zakładce)"">Co jest potrzebne do programowania w języku Java?</a>. Natomiast, jeżeli chodzi o techniki pracy, to polecam <a href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY? (otwiera się na nowej zakładce)"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2019-12-15
43,"Czy każdy może zostać Junior Java Developer'em?","<!-- wp:paragraph -->
<p>Może od dawna chodzi Tobie po głowie zmiana obecnego zawodu, zastanawiasz się czy każdy może zostać Junior Java Developer'em? W dalszej części postaram się opisać moje doświadczenia w pracy jako mentor osób, które chcą zostać Junior Java Developer'em.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W trakcie mojej pracy z osobami jako ich mentor w kwestii zmiany obecnego zawodu na młodszego programistę Java spotkałem osoby z takich zawodów jak: <br>- prawnik,<br>- logistyk,<br>- analityk,<br>- inżynier,<br>- doradca finansowy,<br>- kucharz,<br>- muzyk,<br>- help desk, <br>- tester oprogramowania, <br>- programista,<br>- student.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pracując z różnymi osobami z różnych zawodów mogę powiedzieć, że prawie każdy może zostać młodszym programistą Java, czyli Junior Java Developer'em. Dlaczego prawie każdy? Ponieważ z wyżej wymienionych zawodów kilka osób miało bardzo duże trudności w zrozumieniu tematów związanych ze stanowiskiem Junior Java Developer'a i w konsekwencji zrezygnowały one ze zmiany zawodu na młodszego programistę Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapewne zastanawiasz się jakie trudności miały te osoby, które zrezygnowały ze zmiany zawodu? Na pewno nie były, to kwestie techniczne związane z narzędziami i sprzętem używanym podczas pracy jako Junior Java Developer. Problemem również nie była sama teoria, osoby te dobrze przyswajały teorię, wykonywała zadania domowe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Z mojej perspektywy osoby te za bardzo rozkładały na czynniki pierwsze omawiane zagadnienia, co nie pozwalało im zobaczyć szerszego kontekstu pracy Junior Java Developer'a i pójść dalej. Kolejną kwestią było połączenie zdobytej wiedzy w jedną całość tak, aby rozwiązać większe zadanie, mogę to porównać do wiedzy z matematyki, każdy jest w stanie nauczyć się teorii i wzorów, ale nie każdy będzie w stanie rozwiązać zadanie tekstowe, opisowe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W takim razie jak radzą sobie i z czym zmagają się osoby, które kontynuują swoją przygodę ze zmianą zawodu na Junior Java Developera? Na pewno nie jest to łatwy proces, wymaga dużo cierpliwości i wytrwałości. Niektóre zagadnienia zarówno teoretyczne i praktyczne wymagają dobrego zrozumienia, ponieważ zdobywana wiedza jest przyrostowa, co oznacza, że do zrozumienia jednego zagadnienia jest niezbędna wiedza z wcześniej omawianego tematu, niestety nie ma drogi na skróty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sama znajomość języka Java i samo programowanie, to dopiero wierzchołek góry lodowej w porównaniu z tym, co będzie wymagane na stanowisku młodszego programisty Java. Praca programisty wiąże się z analizowaniem i rozwiązywaniem problemów oraz polega na ""wirtualnym myśleniu"". Niestety nawet ukończony kurs stacjonarny, online czy studia podyplomowe nie gwarantują tego, że sprostamy oczekiwaniom pracodawcy i odnajdziemy się na stanowisku Junior Java Developer'a. Równie istotnym, ale pomijanym elementem jest znajomość języka angielskiego ponieważ większość dokumentacji i tutoriali jest właśnie w języku angielskim.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na zakończenie dodam, że niektóre osoby mające duże problemy w trakcie zmiany zawodu na młodszego programistę Java, kontynuują rozpoczęte kursy ze względu na formę i warunki tychże kursów, niekoniecznie chcąc dalej kontynuować swoją karierę jako Junior Java Developer. Skąd o tym wiem? Wiele takich osób zgłosiło się do mnie o pomoc i mentoring. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2019-12-21
45,"Junior Java Developer umiejętności techniczne, a umiejętności miękkie","<!-- wp:paragraph -->
<p>Panuje powszechna opinia, że programista, w tym przypadku Junior Java Developer nie robi nic innego jak tylko siedzi przed komputerem i pisze kod, ale w większości przypadków tak nie jest. Z mojego doświadczenia wynika, że 30 procent czasu, to samo kodowanie, a 70 procent czasu, to komunikacja z innymi osobami w zespole i próba zrozumienia tego, co musimy przedstawić w postaci kodu języka Java. Dobra komunikacja i ścisła współpraca z innymi członkami zespołu jest moim zdaniem takim samym wyznacznikiem dobrego programisty jak jakość jego kodu. Dodatkowo dawno już minęły czasy, kiedy programista był postrzegany jako odludek pracujący w piwnicy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Współpraca z innymi osobami w zespole nie oznacza, że nie ma zadań, które wymagają indywidualnej pracy. Każde omówione zadanie do wykonania jest później realizowane indywidualnie przez programistę. Programista musi równoważyć komunikację w zespole z indywidualną pracą nad tworzonym kodem, inaczej może doprowadzić do sytuacji, w której nie wystarczy mu czasu na pisanie fragmentu oprogramowania, który zadeklarował, że napisze.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pracodawcy wymagają umiejętności miękkich takich jak komunikacja w zespole i asertywność, na równi z wiedzą techniczną. Obecnie programista bierze bezpośredni udział w tworzeniu oprogramowania, głównie za sprawą <a rel=""noreferrer noopener"" aria-label=""zwinnych metodyk wytwarzania oprogramowania (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Programowanie_zwinne"" target=""_blank"">zwinnych metodyk wytwarzania oprogramowania</a>, które ""[...] dużą wagę przywiązują do bezpośredniej komunikacji między członkami zespołu [...]"", ""Członkowie zespołu biorą odpowiedzialność za zadania postawione w każdej iteracji. Sami decydują jak osiągnąć postawione cele."". Z tego jasno i wyraźnie wynika jak istotne są umiejętności miękkie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wiedza techniczna, tzw. umiejętności twarde są niezbędne dla każdego Junior Java Developer'a. Osoby starające się o stanowisko młodszego programisty Java często nie zdają sobie sprawy z tego, że sam język Java nie wystarczy, szerzej piszę o tym w artykule <a rel=""noreferrer noopener"" aria-label=""Czy sam język Java wystarczy? (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"">Czy sam język Java wystarczy?</a> Rozszerzając wspomniany artykuł, każdy programista musi mieć minimalną wiedzę na temat systemów operacyjnych, sieci komputerowych, znać i rozumieć, np. wielowątkowość, system plików, adres IP, port itp.. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tworzone obecnie oprogramowanie działa również w chmurze, czyli jako systemy rozproszone, gdzie komunikacja między różnymi częściami oprogramowania odbywa się przez internet, tym samym niezbędna jest znajomość sieci komputerowych. Nawet ""starsze"" oprogramowanie komunikuje się przez sieć, np. serwer aplikacji z bazą danych, można uzyskać, to na jednym komputerze, ale niezbędna będzie wiedza z zakresu systemów operacyjnych oraz sieci komputerowych. Trzeba będzie zainstalować i skonfigurować serwery, np. www, bazy danych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-02-01
47,"Bootcamp, kursy online, książki, a może korepetycje, co wybrać?","<!-- wp:paragraph -->
<p>Obecnie można wybrać wiele sposobów rozwoju w kierunku stanowiska Junior Java Developer'a, w dalszej części wpisu postaram się omówić najbardziej popularne z nich, są to m.in.: Bootcamp, kurs online, książka jak również korepetycje.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przed wyborem sposobu rozwoju należy wziąć pod uwagę kilka kwestii:<br>- zakres materiału,<br>- koszt,<br>- czas trwania,<br>- możliwość rezygnacji,<br>- certyfikat, potwierdzenie ukończenia,<br>- opinie innych osób.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bootcamp'y cieszą się bardzo dużą popularnością, kuszą swoją ofertą jak również pewnego rodzaju obietnicą, że każdy może zostać Junior Java Developer'em, czyli młodszym programistą Java. Bootcamp jest intensywnym kursem online lub stacjonarnym, może trwać od kilku tygodni do kilku miesięcy. W trakcie takiego kursu mamy wsparcie mentora (zazwyczaj w ograniczonym czasie), który pomaga w bieżących zadaniach związanych z Bootcamp'em. Koszt takiego szkolenia to od kilku do kilkunastu tysięcy złotych. Należy pamiętać, że taki Bootcamp ma określone ramy czasowe, dotyczy, to zarówno poszczególnych bloków tematycznych, modułów jak również całego kursu, który należy ukończyć w wyznaczonym terminie. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim przejdę do kolejnych sposobów na zostanie Junior Java Developer'em, należy rozróżnić dwa typy rozwoju, pierwszy z nich to pełna ścieżka od podstaw języka Java, aż do stanowiska młodszego programisty Java, drugi, to nauka samego języka Java, ale tak jak pisałem w <strong><a rel=""noreferrer noopener"" href=""http://www.juniorjavadeveloper.pl/2019/12/15/junior-java-developer-co-to-w-ogole-znaczy/"" target=""_blank"">Junior Java Developer, co to w ogóle znaczy?</a></strong>  ""[...] znajomość języka Java i samo programowanie, to dopiero  wierzchołek góry lodowej w porównaniu z tym, co będzie wymagane na  stanowisku młodszego programisty Java."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kursy online pozwolą nauczyć się programowania w języku Java, celowo napisałem ""nauczyć się programowania w języku Java"", większość kursów online skupia się na samym języku Java. Kurs online, który mogę polecić <strong><a rel=""noreferrer noopener"" aria-label=""Java Programming Masterclass for Software Developers (otwiera się na nowej zakładce)"" href=""https://www.udemy.com/course/java-the-complete-java-developer-course/"" target=""_blank"">Java Programming Masterclass for Software Developers</a></strong>. Przeglądając kursy ""podstaw języka Java"" zapewne otrzymamy rekomendację kolejnych kursów, które są ""niezbędne"", ale jak tu nie zginąć w gąszczu wiedzy i możliwości? W kolejnych wpisach przygotuję w punktach ""plan działania"", ścieżkę rozwoju dla Junior Java Developer'em. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Z książek również możemy nauczyć się programowania w języku Java, podobnie jak w przypadku kursów online, sama znajomość języka Java, to za mało. Książka, którą mogę polecić na początek, to <strong><a rel=""noreferrer noopener"" aria-label=""Java. Rusz głową! Wydanie II (otwiera się na nowej zakładce)"" href=""https://helion.pl/ksiazki/java-rusz-glowa-wydanie-ii-kathy-sierra-bert-bates,javrg2.htm"" target=""_blank"">Java. Rusz głową! Wydanie II</a></strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Korepetycje, co do zaoferowania ma taka forma nauki? Na samym początku należy podzielić korepetytorów na studentów i osoby, które pracują w zawodzie Java Developera, mając taki podział należy rozróżnić osoby, które po prostu wykonują zadania, projekty na zlecenie oraz osoby, które mają plan działania jak przebranżowić kogoś na Junior Java Developer'a. Zaletą współpracy z korepetytorem jest indywidualne podejście, jeżeli chodzi o zakres materiału oraz czas trwania przebranżowienia, dodatkowo ze współpracy z korepetytorem możemy zrezygnować praktycznie w dowolnym momencie. Jedynym minusem jest fakt, że korepetytor nie będzie w stanie wystawić certyfikatu, ale zazwyczaj taka osoba jest w branży i może nam pomóc w znalezieniu pierwszej pracy poprzez rekomendację.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W każdym z wyżej wymienionych sposobów najważniejsza jest praktyka, trzeba pisać jak najwięcej kodu, tak aby doskonalić swój warsztat. Ciekawym miejscem, gdzie możemy znaleźć różnego rodzaju zadania jest <strong><a rel=""noreferrer noopener"" aria-label=""Codewars - Train with Programming Challenges/Kata (otwiera się na nowej zakładce)"" href=""https://www.codewars.com/"" target=""_blank"">Codewars - Train with Programming Challenges/Kata</a></strong>, gdzie wspólnie z innymi osobami rozwiązujemy online zadania programistyczne z różnych dziedzin, jak również o różnym stopniu trudności, samemu wybieramy dziedzinę i poziom trudności. Możemy również zobaczyć rozwiązania innych osób, jeżeli będziemy mieli problem z rozwiązaniem jakiegoś zadania. Polecam również <a rel=""noreferrer noopener"" href=""https://challengerocket.com/"" target=""_blank"">https://challengerocket.com/</a> - <strong>Solve a SkillChallenge and get immediate feedback to see if you qualify for the recruitment process. All done remotely</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:table {""hasFixedLayout"":true,""align"":""full""} -->
<figure class=""wp-block-table alignfull""><table class=""has-fixed-layout""><thead><tr><th></th><th>Bootcamp</th><th>Kurs online</th><th>Książka</th><th>Korepetycje</th></tr></thead><tbody><tr><td>Zakres materiału</td><td>Obszerny, uporządkowany</td><td>Obszerny, nieuporządkowany</td><td>Obszerny, nieuporządkowany</td><td>Indywidualny, uporządkowany</td></tr><tr><td>Koszt</td><td>Od kilku do kilkunastu tysięcy złotych</td><td>Od kilkudziesięciu do kilkuset złotych</td><td>Od kilkudziesięciu do kilkuset złotych</td><td>Od kilkuset do kilku tysięcy złotych</td></tr><tr><td>Czas trwania</td><td>Od kilku tygodni do kilku miesięcy</td><td>Od kilku godzin do kilku dni lub tygodni</td><td>W zależności od szybkości czytania</td><td>W zależności od indywidualnych potrzeb</td></tr><tr><td>Możliwość rezygnacji</td><td>Brak, lub z konsekwencjami finansowymi</td><td>Tak</td><td>Tak</td><td>Tak</td></tr><tr><td>Certyfikat</td><td>Tak</td><td>Tak</td><td>Brak</td><td>Brak</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2019-12-28
109,"Czy sam język Java wystarczy?","<!-- wp:paragraph -->
<p>Niestety nie, sama znajomość języka Java nie wystarczy, żeby zostać Junior Java Developer'em. Błędne jest myślenie, że zostaniemy zatrudnieni znając całą teorię związaną z językiem Java oraz wiedząc jak napisać program w języku Java. Tak jak w każdym innym zawodzie potrzebujemy znać i umieć posługiwać się narzędziami i posiadać odpowiednie środowisko do pracy oraz znać dobre praktyki. Przez środowisko do pracy rozumiem różne programy wspierające pracę programisty począwszy od systemu operacyjnego, a skończywszy na narzędziu służącym do ochrony wzroku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dla przykładu pisarz używa języka np. polskiego do pisania swoich książek, w najprostszym przypadku potrzebuje kartki papieru i czegoś do pisania. W dzisiejszych czasach używa się do tego laptopa i edytora tekstu. Fragmenty książki trzeba wysyłać do wydawnictwa, gotową książkę trzeba przygotować tak, aby mogła być wydrukowana. Czy pisarz znając tylko język polski będzie w stanie od razu tworzyć różne gatunki literackie, np. powieść sensacyjną? Raczej nie, tak samo jest z programistą, znając język Java może wybrać jaką aplikację, program (gatunek literacki) chciałby stworzyć, np. aplikacja na urządzenia mobilne, ale to wymaga dużego nakładu pracy i obszernej wiedzy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Praca programisty, w tym przypadku młodszego programisty Java polega na wytwarzaniu oprogramowania, czyli aplikacji, programów, np. aplikacji www, aplikacji na smartfony, komputery. Proces wytwarzania oprogramowania jest usystematyzowany i podlega pewnym regułom - tak jak proces tworzenia książki. Nieodłącznym elementem pracy każdego programisty jest analizowanie, projektowanie, tworzenie i rozwiązywanie problemów, które są i będą zawsze czy, to w postaci błędnie działającego programu, czy też źle zrozumianego zagadnienia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W dużym uproszczeniu proces wytwarzania oprogramowania wygląda następująco:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Analiza, czyli zbieranie informacji o tym, co ma robić aplikacja, program, analiza np. w postaci dokumentu Word.</li><li>Przygotowanie projektu aplikacji, np. w postaci diagramów <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Unified_Modeling_Language"" target=""_blank"">UML</a> i <a rel=""noreferrer noopener"" href=""https://www.bridging-the-gap.com/wireframe-mock-up-prorotype-difference/"" target=""_blank"">makiet GUI</a>.</li><li>Implementacja aplikacji, czyli pisanie kodu w wybranym języku programowania.</li><li>Testowanie aplikacji, najlepiej na każdym etapie tworzenia oprogramowania.</li><li>Wdrożenie aplikacji, czyli umieszczenie na serwerach, gdzie będą mogli z niej korzystać użytkownicy tej aplikacji.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>W takim razie, gdzie jest ten ogrom pracy, którą musi wykonać programista? Po pierwsze programista będzie musiał umieć odczytać dokument z analizą aplikacji, jak również zrozumieć projekt aplikacji na podstawie, której powstanie kod źródłowy aplikacji. Niestety w wielu przypadkach brakuje analizy i/lub projektu aplikacji, w takim przypadku, to programista będzie musiał samemu je ""stworzyć"". Z mojego doświadczenia wynika, że praca programisty w 70% polega na komunikacji w zespole, a w 30% z samego pisania kodu, więcej o tym można przeczytać w <a href=""https://www.juniorjavadeveloper.pl/2020/02/01/junior-java-developer-umiejetnosci-techniczne-a-umiejetnosci-miekkie/"" target=""_blank"" rel=""noreferrer noopener"">Junior Java Developer umiejętności techniczne, a umiejętności miękkie</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim programista zabierze się za pisanie kodu aplikacji, będzie musiał znać takie narzędzie jak zintegrowane środowisko programistyczne IDE (np. <a rel=""noreferrer noopener"" aria-label=""IntelliJ IDEA (otwiera się na nowej zakładce)"" href=""https://www.jetbrains.com/idea/"" target=""_blank"">IntelliJ IDEA</a>, <a rel=""noreferrer noopener"" aria-label=""Eclipse (otwiera się na nowej zakładce)"" href=""https://www.eclipse.org/"" target=""_blank"">Eclipse</a>), w którym, to będzie pisał kod w języku Java. Kod, który stworzy będzie musiał współdzielić z innymi programistami za pomocą systemu kontroli wersji <a rel=""noreferrer noopener"" aria-label=""VCS (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Version_control"" target=""_blank"">VCS</a>, np. <a href=""https://en.wikipedia.org/wiki/Git"" target=""_blank"" rel=""noreferrer noopener"">git</a>. Już dawno minęły czasy kiedy, to programista pisał w notatniku, to samo tyczy się współdzielenia kodu aplikacji, już nie przenosi się go na dyskietkach lub nie wysyła się emailem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Patrząc na powyższe, programista nie zaczął jeszcze pisać kodu aplikacji, a już musi znać dwa narzędzia, rozumieć analizę i projekt aplikacji. Dodatkowo rzadko kiedy korzysta się tylko i wyłącznie z tego, co dostarcza sam język Java. W większości przypadków korzysta się z innych bibliotek (np. JUnit) oraz framework'ów (np. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Spring_Framework"" target=""_blank"">Spring Framework</a>) i z tych gotowych elementów tworzy się aplikacje. Kod, który piszemy powinien być zgodny z dobrymi praktykami (np. <a rel=""noreferrer noopener"" aria-label=""SOLID (opens in a new tab)"" href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"">SOLID</a>, <a rel=""noreferrer noopener"" aria-label=""DRY (opens in a new tab)"" href=""https://pl.wikipedia.org/wiki/DRY"" target=""_blank"">DRY</a>) oraz przetestowany (np. biblioteka <a rel=""noreferrer noopener"" aria-label=""JUnit (opens in a new tab)"" href=""https://pl.wikipedia.org/wiki/JUnit"" target=""_blank"">JUnit</a>) - więcej na <a href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"" rel=""noreferrer noopener"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a> oraz <a href=""https://www.juniorjavadeveloper.pl/2020/10/02/po-co-w-ogole-testowac-kod-aplikacji-mbank-robi-to-na-produkcji/"" target=""_blank"" rel=""noreferrer noopener"">Po co w ogóle testować kod aplikacji? mBank robi to na produkcji!</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-01-04
150,"Pierwszy kod w języku Java w IntelliJ - krok po kroku","<!-- wp:paragraph -->
<p>Zastanawiasz się jak napisać pierwszy kod w języku Java? Jak w ogóle zabrać się do tego? Na początku musimy mieć odpowiednie ""miejsce pracy"", środowisko do programowania, o tym szczegółowo piszę w <a rel=""noreferrer noopener"" aria-label=""Co jest potrzebne do programowania w języku Java? (otwiera się na nowej zakładce)"" href=""http://www.juniorjavadeveloper.pl/2020/01/11/co-jest-potrzebne-do-programowania-w-jezyku-java/"" target=""_blank""><strong>Co jest potrzebne do programowania w języku Java?</strong></a>. Jeżeli mamy już środowisko do programowania możemy zabrać się za pisanie kodu w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pierwszy program w dowolnym języku programowania, to tak zwany ""Hello World!"", to samo dotyczy języka Java. Dlaczego ""Hello World!""? Program po prostu wypisuje tekst, za pomocą którego wita się ze światem, z programistą - ""Hello World!"". W Javie do uruchomienia każdej aplikacji wymagana jest specjalna ""konstrukcja"", metoda main().</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Metoda main() jest centralnym punktem wejścia do programu, to ona pozwala uruchomić program, bez niej byłoby, to niemożliwe. W naszym programie, aplikacj w 99,9% przypadków jest tylko jedna klasa z metodą main(). Możemy mieć za to więcej niż jedną klasę bez metody main() jest, to wręcz wskazane. IntelliJ ułatwia nam uruchomienie takiej metody main(), po lewej stronie obok nazwy metody mamy zielony przycisk ""play"", który umożliwia nam uruchomienie programu, aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na szczęście program ""Hello World!"" można stworzyć za pomocą IntelliJ IDEA (narzędzie do pisania kodu Java), Poniżej konstrukcja metody main. Na końcu posta są zrzuty ekranu pokazujące jak krok po kroku zrobić program ""Hello World!"" za pomocą IntelliJ. </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public static void main(String[] args) {
    System.out.println(""Hello World!"");
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Metoda main() dla Hello World!</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
&nbsp;
<!-- /wp:html -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u00221\u0022 gal_title=\u0022Hello World! w IntelliJ\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""1"" gal_title=""Hello World! w IntelliJ""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Hello World! w IntelliJ - krok po kroku</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wynik wykonania powyższego kodu jest prezentowany w wierszu poleceń, konsoli (<a rel=""noreferrer noopener"" aria-label=""CLI - Command Line Interface (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Wiersz_polece%C5%84"" target=""_blank""><strong>CLI - Command Line Interface</strong></a>), czarne okienko, w którym jest tylko tekst. Wiersz poleceń będzie towarzyszył przez bardzo długi czas każdej osobie, która uczy się języka Java, będzie, to jedyny sposób interakcji z napisanym kodem programu, do czasu poznania sposobu tworzenia aplikacji okienkowych (<strong><a rel=""noreferrer noopener"" aria-label=""GUI - Graphical User Interface (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Graficzny_interfejs_u%C5%BCytkownika"" target=""_blank"">GUI - Graphical User Interface</a></strong>), np. Swing, JavaFX. W codziennej pracy programisty Java wiersz poleceń, CLI jest jego przyjacielem.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""id"":394,""sizeSlug"":""large""} -->
<figure class=""wp-block-image size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/02/java-pierwszy-kod_hello-world-08-konsola-1024x194.png"" alt=""Hello World!, konsola w IntelliJ"" class=""wp-image-394""/><figcaption>Hello World!, konsola w IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Powyżej zostały zaprezentowane nowe rzeczy, kod Java oraz IntelliJ, w kolejnych postach postaram się je wyjaśnić. <br><br>Zaprezentowany <strong>kod Java</strong> wprowadza takie elementy jak:<br>- pakiet,<br>- klasa,<br>- metoda,<br>- specjalna metoda main(),<br>- wypisywanie tekstu w konsoli.<br><br>Dla <strong>IntelliJ</strong> wyjaśnię elementy, obszary, z których składa się zintegrowane środowisko programistyczne dla języka Java:<br>- struktura projektu,<br>- edytor kodu źródłowego,<br>- wiersz poleceń.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-hello-world
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-01-18
152,"Co jest potrzebne do programowania w języku Java?","<!-- wp:paragraph -->
<p>Zanim zaczniemy pisać nasz pierwszy kod w języku Java należy zapewnić sobie odpowiednie ""miejsce do pracy"", takim miejscem do pracy podczas programowania jest nasze środowisko programistyczne, z którego będziemy korzystać na co dzień. Poprzez środowisko rozumiem działający system operacyjny, na którym zainstalujemy wirtualną maszynę Javy (JVM), zarówno JDK i JRE, na końcu tego posta wyjaśnię te pojęcia. Do tego będziemy potrzebowali zintegrowane środowisko programistyczne (IDE, pojęcie wyjaśnione na końcu posta) dla języka Java, rekomenduję <a href=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""IntelliJ IDEA (otwiera się na nowej zakładce)"">IntelliJ IDEA</a> (wersja Community Edition jest wystarczająca), w skrócie jest, to edytor kodu, w którym będziemy pisać nasze programu i aplikacje.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wirtualną maszynę Javy pobieramy z <a rel=""noreferrer noopener"" aria-label=""Java SE Development Kit 8 (otwiera się na nowej zakładce)"" href=""https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"" target=""_blank"">Java SE Development Kit 8</a>, wersja dostępna w momencie pisania postu, to ""Java SE Development Kit 8u231"", przed pobraniem musimy zaakceptować licencję, wybierając ""Accept License Agreement"", a następnie wybieramy nasz system operacyjny. Po pobraniu pliku uruchamiamy instalator, jeden instalator służy do instalacji Java JDK (Java Development Kit) oraz JRE (Java Runtime Environment). Po zakończeniu instalacji Javy przechodzimy do instalacji IntelliJ IDEA Community Edition, jeżeli po zainstalowaniu i uruchomieniu IntelliJ IDEA jesteśmy informowani o pozostałym czasie licencji, to znaczy, że pobraliśmy wersję Enterprise zamiast Community Edition.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Teraz jesteśmy gotowi do napisania naszego pierwszego kodu w języku Java, o tym jak, to zrobić będzie w kolejnym poście. Oczywiście kod Java można pisać w notatniku, kompilować i uruchamiać bez IntelliJ, ale nie zalecam tego podejścia dla osób uczących się języka Java - <a rel=""noreferrer noopener"" aria-label=""The &quot;Hello World!&quot; Application. (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/tutorial/getStarted/cupojava/index.html"" target=""_blank"">The ""Hello World!"" Application.</a></p>
<!-- /wp:paragraph -->

<!-- wp:image {""id"":169,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""http://www.juniorjavadeveloper.pl/wp-content/uploads/2019/12/java-programowanie_instalacja-Java-JDK.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""http://www.juniorjavadeveloper.pl/wp-content/uploads/2019/12/java-programowanie_instalacja-Java-JDK-1024x555.png"" alt=""Java programowanie instalacja Java JDK"" class=""wp-image-169""/></a><figcaption>Java programowanie instalacja Java JDK</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""id"":170,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""http://www.juniorjavadeveloper.pl/wp-content/uploads/2019/12/java-programowanie_IntelliJ-IDEA_Hello-World--scaled.jpg"" target=""_blank"" rel=""noreferrer noopener""><img src=""http://www.juniorjavadeveloper.pl/wp-content/uploads/2019/12/java-programowanie_IntelliJ-IDEA_Hello-World--1024x555.jpg"" alt=""Java programowanie IntelliJ IDEA Hello World!"" class=""wp-image-170""/></a><figcaption>Java programowanie IntelliJ IDEA Hello World!</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Słownik pojęć:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>JVM (<a rel=""noreferrer noopener"" aria-label=""Java Virtual Machine (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Wirtualna_maszyna_Javy"" target=""_blank"">Java Virtual Machine</a>) - wirtualna maszyn języka Java, umożliwiająca uruchamianie programów, aplikacji napisanych w języku Java, które są w postaci Java bytecode,</li><li>Java bytecode - zbiór instrukcji dla JVM (Java Virtual Machine), forma pośrednia kodu, dzięki, której raz napisany program można uruchomić na różnych systemach operacyjnych, np. Windows, Linux, Mac,</li><li>JRE (Java Runtine Environment) - środowisko uruchomieniowe języka Java, niezbędne do uruchamiania programów, aplikacji napisanych w języku Java, dla ""zwykłego"" użytkownika wystarczy JRE, ale dla programisty Java niezbędne jest JDK,</li><li>JDK (Java Development Kit) - zbiór narzędzi niezbędnych do programowania w języku Java, nie należy mylić z IDE (Integrated Development Environment), umożliwia m.in. zamianę kodu Java na Java bytecode oraz uruchomienie programów, aplikacji,</li><li>IDE (Integreted Development Enviroment) - zintegrowane środowisko programistyczne jest, to bardzo rozbudowany edytor tekstu dla wybranego języka programowania, wspiera pracę programisty, np. podkreśla błędy w kodzie; koloruje kod tak, aby łatwiej się go czytało; podpowiada składnię oraz dostępne klasy i metody w języku programowania; kompiluje i uruchamia programy, aplikacje.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Dlaczego Java 8, kiedy dostępna jest już Java 13? Uogólniając zarówno programiści jak i firmy są niechętni do używania najnowszych wersji, jest kilka powodów takiego stanu rzeczy, pomijając kwestie samego języka Java, proces dostosowywania istniejącego kodu do nowszej wersji wymaga czasu i pieniędzy. Nie da się tak po prostu przełączyć wersji z Java 8 na Java 13 i spodziewać się, że wszystko będzie działać. Programy, aplikacje napisane z wykorzystaniem Java 8 mogą nie uruchomić się z Java 13 lub inną wyższą niż Java 8, przez pewien czas był problem z uruchomieniem IntelliJ IDEA na Java 11, w tym wypadku programiści po prostu nie mogli wykonywać swojej pracy na Java 11.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-01-10
315,"Jak znaleźć pierwszą pracę jako Junior Java Developer?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapewne zastanawiasz się jak znaleźć pierwszą pracę jako Junior Java Developer? Napiszę wprost, obecnie nie jest łatwo znaleźć pierwszą pracę na stanowisku młodszego programisty Java. Dlaczego tak jest i jak mimo tego znaleźć pierwszą pracę napiszę za chwilę. Na pewno trzeba uzbroić się w cierpliwość, <a rel=""noreferrer noopener"" aria-label=""dobre portfolio (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/02/07/wlasne-portfolio-jak-zbudowac-dobre-portfolio-i-gdzie-je-umiescic/"" target=""_blank"">dobre portfolio</a> oraz <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/08/13/okiem-eksperta-jak-napisac-dobre-cv-agnieszka-ciecwierz/"" target=""_blank"">dobre CV</a>. Postaram się przedstawić rzeczywistość taką, jaka jest obecnie. Dodatkowo zapraszam do zapoznania się z artykułem <a rel=""noreferrer noopener"" aria-label=""Jak szukać pierwszej pracy jako Junior Java Developer? (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/06/13/jak-szukac-pierwszej-pracy-jako-junior-java-developer/"" target=""_blank"">Jak szukać pierwszej pracy jako Junior Java Developer?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego nie jest łatwo znaleźć pierwszą pracę jako Junior Java Developer? Moim zdaniem głównym powodem takiego stanu rzeczy jest duża ilość chętnych osób, które chcą zostać młodszym programistą Java. Zapewne zaraz zapytasz ""Ale jak to? Przecież wszyscy mówią, że firmy potrzebują programistów Java od zaraz."". Zgadza się, ale obecnie, co miesiąc pojawia się nowa grupa osób, które kończą Bootcamp'y Java i wysyłają swoje CV do firm. Osoba rekrutująca, przeglądając CV, może stworzyć dwie grupy jedna, to studenci, np. po studiach informatycznych, a druga grupa, to osoby kończące Bootcamp. Niestety ""pierwszeństwo"" mogą mieć studenci.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co jest nie tak z CV po Bootcamp'ie? Myślę, że głównym problemem jest brak wiedzy informatycznej, która jest niezbędna na stanowisku Junior Java Developer. Wiedza informatyczna zdobyta np. podczas studiów informatycznych i jest, to np. znajomość systemów operacyjnych, sieci komputerowych, chociażby tylko w teorii. Myślę, że dla osoby rekrutującej, CV, w którym pośród kilku różnych doświadczeń zawodowych (nietechnicznych) pojawia się tylko informacja o ukończonym Bootcamp'ie może nie być powodem do nawiązania kontaktu i współpracy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W takim razie, co zrobić, aby doświadczenie wpisane w CV pomogło znaleźć pracę jako młodszy programista Java? Idealnie byłoby stworzyć nieszablonowy projekt, który będzie wyróżniał się pośród innych podobnych projektów typu CRUD - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/08/18/pulapki-szablonu-crud-z-bootcamp-we-wlasnym-portfolio-i-rzeczywistym-projekcie/"" target=""_blank"">Pułapki szablonu CRUD we własnym portfolio i rzeczywistym projekcie</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtu.be/Yvigsrc6H3M"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/Yvigsrc6H3M
</div><figcaption class=""wp-element-caption"">Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes; TRAILER</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jeżeli brakuje nam certyfikatów potwierdzających nasze umiejętności możemy zrobić kurs ze ścieżką certyfikacyjną na <a rel=""noreferrer noopener"" aria-label=""Coursera (otwiera się na nowej zakładce)"" href=""https://www.coursera.org/"" target=""_blank"">Coursera</a>, więcej o tym pisałem w <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/25/przydatne-ksiazki-i-strony-do-nauki-jezyka-java/"" target=""_blank"">Przydatne książki i strony do nauki języka Java</a>. Warto również zgłębić wiedzę z zakresu informatyki, systemów operacyjnych i sieci komputerowych: <a rel=""noreferrer noopener"" href=""https://pl.khanacademy.org/computing/computer-science"" target=""_blank"">Khan Academy - Informatyka</a>, <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Computer_science"" target=""_blank"">Wikipedia - Computer Science</a>, <a rel=""noreferrer noopener"" href=""https://online.stanford.edu/courses/soe-ycscs101-sp-computer-science-101"" target=""_blank"">Stanford University - Computer Science 101</a>, <a rel=""noreferrer noopener"" href=""https://www.coursera.org/specializations/computer-communications"" target=""_blank"">Coursera - Computer Communications</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W kwestii nieszablonowego projektu. Zakładam, że masz już podstawową wiedzę z zakresu języka Java. W takim przypadku projekt może łączyć dwa różne istniejące <a rel=""noreferrer noopener"" aria-label=""API (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Application_programming_interface"" target=""_blank"">API</a> udostępnione za pomocą <a rel=""noreferrer noopener"" aria-label=""REST (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Representational_state_transfer"" target=""_blank"">REST</a>. Następnie udostępniamy własne REST API dla aplikacji mobilnej np. na Android. Projekt będzie składał się z aplikacji serwerowej i łączącej się z nią aplikacji mobilnej. Możemy np. stworzyć aplikację mobilną, która dla bieżącej pogody i lokalizacji przygotuje propozycję ubrań na dany dzień. Brzmi skomplikowanie, ale tak na prawdę nie jest. W telegraficznym skrócie możemy wykorzystać:<br>- <a rel=""noreferrer noopener"" aria-label=""Spring Framework (otwiera się na nowej zakładce)"" href=""https://spring.io/"" target=""_blank"">Spring Framework</a> - baza dla aplikacji serwerowej,<br>- <a rel=""noreferrer noopener"" aria-label=""Zalando API (otwiera się na nowej zakładce)"" href=""https://opensource.zalando.com/restful-api-guidelines/"" target=""_blank"">Zalando API</a> - API z ubraniami,<br>- <a rel=""noreferrer noopener"" aria-label=""AccuWeather (otwiera się na nowej zakładce)"" href=""https://developer.accuweather.com/apis"" target=""_blank"">AccuWeather</a> - API z pogodą,<br>- <a rel=""noreferrer noopener"" aria-label=""Android (otwiera się na nowej zakładce)"" href=""https://developer.android.com/"" target=""_blank"">Android</a> - aplikacja mobilna.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując, moim zdaniem połączenie szkolenia z języka Java (online, Bootcamp), wiedzy informatycznej oraz nieszablonowego projektu zwiększa szanse na zdobycie pierwszej pracy jako Junior Java Developer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapraszam do regularnego odwiedzania mojego bloga <a rel=""noreferrer noopener"" href=""http://www.juniorjavadeveloper.pl"" target=""_blank"">www.juniorjavadeveloper.pl</a>, będą pojawiać się kolejne wpisy oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl lub <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/jacekjablonka/"" target=""_blank"">LinkedIn</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""opacity"":""css"",""className"":""is-style-wide"",""extUtilities"":[]} -->
<hr class=""wp-block-separator has-css-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:heading {""textAlign"":""center"",""level"":5,""fontSize"":""large"",""extUtilities"":[]} -->
<h5 class=""wp-block-heading has-text-align-center has-large-font-size""><a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/sciezka-wsparcia-przyszlego-junior-java-developera/"" target=""_blank"">Ścieżka wsparcia przyszłego Junior Java Developer’a</a></h5>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wychodząc na przeciw oczekiwaniom przyszłych młodszych programistów języka Java przygotowałem ""Ścieżkę wsparcia przyszłego Junior Java Developera"". Dlaczego akurat takie a nie inne kroki na ścieżce wsparcia? Pod uwagę wziąłem kilka lat mojej pracy z wieloma osobami, które chciały zmienić zawód na Junior Java Developer'a.</p>
<!-- /wp:paragraph -->

<!-- wp:block {""ref"":1163} /-->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-02-15
317,"Własne portfolio - jak zbudować dobre portfolio i gdzie je umieścić?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Własne portfolio, to ważny element, jeżeli ubiegamy się o stanowisko Junior Java Developer'a. Portfolio pozwala nam również zgromadzić w jednym miejscu zdobytą wiedzę tak, aby można było później do niej wrócić.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dla osób, które będą nas rekrutować, własne portfolio, to sygnał, że znamy język Java nie tylko od strony teoretycznej, ale również praktycznej. Umieszczenie kodu języka Java (zwanego kodem źródłowym) w portfolio nie polega na ""wgraniu plików na dysku w chmurze"", ale wymaga dodatkowej wiedzy wykraczającej poza sam język Java.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Jak zbudować portfolio</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak zbudować dobre portfolio? Dlaczego portfolio z ""Hello World!"", to stanowczo za mało? Firmy otrzymują bardzo wiele CV od osób, które ubiegają się o stanowisko Junior Java Developer'a, w tych CV umieszczane są linki do portfolio (repozytorium git, więcej o tym w dalszej części) z kodem źródłowym. Jeżeli mamy w portfolio tylko jeden projekt tzw. <a aria-label=""CRUD (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/CRUD"" target=""_blank"" rel=""noreferrer noopener"">CRUD</a> w <a aria-label=""Spring Framework (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Spring_Framework"" target=""_blank"" rel=""noreferrer noopener"">Spring Framework</a>, to powielamy tylko schemat, który występuje u osób kończących <a aria-label=""Bootcamp'y (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2019/12/28/bootcamp-kursy-online-ksiazki-a-moze-korepetycje-co-wybrac/"" target=""_blank"" rel=""noreferrer noopener"">Bootcamp'y</a> - więcej informacji w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/08/18/pulapki-szablonu-crud-z-bootcamp-we-wlasnym-portfolio-i-rzeczywistym-projekcie/"" target=""_blank"" rel=""noreferrer noopener"">Pułapki szablonu CRUD we własnym portfolio i rzeczywistym projekcie</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>W takim razie, co zrobić? Wyróżnić się jakimś ciekawym projektem? Czy po prostu umieścić wiele projektów, np. z podstawami języka Java?</strong></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Co umieścić w portfolio?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dobre portfolio, moim zdaniem powinno zawierać zarówno jeden ""większy"" projekt z wykorzystaniem <a aria-label=""Spring Framework (otwiera się na nowej zakładce)"" href=""https://spring.io/"" target=""_blank"" rel=""noreferrer noopener"">Spring Framework</a> jak również ""mniejsze"" projekty prezentujące np. właściwości języka Java. Większy projekt w Spring Framework, to niekoniecznie wspomniany wcześniej CRUD - o projekcie z CRUD więcej w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"" rel=""noreferrer noopener"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>. Jeżeli już robimy CRUD'a, to ważne, aby miał on dobrą dokumentację w pliku <a href=""https://en.wikipedia.org/wiki/README"" target=""_blank"" rel=""noreferrer noopener"">README.md</a> oraz sam kod zawierał <a href=""https://www.juniorjavadeveloper.pl/2020/10/02/po-co-w-ogole-testowac-kod-aplikacji-mbank-robi-to-na-produkcji/"" target=""_blank"" rel=""noreferrer noopener"">testy jednostkowe</a>, np. w <a aria-label=""JUnit (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/JUnit"" target=""_blank"" rel=""noreferrer noopener"">JUnit</a> i był zgodny z <a aria-label=""SOLID (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"" rel=""noreferrer noopener"">SOLID</a> i <a aria-label=""DRY (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/DRY"" target=""_blank"" rel=""noreferrer noopener"">DRY</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><strong>Plik README.md</strong> czytają rekruterzy HR'owi, nietechniczni</p>
<!-- /wp:paragraph --><cite>Tu należy umieścić opis projektu, informacje o wykorzystanych technologiach, sposób instalacji oraz uruchomienia projektu. Dodatkowo można dołączyć zrzuty ekranu z działającej aplikacji.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><strong>Repozytorium git</strong> przeglądają rekruterzy techniczni</p>
<!-- /wp:paragraph --><cite>Po ""wyglądzie"" repozytorium git można stwierdzić czy dana osoba zna i poprawnie używa narzędzia git. Najważniejsze, to tworzenie branch'y oraz Pull Request, nawet dla siebie samego. Warto rozłożyć w czasie np.: kilku tygodni commit'y w git.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Gdzie umieścić portfolio?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Najpopularniejsze miejsca do wspóldzielenia i udostępniania kodu źródłowego:</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><a href=""https://github.com/"" data-type=""link"" data-id=""https://github.com/"" target=""_blank"" rel=""noreferrer noopener"">GitHub</a></p>
<!-- /wp:paragraph --><cite>""To platforma i usługa oparta na chmurze służąca do tworzenia oprogramowania i kontroli wersji."" - źródło Wikipedia.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><a aria-label=""Bitbucket (otwiera się na nowej zakładce)"" href=""https://bitbucket.org"" target=""_blank"" rel=""noreferrer noopener"">Bitbucket</a></p>
<!-- /wp:paragraph --><cite>""To usługa hostingowa repozytorium kodu źródłowego oparta na Git."" - źródło Wikipedia.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na GitHub i Bitbucket znajdują się również projekty <a href=""https://en.wikipedia.org/wiki/Open-source_software"" target=""_blank"" rel=""noreferrer noopener"">open-source</a>, z których będziemy korzystać jako programiści języka Java, np. popularny <a aria-label=""Spring Framework (otwiera się na nowej zakładce)"" href=""https://github.com/spring-projects/spring-framework"" target=""_blank"" rel=""noreferrer noopener"">Spring Framework</a> ma swój kod na <a aria-label=""GitHub (otwiera się na nowej zakładce)"" href=""https://github.com/spring-projects/spring-framework"" target=""_blank"" rel=""noreferrer noopener"">GitHub</a>'ie. Znajdziemy tam również kody źródłowe pochodzące z wielu kursów, tutoriali i innych programistów, nie tylko dla języka Java. Podstawową funkcją na GitHub i Bitbucket są repozytoria z kodem źródłowym. Opis wszystkich dostępnych funkcji wychodzi poza zakres tego artykułu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Czego nie robić</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie wysyłamy naszej pracy w postaci archiwum, które zawiera pliki z kodem źródłowym, lub co gorsza pojedynczych plików z klasami Java - kod należy umieścić w zdalnym repozytorium kodu źródłowego. Odstępstwem od tego jest sytuacja, gdy umieszczenie kodu źródłowego w zdalnym repozytorium kodu źródłowego łamie zasady poufności, np. otrzymaliśmy zadanie rekrutacyjne od firmy X, które opiera się na wewnętrznych danych tej firmy. W każdym innym przypadku należy nasz kod umieścić w zdalnym repozytorium kodu źródłowego. Udostępnienie kodu języka Java nie polega na umieszczeniu kodu źródłowego na dysku w chmurze.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie umieszczamy w repozytorium git elementów, które są dynamicznie generowane np. skompilowane klasy - pliki z rozszerzeniem .class - języka Java. Biblioteki, które są automatycznie pobierane i dołączane przez narzędzie taki, jak np. Maven, gradle. Mam nadzieję, że nie muszę przypominać, że nie umieszczamy loginów i haseł w repozytorium git - najlepiej używać mechanizmu kluczy publicznych/prywatnych i/lub certyfikatów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Czym są git oraz GitHub?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><a aria-label=""Git (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Git_(oprogramowanie)"" target=""_blank"" rel=""noreferrer noopener"">Git</a> jest rozproszonym systemem kontroli wersji, np. plików z klasami języka Java. ""Wymiana plików"" kodu źródłowego odbywa się wyłącznie za pomocą <a aria-label=""systemów kontroli wersji (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/System_kontroli_wersji"" target=""_blank"" rel=""noreferrer noopener"">systemów kontroli wersji</a>, takich jak git. Repozytorium git zawiera pliki, najczęściej umieszczone w katalogach, które składają się na projekt, każdy plik w repozytorium git zawiera historię zmian, którą można porównać do historii zmian w pliku Word.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ja, osobiście GitHub i podobne narzędzia nazywam graficzną nakładką na repozytorium git, która umożliwia wspóldzielenie kodu źródłowego oraz przegląd - code review - tego kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Definicja GitHub z <a href=""https://pl.wikipedia.org/wiki/GitHub"" data-type=""link"" data-id=""https://pl.wikipedia.org/wiki/GitHub"" target=""_blank"" rel=""noreferrer noopener"">Wikipedii</a>: ""hostingowy serwis internetowy przeznaczony do projektów programistycznych wykorzystujących system kontroli wersji Git."" Zarówno GitHub jak i Bitbucket udostępniają repozytoria git'a oraz własne dodatkowe funkcje, które nie są dostępne dla narzędzia git. Przykłade takiej funkcji jest Pull Request lub Merge Request.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Co ""mówi wygląd"" repozytorium git?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Bardzo ważne dla osoby weryfikującej nasze portfolio, jest, aby projekt zawierał sporą ilość opisanych zmian w git (git commit -m ""moja zmiana""). Równie ważna jest sama informacja (commit message) zawierająca skrócony opis zmian, które wprowadziliśmy w kodzie i umieszczamy jako commit. Jest to ważne, bo na tej podstawie można ocenić ile czasu zajęło tworzenie projektu i czy czasem nie został on dodany w całości w postaci jednej zmiany, co jest podejrzane. Najważniejsze, to robienie branch'y oraz Pull Request, nawet dla siebie samego.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Niestety dla osób, które zaczynają swoją przygodę z językiem Java git jest poważnym problemem. Natomiast dla osób rekrutujących na stanowisko Junior Java Developer'a portfolio w repozytorium git jest informacją, że dana osoba wie jak współdzielić kod źródłowy w zespole programistów.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-02-07
322,"Przydatne książki i strony do nauki języka Java","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej przedstawiam źródła, z których moim zdaniem najlepiej uczyć się programowania w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>-</strong>--- <strong>Aktualizacja 15 stycznia 2024 r.</strong> ----</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Gdzie nie uczyć się języka Java</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Równie ważna, jak nie ważniejsza jest identyfikacja źródeł, miejsc za pomocą, których nie uczymy się programowania w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">StackOverflow</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podstawowa sprawa, nie uczymy się programowania w języku Java ze strony <a href=""https://stackoverflow.com/"" target=""_blank"" rel=""noreferrer noopener"">StackOverflow</a><strong>.</strong> Szukając w internecie rozwiązań jakiegoś problemu często otrzymujemy wyniki ze <a href=""http://www.stackoverflow.com/"">www.stackoverflow.com</a>. Na tej stronie znajdziemy rozwiązania problemów, które owszem działają, ale które wymagają późniejszej samodzielnej i dogłębnej analizy problemu. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jeżeli korzystamy ze StackOverflow tylko po to, żeby rozwiązać bieżący problem, to szybko okaże się, że nie będziemy w stanie samodzielnie rozwiązać podobnego problemu, bo będzie brakować nam niezbędnej wiedzy. Stackoverflow jest bardzo przydatny do rozwiązywania problemów, ale nie zastąpi rzetelnej wiedzy teoretycznej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Osobiście naukę programowania za pomocą StackOverflow porównuję do ćwiczenia na siłowni i budowania masy mięśniowej z wykorzystaniem środków dopingujących. Możemy szybko otrzymać zadowalające wyniki, ale równie szybko nasza forma może wrócić do punktu wyjścia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">ChatGPT - narzędzia AI</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Aktualizacja 15 stycznia 2024 r.</strong> Programowania w języku Java (i nie tylko) nie uczymy się za pomocą ChatGPT oraz innych narzędzi wykorzystujących sztuczną inteligencję (AI), która za nas wyszukuje informacje, wyciąga wnioski i generuje kod źródłowy. Nie raz widziałem jak moi uczniowie odrabiali pracę domową za pomocą ChatGPT. <strong>W większosci przypadków słyszałem 3x NIE.</strong> Czy wiesz, jak ten kod działa? Czy ten kod jest poprawny? Czy wiesz jak rozbudować ten kod?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">GitHub Copilot - narzędzia AI</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Aktualizacja 15 stycznia 2024 r.</strong> GitHub Copilot jest bardzo pomocnym narzędziem, ale dla osoby, która umie programować w dowolnym języku programowania. W dużym uproszczeniu, użycie Copilot w wybranym IDE np. IntelliJ, sprawia, że postawienie dosłownie jakiegoś znaku - w dowolnym miejscu kod źródłowego - powoduje wygenerowanie bardzo dobrze dopasowanego kodu, który wynika z danego kontekstu. Żeby samemu napisać taki kod potrzeba dużo pracy i nauki.</p>
<!-- /wp:paragraph -->

<!-- wp:video {""autoplay"":true,""id"":4036,""loop"":true,""muted"":true,""align"":""wide""} -->
<figure class=""wp-block-video alignwide""><video autoplay controls loop muted src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/01/2020-02-25_Przydatne-ksiazki-strony-do-nauki-jezyka-Java_GitHub-Copilot_hero-lg-6a98e47708e8.mp4"" playsinline></video><figcaption class=""wp-element-caption"">Przydatne książki i strony do nauki języka Java - GitHub Copilot showcase - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:video -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie jestem przeciwnikiem narzędzi AI wykorzystywanych do pisania kodu źródłowego, po prostu należy, to robić z głową.</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Gdzie uczyć się języka Java</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W takim razie, gdzie i jak uczyć się programowania w języku Java i nie tylko, poniżej podaję moim zdaniem najlepsze źródła.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Oficjalna dokumentacja</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Głównym źródłem wiedzy powinna być <strong>dokumentacja od Oracle</strong> ze strony właściciela języka Java, czyli firmy Oracle <a href=""https://docs.oracle.com/javase/tutorial/"" target=""_blank"" rel=""noreferrer noopener"">The Java™ Tutorials</a> dla Java SE (Standard Edition), <a href=""https://www.oracle.com/technetwork/java/javaee/documentation/tutorials-137605.html"" target=""_blank"" rel=""noreferrer noopener"">Java EE Tutorials</a> dla Java EE (Enterprise Edition). Forma dokumentacji nie zachęca do korzystania z wiedzy tam zgromadzonej, ale moim zdaniem warto jest zacząć uczyć się języka Java korzystając z oficjalnej dokumentacji. Oracle próbuje dokumentację uczynić bardziej przyjazną początkującym na stronie <a href=""https://docs.oracle.com/javase/tutorial/tutorialLearningPaths.html"" target=""_blank"" rel=""noreferrer noopener"">Java Tutorials Learning Paths</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Aktualizacja 15 stycznia 2024 r.</strong> Na szczęście, obecnie można znaleźć odświeżoną wersję oficjalnej dokumentacji <a href=""https://dev.java/"" target=""_blank"" rel=""noreferrer noopener"">https://dev.java/</a>. Wygląda ona bardzo dobrze i łatwo można znaleźć interesujące nas zagadnienia. Ciekawą opcją jest Playground, za pomocą, którego można wykonać kod Java w przeglądarce <a href=""https://dev.java/playground/"" data-type=""link"" data-id=""https://dev.java/playground/"" target=""_blank"" rel=""noreferrer noopener"">https://dev.java/playground/</a> dodatkowo w Playground dostępne są przykłady kodu, które można uruchomić.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Coursera - jak na uniwersytecie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">To platforma, na której możemy znaleźć różne kursy online tworzone przez uniwersytety i organizacje. Poza samym ukończeniem kursu możemy wybrać ścieżkę specjalizacji, która pozwala nam otrzymać certyfikat potwierdzający ukończenie kursu. Każdy kurs ma podaną ocenę i liczbę osób, które w nim uczestniczyły.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kursy mają podobną formę jak na uniwersytecie, czyli musimy przystępować do kolejnych części kursu w wyznaczonych ramach czasowych (chodzić na zajęcia, aby mieć obecność), wykonać zadania domowe i zdobyć odpowiednią liczbę punktów (zaliczyć egzamin). Materiały w trakcie kursu są w formie video, ćwiczeń i teorii (pliki do pobrania). Moim zdaniem taka forma pozwala na potwierdzenie faktycznych umiejętności osoby, która zaliczyła wybrany kurs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dzięki temu certyfikaty wystawiane przez Coursera są powszechnie rozpoznawane i akceptowane, bo w odróżnieniu od innych kursów online nie wystarczy tylko w dowolnym czasie wysłuchać, przeklikać całego materiału, aby otrzymać 100% zdanego kursu. Samemu ukończyłem kilka kursów na Coursera i umieściłem certyfikaty na moim profilu <a href=""https://www.linkedin.com/in/jacekjablonka/"" target=""_blank"" rel=""noreferrer noopener"">LinkedIn</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Udemy</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Możemy tutaj znaleźć bardzo dużo różnych kursów o programowaniu w języku Java i nie tylko. Oferowane kursy są w bardzo dobrych cenach, często są promocje, każdy kurs ma wystawioną ocenę w postaci gwiazdek. W odróżnieniu od wyżej opisanej platformy Coursera na Udemy nie mamy wyznaczonych ram czasowych na ukończenie kursu. Dostępne są również interaktywne ćwiczenia. Udemy po prostu zapewnia dostęp w dowolnym miejscu i czasie do wykupionego przez nas kursu, bez weryfikacji czy przyswoiliśmy sobie materiał.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Książki</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Są dobrym źródłem wiedzy na temat podstaw języka Java, ale w dynamicznie zmieniającym się świecie IT oraz w programowaniu, książki szybko się dezaktualizują. Dotyczy, to przede wszystkim technologii i narzędzi dookoła samego języka Java, np. Spring Framework, Hibernate w tym przypadku dokumentacja online wygrywa z tą w wersji papierowej. W takim razie czy w ogóle warto uczyć się z książek? Myślę, że tak, poniżej lista książek, które moim zdaniem warto przeczytać z podziałem na poziomy zaawansowania czytelnika:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a aria-label=""Java. Rusz głową! Wydanie II - Kathy Sierra, Bert Bates (otwiera się na nowej zakładce)"" href=""https://helion.pl/ksiazki/java-rusz-glowa-wydanie-ii-kathy-sierra-bert-bates,javrg2.htm"" target=""_blank"" rel=""noreferrer noopener"">Java. Rusz głową! Wydanie II - Kathy Sierra, Bert Bates</a> - początkujący,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a aria-label=""Java. Podstawy. Wydanie XI - Cay S. Horstmann (otwiera się na nowej zakładce)"" href=""https://helion.pl/ksiazki/java-podstawy-wydanie-xi-cay-s-horstmann,javp11.htm"" target=""_blank"" rel=""noreferrer noopener"">Java. Podstawy. Wydanie XI - Cay S. Horstmann</a> - średnio zaawansowany,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a aria-label=""Java. Efektywne programowanie. Wydanie III - Joshua Bloch (otwiera się na nowej zakładce)"" href=""https://helion.pl/ksiazki/java-efektywne-programowanie-wydanie-iii-joshua-bloch,javep3.htm"" target=""_blank"" rel=""noreferrer noopener"">Java. Efektywne programowanie. Wydanie III - Joshua Bloch</a> - zaawansowany.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">YouTube</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tutaj również możemy znaleźć bardzo dużo filmów o tym jak programować w języku Java, ale samemu będziemy musieli zrobić selekcję, bo w odróżnieniu od Coursera czy Udemy nie mamy tu kategorii czy systemu ocen danego filmu w postaci gwiazdek. Możemy jedynie posiłkować się liczbą wyświetleń i pozycji w wynikach wyszukiwania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Polecam dwa kanały <a href=""https://www.youtube.com/user/caveofprogramming"" target=""_blank"" rel=""noreferrer noopener"">Cave of Programming</a> i <a href=""https://www.youtube.com/user/koushks"" target=""_blank"" rel=""noreferrer noopener"">Java Brains</a>, korzystałem z nich w trakcie mojej pracy jako Java Developer, ale każdy początkujący programista Java znajdzie coś dla siebie. W Cave of Programming znajdziemy playlistę ""Java for Complete Beginners"", która jest bardzo przydatna, a do tego osoba, która prezentuje dany temat robi, to ze stoickim spokojem. Na kanale Java Brains znajdziemy bardziej zaawansowane kursy np. Spring i JavaEE, osoba, która prezentuje dany temat również robi, to ze stoickim spokojem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Jak nie utonąć w morzu możliwości - moje podejście</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jako osoba, która zaczyna naukę programowania w języku Java spotkasz się z przytłaczającym ogromem dostępnych pomocy i mnogością rozwiązań tego samego problemu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak wybrać, znaleźć ""właściwe"" rozwiązanie jakiegoś problemu, kiedy w internecie można spotkać wiele podobnych rozwiązań tego samego problem? Niestety nie ma jednej odpowiedzi, co robić w takim przypadku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ja na przykład podchodziłem do problemu w następujący sposób. Znajdowałem przynajmniej trzy rozwiązania tego samego problemu, wszystkie przepisywałem, nie robiłem copy/paste, bo wtedy bym nie nauczył się nic. Mając te trzy rozwiązania starałem się znaleźć część wspólną (nie zawsze tak się dało) i to rozwiązanie było tym końcowym. Dzięki temu mogłem poznać i nauczyć się trzech różnych sposobów pisania kodu i jednocześnie rozwiązać problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dodatkowo zachęcam do zapoznania się moim artykułem <a href=""https://www.juniorjavadeveloper.pl/2020/07/22/jak-zmagalem-sie-z-zadaniem-etapy-rozwiazywania-problemow-programistycznych/"" data-type=""post"" data-id=""873"">Jak zmagałem się z zadaniem – etapy rozwiązywania problemów programistycznych</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Szlifowanie warsztatu programisty, programistki</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W kwestii szlifowania warsztatu programisty, należy wykonać jak najwięcej ćwiczeń, tutoriali związanych z aktualnie używaną technologią i językiem. Można również skorzystać z <a href=""http://www.codewars.com"" target=""_blank"" rel=""noreferrer noopener"">www.codewars.com</a>, gdzie poprzez zadania można trenować umiejętności programistyczne oraz współzawodniczyć z innymi programistami. Polecam również <a href=""https://challengerocket.com/"" target=""_blank"" rel=""noreferrer noopener"">https://challengerocket.com/</a> – Solve a SkillChallenge and get immediate feedback to see if you qualify for the recruitment process. All done remotely.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dodatkowo zachęcam do zapoznania się z moim video tutorialem, w którym przedstawiam krok po kroku jak korzystać z platformy Codewars - <a href=""https://www.juniorjavadeveloper.pl/2023/07/05/jak-cwiczyc-umiejetnosci-programistyczne-platforma-codewars-krok-po-kroku-przyklad-java-intellij-youtube/"" data-type=""post"" data-id=""3236"">Jak ćwiczyć umiejętności programistyczne? Platforma CodeWars – krok po kroku, przykład Java + IntelliJ – YouTube</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-01-25
416,"Jak nie utonąć w morzu technologii związanych z językiem Java? Biblioteki, Frameworki, narzędzia","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule przybliżę samo pojęcie bibliotek, sposoby wykorzystania, ich różne formy oraz przedstawię najbardziej popularne, jak również najczęściej wykorzystywane biblioteki.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wiedząc już z innego artykułu, że <a aria-label=""sam język Java, to za mało (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"" rel=""noreferrer noopener"">sam język Java, to za mało</a>, tym razem musimy przygotować się na ogrom narzędzi, bibliotek, framework'ów, które są dostępne dla języka Java i które wspierają pracę programisty, programistki Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Obecnie programista, programistka Java pisząc kod aplikacji korzysta z innych klas Java, które również korzystają z innych klas Java. Pomiędzy klasami tworzą się zależności. Większą liczbę klas dla projektu umieszcza się w bibliotekach, które mogą być używane przez innych programistów. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ciężko jest znaleźć kod, który nie składa się z innych klas chyba, że jest, to <a aria-label=""Hello World! (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/18/pierwszy-kod-w-jezyku-java-w-intellij-krok-po-kroku/"" target=""_blank"" rel=""noreferrer noopener"">Hello World!</a>. Nawet w obrębie własnej aplikacji korzystamy z kilku własnych klas, jeżeli tak nie jest, to zapewne łamiemy zasadę Single Responsibility z <a aria-label=""SOLID (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"" rel=""noreferrer noopener"">SOLID</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jeżeli mamy więcej niż jedną klasę w projekcie, to z takiego projektu tworzymy plik <a aria-label=""JAR (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/JAR_(format_pliku)"" target=""_blank"" rel=""noreferrer noopener"">JAR</a>, czyli bibliotekę, która będzie zawierać skompilowane i gotowe klasy do wykorzystania przez innych programistów. Większość przydatnych bibliotek można pobrać z <a aria-label=""Maven Repository (otwiera się na nowej zakładce)"" href=""https://mvnrepository.com/"" target=""_blank"" rel=""noreferrer noopener"">Maven Repository</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Różnice między pojęciami</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zanim przedstawię listę bibliotek i framework'ów wyjaśnię <a href=""https://pl.wikipedia.org/wiki/Framework"" target=""_blank"" rel=""noreferrer noopener"">różnicę pomiędzy tymi pojęciami</a>. Zarówno biblioteka jak i framework są dodawane do projektu jako zależności, przez zależności rozumiemy zbiór klas dostępnych w postaci pliku JAR. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Biblioteka</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie wnikając w szczegóły techniczne biblioteka jest czymś z czego korzystamy, co używamy w naszym projekcie, daje nam narzędzie do rozwiązania konkretnego zadania, np. operacje na tekście. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Framework</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jest czymś, co daje szablon, który wypełniamy i który korzysta z naszych klas, zarządza nimi i daje cały zestaw narzędzi wspomagających realizację naszego zadania, np. tworzy za nas obiekty, wyświetla graficzny interfejs użytkownika.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Narzędzia</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak na razie nie wspomniałem nic o narzędziach, przedstawiłem jedynie biblioteki i framework'i. Narzędzia wspomagające pracę programisty Java w większości przypadków są oddzielnymi aplikacjami, które mają własny interfejs użytkownika (graficzny, tekstowy), komendy, polecenia. Aplikacje te są instalowane oddzielnie lub w postaci wtyczek np. do przeglądarki, IntelliJ IDEA <a rel=""noreferrer noopener"" aria-label=""IDE (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne"" target=""_blank"">IDE</a>. Narzędzia ułatwiające pracę programisty:<br>- <a rel=""noreferrer noopener"" aria-label=""Postman (otwiera się na nowej zakładce)"" href=""https://www.postman.com/"" target=""_blank"">Postman</a>,<br>- Przeglądarka internetowa w <a rel=""noreferrer noopener"" aria-label=""trybie programisty (otwiera się na nowej zakładce)"" href=""https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools"" target=""_blank"">trybie programisty</a>,<br>- <a rel=""noreferrer noopener"" aria-label=""GitHub (otwiera się na nowej zakładce)"" href=""https://github.com/"" target=""_blank"">GitHub</a> - zdalne repozytorium git.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Przykłady</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyżej podałem kilka przykładów narzędzi programistycznych. Poniżej pokażę kilka przykładów bibliotek oraz framework'ów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Biblioteka</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wartą uwagi biblioteką jest <a rel=""noreferrer noopener"" aria-label=""Lombok (otwiera się na nowej zakładce)"" href=""https://projectlombok.org/"" target=""_blank"">Lombok</a>, który pozwala nam zaoszczędzić czas i pracę przy pisaniu powtarzalnego kodu dla klas <a rel=""noreferrer noopener"" aria-label=""POJO (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" target=""_blank"">POJO</a>, automatycznie generuje za nas np. konstruktory, metody get/set, metodę toString(). Bardzo popularne są biblioteki tworzone przez fundację <a rel=""noreferrer noopener"" aria-label=""Apache (otwiera się na nowej zakładce)"" href=""https://apache.org/"" target=""_blank"">Apache</a>, można wymienić między innymi <a rel=""noreferrer noopener"" aria-label=""Apache Commons (otwiera się na nowej zakładce)"" href=""http://commons.apache.org/"" target=""_blank"">Apache Commons</a>. Przydatna jest również biblioteka <a href=""http://modelmapper.org/"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""ModelMapper (otwiera się na nowej zakładce)"">ModelMapper</a>, która ułatwia proces mapowania jednej klasy na inną klasę.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Framework</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przykładem framework'u jest <a rel=""noreferrer noopener"" aria-label=""JUnit (otwiera się na nowej zakładce)"" href=""https://junit.org/junit5/"" target=""_blank"">JUnit</a>, który wspomaga testowanie naszego kodu. Jest to najbardziej popularny framework do testów kodu w języku Java, istnieją inne, takie jak np. <a rel=""noreferrer noopener"" aria-label=""Selenium (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Selenium_(software)"" target=""_blank"">Selenium</a>, <a rel=""noreferrer noopener"" aria-label=""TestNG (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/TestNG"" target=""_blank"">TestNG</a>, <a rel=""noreferrer noopener"" aria-label=""Mockito (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Mockito"" target=""_blank"">Mockito</a>. Najbardziej popularnym framework'iem jest Spring framework, opis tego framework'u wybiega poza ten artykuł, zapraszam do zapoznania się z oficjalną dokumentacją <a rel=""noreferrer noopener"" aria-label=""Spring Framework (otwiera się na nowej zakładce)"" href=""https://spring.io/"" target=""_blank"">Spring Framework</a> oraz informacjami na <a rel=""noreferrer noopener"" aria-label=""Wikipedii (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Spring_Framework"" target=""_blank"">Wikipedii</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Jak wybrać bibliotekę, framework?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak znaleźć i wybrać odpowiednią dla nas bibliotekę lub framework? Po lekturze tego artykułu jasno i wyraźnie widać, że nie łatwo jest odnaleźć się w gąszczu dostępnych bibliotek i framework'ów. Kiedy ja szukam biblioteki, to tak na prawdę szukam rozwiązania jakiegoś problemu, a biblioteka pojawia się ""przy okazji"" przykładu rozwiązania danego problemu. Mówi się, że w języku Java istnieje już rozwiązanie danego problemu i w większości przypadków takie rozwiązanie jest na tyle uogólnione, że występuje w postaci biblioteki lub framework'u.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Dependencies, czyli zależności</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na koniec przedstawię listę zależności, bibliotek, które możemy dodać do <a aria-label=""&quot;startera&quot; aplikacji (otwiera się na nowej zakładce)"" href=""https://start.spring.io/"" target=""_blank"" rel=""noreferrer noopener"">""startera"" aplikacji</a> opartej na Spring Framework. Prosta aplikacja web (Spring MVC + Thymeleaf) z możliwością utrwalania danych (Spring Data JPA). Dlaczego o tym piszę? Po dodaniu poniższych 4 zależności otrzymujemy około 90 bibliotek, z których te cztery dodane biblioteki korzystają - prawdziwe morze zależności!</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">spring-boot-starter-web
spring-boot-starter-thymeleaf
spring-boot-starter-data-jpa
spring-boot-starter-test</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wspomniane wcześniej zależności dla prostej aplikacji napisanej z wykorzystaniem Spring Framework - Maven dependencies.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":null,""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""xml""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""xml"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">	&lt;dependencies>
		&lt;dependency>
			&lt;groupId>org.springframework.boot&lt;/groupId>
			&lt;artifactId>spring-boot-starter-web&lt;/artifactId>
		&lt;/dependency>
		&lt;dependency>
			&lt;groupId>org.springframework.boot&lt;/groupId>
			&lt;artifactId>spring-boot-starter-thymeleaf&lt;/artifactId>
		&lt;/dependency>
		&lt;dependency>
			&lt;groupId>org.springframework.boot&lt;/groupId>
			&lt;artifactId>spring-boot-starter-data-jpa&lt;/artifactId>
		&lt;/dependency>
		&lt;dependency>
			&lt;groupId>org.springframework.boot&lt;/groupId>
			&lt;artifactId>spring-boot-starter-test&lt;/artifactId>
			&lt;scope>test&lt;/scope>
		&lt;/dependency>
	&lt;/dependencies></pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:image {""align"":""wide"",""id"":3869,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/02/2020-02-22_Jak-nie-utonac-w-morzu-technologii_Mentor-Junior-Java-Developer.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/02/2020-02-22_Jak-nie-utonac-w-morzu-technologii_Mentor-Junior-Java-Developer-1024x781.png"" alt=""Jak nie utonąć w morzu technologii związanych z językiem Java? Biblioteki, Frameworki, narzędzia - Mentor Junior Java Developer"" class=""wp-image-3869""/></a><figcaption class=""wp-element-caption"">Jak nie utonac w morzu technologii zwiazanych z jezykiem Java? Biblioteki, Frameworki, narzedzia - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Poniżej wspomniane wcześniej zależności dla prostej aplikacji napisanej z wykorzystaniem Spring Framework - Gradle dependencies.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":null,""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""json""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""json"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.5'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.8'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.199'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej zależności dla bibliotek, o których wspomniałem w przykładach powyżej - Gradle dependencies.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""json""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""json"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">dependencies {
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.5'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.8'

    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.199'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-02-22
420,"Ścieżki technologiczne na przykładzie aplikacji trójwarstwowej.",,1970-01-01
449,"Dlaczego kod w języku Java powinien być SOLID'ny oraz suchy, DRY?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule postaram się przybliżyć dwie zasady dobrego programowania, a mianowicie <a rel=""noreferrer noopener"" aria-label=""SOLID (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"">SOLID</a> i <a rel=""noreferrer noopener"" aria-label=""DRY (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/DRY"" target=""_blank"">DRY</a>. W Internecie można znaleźć wiele technicznych opisów i przykładów użycia SOLID oraz DRY. Przedstawię te pojęcia od strony mniej technicznej tak, aby były zrozumiałe dla osób, które dopiero, co zaczynają przygodę z programowaniem, albo zastanawiają się czy uczyć się programować, a w szczególności w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego tak ważne są zasady dobrego programowania? Czy zintegrowane środowisko programistyczne <a rel=""noreferrer noopener"" aria-label="" (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne"" target=""_blank"">IDE</a> np. <a rel=""noreferrer noopener"" aria-label=""IntelliJ IDEA (otwiera się na nowej zakładce)"" href=""https://www.jetbrains.com/idea/"" target=""_blank"">IntelliJ IDEA</a> nie powinno robić tego automatycznie za programistę? Niestety, a może na szczęście tak nie jest, podczas pisania kodu programista musi trzymać się wyznaczonych reguł i standardów, a jednocześnie być kreatywny. Reguły dobrego programowania pozwalają tworzyć dobry, czytelny i łatwy w modyfikacji kod. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kod napisany w dowolnym języku programowania powinien czytać się jak dobra książka. Osoba czytająca książkę nie chciałby przecież być zanudzana dokładną kopią fragmentów książki umieszczaną w wielu miejscach tej samej książki (DRY - Don't Repeat Yourself). Ciężko byłoby czytać książkę, która ma pomieszane rozdziały, akcja nie jest spójna i ma się wrażenie, że autor chyba nie wiedział co pisze (SOLID). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie chodzi tu o kreatywną formę prezentacji książki, ani nowy typ powieści. Załóżmy, że książka ma pięć rozdziałów i każdy z nich czytany po kolei tworzy ciąg przyczynowo skutkowy. Teraz wyobraźmy sobie sytuację, że wydawca książki pomieszał rozdziały i złożył książkę z rozdziałami w kolejności losowej. Czytanie takiej książki nie będzie niemożliwe, ale na pewno nie będzie należało do przyjemności.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak samo jest z kodem źródłowym, programista czytając kod kogoś innego musi najpierw poukładać sobie w głowie chronologicznie kod, który właśnie czyta (sekcje kodu), następnie znaleźć bohaterów książki (zmienne) i zrozumieć w jaki sposób wchodzą w interakcję (metody) ze sobą (zależności). Poprawnie skonstruowana <a rel=""noreferrer noopener"" aria-label="" (otwiera się na nowej zakładce)"" href=""https://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html"" target=""_blank"">klasa języka Java według Oracle</a> powinna mieć elementy składowe w następującej kolejności:<br>- stałe,<br>- zmienne,<br>- konstruktory,<br>- metody,<br>- najpierw stałe, zmienne i metod publiczne, później prywatne.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class GoodBook {
    public static final int pages = 120;

    private int currentPage = 1;
    private int progress = 0;

    public GoodBook() {
    }

    public void nextPage() {
        currentPage++;
    }

    private void saveProgress() {
        // calculate reading progress...
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class BadBook {

    // prywatna metoda
    private void saveProgress() {
        // calculate reading progress...
    }
 
   // publiczna stała
    public static final int pages = 120;

    // konstruktor
    public GoodBook() {
    }

    // prywatne zmienne
    private int currentPage = 1;
    private int progress = 0;

    // publiczna metoda
    public void nextPage() {
        currentPage++;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><a rel=""noreferrer noopener"" aria-label=""DRY (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" target=""_blank""><strong>DRY</strong></a>, czyli ang. Don't Repeat Yourself, pol. Nie powtarzaj się, dotyczy zarówno samego kodu jak i czynności wykonywanych przez programistów. Wiele czynności wykonywanych przez programistę można zautomatyzować, czyli np. napisać niewielki program, skrypt, który wykona automatycznie powtarzalne czynności. Skrypty dla Windows to <a rel=""noreferrer noopener"" aria-label=""batch file (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Batch_file"" target=""_blank"">batch file</a>, a dla Linux <a rel=""noreferrer noopener"" aria-label=""shell script (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Shell_script"" target=""_blank"">shell script</a>. Jeżeli chodzi o sam kod, to podstawowym sposobem na uniknięcie duplikowania kodu jest wydzielanie powtarzających się fragmentów kodu do metod, przez metodę rozumiemy blok kodu, który dla wprowadzanych danych zwraca określony wynik.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong><a href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""SOLID (otwiera się na nowej zakładce)"">SOLID</a></strong> określa podstawowe założenia programowania obiektowego, gdzie każda litera oznacza konkretną zasadę programowania. Tak jak pisałem w Internecie można znaleźć bardzo dużo przykładów zastosowania SOLID, np. w języku Java - <a rel=""noreferrer noopener"" aria-label=""Baeldung.com (otwiera się na nowej zakładce)"" href=""https://www.baeldung.com/solid-principles"" target=""_blank"">Baeldung.com</a>, <a rel=""noreferrer noopener"" aria-label=""java2blog.com (otwiera się na nowej zakładce)"" href=""https://java2blog.com/solid-principles-java/"" target=""_blank"">java2blog.com</a>, <a rel=""noreferrer noopener"" aria-label=""howtodoinjava.com (otwiera się na nowej zakładce)"" href=""https://howtodoinjava.com/best-practices/5-class-design-principles-solid-in-java/"" target=""_blank"">howtodoinjava.com</a>. Ja skupię się na wyjaśnieniu tych reguł dla osób zaczynających przygodę z programowaniem w języku Java.<br>S - Single responsibility principle,<br>O - Open-closed principle,<br>L - Liskov substitution principle,<br>I - Interface segregation principle,<br>D - Dependency inversion principle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>S jak zasada jednej odpowiedzialności</strong> - wyobraźmy sobie sytuację, w której jedna osoba (klasa Java) prowadzi biuro rachunkowe, ale jednocześnie jest jego właścicielem. Czynności które wykonuje (metody w klasie Java), to m.in. obsługa księgowa firm, zatrudnianie pracowników, marketing i pozyskiwanie nowych klientów. Ciężko jest zweryfikować, co i kiedy tak na prawdę robi (testy jednostkowe dla klasy Java, np. JUnit) ta osoba. W sytuacji, gdy właściciel zrezygnuje z prowadzenia swojego biura rachunkowego (zmienia kod metody w klasie Java), zmiany należy wprowadzić we wszystkich firmach (klasach Java), które korzystały z jego usług, czyli znaleźć nowe biuro rachunkowe. Podobnie jest z klasami w kodzie Java, jeżeli jedna klasa robi za dużo, to zmiana jednej jej funkcji wpływa na wszystkie klasy korzystające z tej funkcji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>O jak zasada otwarte-zamknięte</strong> - bardzo dobrze obrazują to elementy, które można modyfikować, rozszerzać bez zmiany samego elementu. Dla przykładu firma obsługująca paczkomaty (klasa języka Java) chce obsługiwać nowe większe paczki (metoda w klasie Java), dla których nie ma miejsca w obecnych paczkomatach (algorytm obsługi paczek w klasie Java). Zmiana wszystkich istniejących paczkomatów byłaby bardzo kosztowna, a czasem niemożliwa. Dlatego dobrym rozwiązanie jest takie zaprojektowanie paczkomatu (klasy języka Java), aby można było bez zmiany samego paczkomatu dostawić kolejny element, moduł, który będzie obsługiwał większe paczki (algorytm obsługi paczek w klasie Java pozostanie ten sam). Tak samo jest z klasami języka Java, projektujemy je tak, aby można było je wykorzystywać dla nowo pojawiających się elementów, bez konieczności modyfikacji kodu samej klasy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>L jak zasada podstawienia Liskov</strong> - przykładem może być koło rowerowe (klasa języka Java), które jeżeli ma odpowiednie wymiary (atrybuty w klasie języka Java), średnicę, grubość i wysokość bieżnika można zamontować w dowolnym rowerze, do którego koło będzie pasować. Oczywiście koła mogą mieć inne dodatkowe cechy (atrybuty w klasie języka Java) takie jak, np. rodzaj i kolor bieżnika, dodatkowe szprychy, odblaski. Ale nadal będą spełniać swoją funkcję jako koła. Podobnie jest z klasami języka Java dobrze przemyślana klasa może wymieniać jeden element (atrybuty w klasie języka Java) na inny pochodzący (dziedziczący) z tej samej grupy elementów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>I jak zasada segregacji interfejsów</strong> - krawiec (interfejs w języku Java) biorąc miarę na marynarkę dla mężczyzny lub na żakiet dla kobiety w inny sposób obsługuje (różne metody w różnych interfejsach w języku Java) każdą osobę. Mężczyzna (klasa implementująca interfejs języka Java) nie musi wiedzieć jakie czynności wykonuje krawiec dla kobiety (klasa implementująca intrfejs języka Java) i odwrotnie, ich interesuje usługa (metody w interfejsie w języku Java) jaką wykonuje krawiec. To samo dotyczy segregacji interfejsów. Każdy interfejs musi być uszyty na miarę konkretnego klienta, czyli klasy, która będzie go obsługiwać.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>D jak zasada odwrócenia zależności</strong> - zasadę tę dobrze obrazuje roczny przegląd samochodu i sprawy z tym związane. Jadąc na przegląd do serwisu (framework z Inversion of Control, IoC) nie musimy znać wszystkich czynności, które wchodzą w skład przeglądu oraz wiedzieć która osoba (zależności między klasami języka Java), co i kiedy będzie wykonywać. Takie rzeczy wie serwis (IoC), do którego jedziemy na przegląd, to w serwisie wiedzą jakie czynności, w jakiej kolejności należy wykonać i kto ma wykonać (klasy w języku Java). My tylko przyjeżdżamy do serwisu (korzystamy z framework'u z Inversion of Control, IoC) i podajemy numery rejestracyjne, markę, model oraz przebieg samochodu. W kodzie języka Java sprawa wygląd tak samo, korzystamy z framewokr'a np. Spring Framework, który implementuje mechanizm odwrócenia zależności (ang. Inversion of Control) i to on za nas wie kiedy i jak stworzyć obiekty, przekazać innym obiektom oraz kiedy je usunąć.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-02-29
479,"Pierwsza klasa - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>Wiemy już jak napisać <a rel=""noreferrer noopener"" aria-label=""pierwszy kod w języku Java (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/18/pierwszy-kod-w-jezyku-java-w-intellij-krok-po-kroku/"" target=""_blank"">pierwszy kod w języku Java</a>. W tym artykule omówię podstawowy element każdego programu, aplikacji napisanej w języku Java. Tym elementem jest klasa. Załączony kod pokazuje jak wygląda klasa w języki Java oraz jak ją używać. Nie będę omawiał zagadnień z podstaw programowania obiektowego takich jak: dziedziczenie, hermetyzacja oraz polimorfizm, jest to dłuższy temat na oddzielny artykuł.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a rel=""noreferrer noopener"" aria-label=""Teorię na temat klas języka Java można znaleźć na oficjalnej stronie Oracle (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/classes.html"" target=""_blank"">Teorię na temat klas języka Java można znaleźć na oficjalnej stronie Oracle</a>. Natomiast ja postaram się wytłumaczyć pojęcie ""klasy"" w sposób bardziej przystępny dla osób, które dopiero, co zaczynają przygodę z programowaniem, albo zastanawiają się czy uczyć się programować, a w szczególności w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Klasa jest szablonem do tworzenia obiektów, tak wiem, miało być językiem zrozumiałym dla wszystkich. Zacznę jeszcze raz, klasa pozwala odwzorować obiekty ze świata rzeczywistego na świat programowania obiektowego. Dla przykładu notatnik, w którym piszemy możemy odwzorować na klasę języka Java. Taki notatnik posiada swoje cechy, stan oraz możemy wykonać na nim działanie, tak samo jest z klasą. Poniższa tabela porównuje fizyczny przedmiot notatnika z klasą Notatnik w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""hasFixedLayout"":true,""className"":""is-style-regular""} -->
<figure class=""wp-block-table is-style-regular""><table class=""has-fixed-layout""><thead><tr><th>Notatnik</th><th>Przedmiot</th><th>Klasa</th></tr></thead><tbody><tr><td>Cecha</td><td>ilość stron</td><td>int pages;</td></tr><tr><td>Stan</td><td>ilość zapisanych stron, bieżąca strona</td><td>int pagesWritten;<br>int currentPage;</td></tr><tr><td>Działanie</td><td>przejdź do strony</td><td>void goToPage(int page);</td></tr></tbody></table><figcaption>Porównanie fizycznego notatnika z klasą języka Java.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>    </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    int pages;
    int pagesWritten;
    int currentPage;

    void goToPage(int page) {
        currentPage = page;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tworząc nową klasę jednocześnie tworzymy nowy typ w języku Java, który możemy wykorzystać w innych miejscach naszego kodu. Powyższa klasa dla uproszczenia nie zawiera słów kluczowych public, private itd., które nazywają się <a href=""https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""modyfikatorami dostępu (otwiera się na nowej zakładce)"">modyfikatorami dostępu</a>. Oczywiście istnieje więcej niż jeden notatnik, który możemy kupić i korzystać z niego. Tak samo jest z klasami w języku Java, na podstawie klasy możemy stworzyć obiekt, konkretną reprezentację klasy Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group=""""> public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Powyższy kod ilustruje przykład tworzenia obiektu klasy Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Metoda main() została już opisana w artykule <a rel=""noreferrer noopener"" aria-label=""Pierwszy kod w języku Java (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/18/pierwszy-kod-w-jezyku-java-w-intellij-krok-po-kroku/"" target=""_blank"">Pierwszy kod w języku Java</a>. Skupimy się na linijce <strong>Notebook blankNotebook = new Notebook();</strong> W tej jednej linijce jest zawarte sporo informacji, które rozszyfrujemy później, teraz najważniejsze jest to, że w tym miejscu tworzymy nowy obiekt (o nazwie <strong>blankNotebook</strong>) klasy <strong>Notebook</strong>, który nazywa się również zmienną. Klasę tworzymy tak samo jak w fabryce produkuje się notatniki znając szablon ich tworzenia. Wspomniałem wcześniej, że nasza własna klasa (i każda inna) wprowadza nowy typ do języka Java, tak samo jest w tym przypadku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Notebook blankNotebook = new Notebook();</strong> - tworzenie obietku.<br>Objaśnienie poszczególnych elementów od lewej do prawej:<br>1. <strong>Notebook</strong> - typ zmiennej,<br>2. <strong>blankNotebook</strong> - obiekt klasy Notebook; zmienna,<br>3. <strong>=</strong> - przypisanie wartości do zmiennej, obiektu klasy,<br>4. <strong>new</strong> - tworzenie nowego obiektu klasy Notebook,<br>5. <strong>Notebook</strong> - typ referencji,<br>6. <strong>Notebook()</strong> - wywołanie konstruktora klasy Notebook.<br></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group=""""> public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        Notebook personalNotebook = new Notebook();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Powyższy kod ilustruje przykład tworzenia wielu obiektów klasy Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego tworzymy oddzielną klasę z metodą main()? Wiele przykładów w Internecie robi właśnie w ten sposób, ale nie jest, to dobre podejście. Dlaczego? Ponieważ idąc tym tropem, w momencie kiedy tworzymy nową klasę musielibyśmy tworzyć w niej metodę main(), a to nie jest poprawne. Program, aplikacja napisana w języku Java powinna mieć tylko jedną metodę main(), która pozwala uruchomić nasz program, aplikację. Dlatego najlepiej utworzyć jedną oddzielną klasę z metodą main() i w tej metodzie tworzyć obiekty innych klas. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Po ""krótkim"" wstępie czas na instrukcję krok po kroku jak stworzyć pierwszą klasę w języku Java z wykorzystaniem IntelliJ IDEA. Szczegółowy opis tworzenia od podstaw projektu w IntelliJ IDEA można znaleźć w artykule <a rel=""noreferrer noopener"" aria-label=""Pierwszy kod w języku Java w IntelliJ - krok po kroku (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/01/18/pierwszy-kod-w-jezyku-java-w-intellij-krok-po-kroku/"" target=""_blank"">Pierwszy kod w języku Java w IntelliJ - krok po kroku</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u00224\u0022 gal_title=\u0022Pierwsza klasa w IntelliJ\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""4"" gal_title=""Pierwsza klasa w IntelliJ""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-first-class
<!-- /wp:shortcode -->

<!-- wp:tw/bwg {""popupOpened"":false,""notInitial"":true} /-->

<!-- wp:paragraph -->
<p>Oczywiście przedstawione informacje na temat klasy języka Java, to dopiero wierzchołek góry lodowej, ale od czegoś trzeba zacząć. W tym artykule nie poruszyłem następujących tematów odnośnie klas Java: dziedziczenie, konstruktor, metody get/set, toString(), equals(), hashCode() oraz klasy wewnętrzne, anonimowe. Te tematy poruszę w kolejnych artykułach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-03-07
506,"Wartości w pierwszej klasie - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>W poprzednim artykule <a rel=""noreferrer noopener"" aria-label=""Pierwsza klasa (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa</a> opisałem czym jest klasa i jak ją stworzyć w IntelliJ. Sama klasa jest mało przydatna bez nadania jej wartości, danych i wykonania na niej działania. W tym artykule pokażę jak nadawać wartości klasie, w kolejnym jak wykonać na niej działania. Więcej informacji można znaleźć w oficjalnej dokumentacji Java od Oracle - <a rel=""noreferrer noopener"" aria-label=""Using Objects (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html"" target=""_blank"">Using Objects</a>. Pokażę również jak klasa może nam ""przedstawić się i opowiedzieć coś o sobie"" - metoda toString().</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przedstawię klasę z <a href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""poprzedniego przykładu (otwiera się na nowej zakładce)"">poprzedniego przykładu</a>, bo na niej będę prezentował kolejne zagadnienia związane z klasami języka Java. Tak samo jak poprzednio dla uproszczenia pomijam <a rel=""noreferrer noopener"" aria-label=""modyfikatory dostępu (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" target=""_blank"">modyfikatory dostępu</a> dla zmiennych i metod w klasie Java.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    int pages;
    int pagesWritten;
    int currentPage;

    void goToPage(int page) {
        currentPage = page;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Wartości, czyli dane w klasie przechowywane są w zmiennych, w powyższym przykładzie mamy trzy zmienne:<br>- int pages;<br>- int pagesWritten;<br>- int currentPage;<br>Element przechowujący wartości, dane w klasie ma kilka nazw, określeń, które są używane zamiennie:<br>- zmienna,<br>- pole w klasie,<br>- atrybut klasy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jak nadać wartość zmiennej w klasie? Najpierw potrzebujemy obiekt danej klasy. Następnie dla obiektu musimy ustawić wartości dla jego pól w klasie. Aby dla obiektu mieć dostęp do atrybutu w klasie należy użyć operatora kropki (.) za pomocą, którego odwołujemy się do atrybutu.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// tworzenie obiektu klasy Notebook
Notebook blankNotebook = new Notebook();

// przypisanie wartości do zmiennej
// użycie operatora kropki
blankNotebook.pagesWritten = 10;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Jak sprawdzić nadaną wartość dla zmiennej w klasie? Najprostszym sposobem jest wypisanie jej na konsoli, terminalu, ""czarnym okienku"". Do tego służy polecenie System.out.println(); Konsola i polecenie System.out.println(); będzie towarzyszyć Junior Java Developer'owi przez bardzo, bardzo długi czas i będzie jedynym miejscem, gdzie będzie można zobaczyć wyniki działania programu. Oczywiście są inne sposoby np. testy jednostkowe, używanie Logger'ów, ale na razie wystarczy System.out.println(). Informacje wypisywane na konsoli nazywają się log'ami w codziennej pracy każdy programista przegląda log'i za pomocą, których śledzi działanie programu.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        blankNotebook.pagesWritten = 10;

        // wypisanie wartości jednej zmiennej z klasy Notebook
        System.out.println(""Liczba stron zapisanych w Notatniku:"");
        System.out.println(blankNotebook.pagesWritten);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":520,""width"":409,""height"":102,""sizeSlug"":""full""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-full is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/wartosci-w-pierwszej-klasie_06-konsola.png"" alt=""Wartości w pierwszej klasie – konsola"" class=""wp-image-520"" width=""409"" height=""102""/><figcaption>Wartości w pierwszej klasie – konsola</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Jeżeli chcielibyśmy wypisać więcej zmiennych w konsoli, to trzeba dla każdej zmiennej użyć polecenia System.out.println(); ale jak wiadomo programiści unikają powtarzającego się kodu zgodnie z zasadą DRY, którą opisałem w artykule <a rel=""noreferrer noopener"" aria-label=""Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY? (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a>. Sposobem na rozwiązanie tego jest użycie metody toString(), za pomocą której możemy otrzymać tekstową reprezentację obiektu, czyli informacje czytelne dla programisty w ogólnie przyjętej formie. </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// wypisanie wartości wielu zmiennych z tej samej klasy,
// bez użycia metody toString()
System.out.println(""Wartości wszystkich zmiennych zapisanych w Notatniku:"");
System.out.println(blankNotebook.pages);
System.out.println(blankNotebook.pagesWritten);
System.out.println(blankNotebook.currentPage);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Metodę toString() musimy umieścić w klasie, dla której chcemy wypisywać wartości. Na początku nie trzeba wiedzieć jak dokładnie napisać taką metodę oraz, że taka metoda jest nadpisywana z nadklasy Object. W IntelliJ wystarczy użyć skrótu ALT+Insert będąc w klasie, dla której chcemy dodać metodę toString().</p>
<!-- /wp:paragraph -->

<!-- wp:image {""id"":527,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/wartosci-w-pierwszej-klasie_00_alt-insert.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/wartosci-w-pierwszej-klasie_00_alt-insert-1024x554.png"" alt=""Wartości w pierwszej klasie - toString() - ALT + Insert"" class=""wp-image-527""/></a><figcaption>Wartości w pierwszej klasie - toString() - ALT + Insert</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Poniżej znajdują się zrzuty ekranów ze  wszystkimi krokami jakie należy wykonać, aby ustawić i wyświetlić wartości dla zmiennych w klasie.</p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u00227\u0022 gal_title=\u0022Wartości w pierwszej klasie w IntelliJ\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""7"" gal_title=""Wartości w pierwszej klasie w IntelliJ""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-first-class-attributes
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-03-14
545,"Działania w pierwszej klasie – kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>W tym artykule pokażę jak tworzyć metody w klasie i jak wykonywać działania w klasie. Przez działania rozumiem używanie metody stworzonych w klasie. W poprzednim artykule <a rel=""noreferrer noopener"" aria-label=""Wartości w pierwszej klasie (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/14/wartosci-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Wartości w pierwszej klasie</a> pokazałem jak tworzyć i korzystać z pól w klasie. Więcej informacji można znaleźć w oficjalnej dokumentacji Java od Oracle – <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html"" target=""_blank"">Using Objects</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Będę korzystał z klasy, która była w poprzednich artykułach, uzupełnię ją o metodę, czyli dodam działanie, które można wykonać na klasie.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    int pages;
    int pagesWritten;
    int currentPage;

    void goToPage(int page) {
        currentPage = page;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>W powyższym kodzie, działaniem, metodą jest <strong>void goToPage(int page) {}</strong>. Metoda ta korzysta ze zmiennej <strong>int currentPage</strong>, która jest polem w klasie, przechowuje wartości. Po co w ogóle wykonywać działania na klasie? Nie wystarczy, że przechowuje ona wartości? Niestety nie, wartości i działania w klasie są podstawowymi elementami, których używa programista Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Objaśnienie poszczególnych elementów od lewej do prawej:<br><strong>void goToPage(int page) {}</strong> - deklaracja metody.<br><strong>void</strong> - typ, wartość zwracana z metody<br><strong>goToPage</strong> - nazwa metody<br><strong>()</strong> - parametry metody<br><strong>(int page)</strong> - parametr metody, w nawiasach<br><strong>{}</strong> - ciało metody, między klamerkami<br><br>Powyżej pominąłem samą zawartość metody, czyli linijkę <strong>currentPage = page;</strong>, która jest ciałem metody. W ciele metody zawiera się kod, który sprawia, że metoda wykonuje działania, np. algorytm. Dodatkowo użyta została specjalna wartość zwracana <strong>void</strong>, która oznacza, że nic nie zwracamy z metody, dlatego nie trzeba było używać słowa kluczowego <strong>return</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej przykład użycia, wywołania metody goToPage().</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        // zamiast poniższego przypisania wartości ...
        // blankNotebook.currentPage = 2;
        // ... użyjemy, wywołamy metodę goToPage()
        blankNotebook.goToPage(2);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tak jak w przypadku dla pola w klasie należy użyć <strong>operatora kropki (.)</strong> za pomocą, którego odwołujemy się do metody. W ciele metody, pomiędzy nawiasami <strong>{}</strong>, zawarta jest logika aplikacji, algorytm, kod programu. W tym przypadku jest, to przypisanie wartości parametru metody <strong>int page</strong> do zmiennej w klasie <strong>int currentPage</strong>. Można by zapytać, a dlaczego tego nie zrobić w metodzie main()?</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        blankNotebook.currentPage = 2;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Oczywiście, że można, ale co w przypadku kiedy ktoś poda wartość dla bieżącej strony (<strong>int currentPage</strong>) większą niż liczba stron (<strong>int pages</strong>) w notatniku? Tutaj potrzebny jest algorytm, logika, która sprawdzi czy można wykonać taką operację. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej zmodyfikowana metoda o wspomniany warunek.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    int pages;
    int pagesWritten;
    int currentPage;

    void goToPage(int page) {
        // 'if' - jeżeli strona 'int page', do której chcemy przejść
        // jest większa od liczby stron w notatniku 'int pages' ...
        if (page > pages) {
            // ... wypisz komunikat 'Nie ma takiej strony'
            System.out.println(""Nie ma takiej strony"");
        // 'else' - w przeciwnym przypadku przejdź do podanej strony
        // 'currentPage = page'
        } else {
            currentPage = page;
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Powyższy kod można umieścić w metodzie main(), ale każda osoba korzystająca z klasy Notebook będzie musiała samemu napisać powyższy algorytm metody goToPage(), a to łamie zasadę <a href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"">DRY - Don't Repeat Yourself</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej kod wywołujący, korzystający z metody goToPage().</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        blankNotebook.pages = 10;

        System.out.println(""Obecna strona notatnika: "" + blankNotebook.currentPage);
        blankNotebook.goToPage(6);
        System.out.println(""Po przejściu na wybraną stronę: "" + blankNotebook.currentPage);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":561,""width"":512,""height"":233,""sizeSlug"":""large""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/metody-w-pierwszej-klasie_03-1024x465.png"" alt=""Działania w pierwszej klasie - goToPage() - wynik na konsoli"" class=""wp-image-561"" width=""512"" height=""233""/><figcaption>Działania w pierwszej klasie - metoda goToPage() - wynik na konsoli</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Przyszedł czas na zwrócenie wartości z metody. Poniżej klasa Notebook z dodaną nową metodą <strong>int write(String text);</strong>  w ciele tej metody (pomiędzy klamerkami {}) jest użyte słowo kluczowe <strong>return</strong>, co oznacza, że metoda zwraca wartość, która musi być zgodna z  zadeklarowanym typem zwracanym w tym przypadku <strong>int</strong>. Metoda <strong>goToPage()</strong> nie zwraca żadnej wartości, jej typ zwracany jest zdeklarowany jako <strong>void</strong>, co pozwala na pominięcie słowa kluczowego <strong>return</strong> w metodzie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Działanie metody polega na zapisaniu w notatniku tekstu, który został przekazany do metody jako parametr <strong>String text</strong>. Następnie numer bieżącej strony jest zwiększany o jeden <strong>currentPage = currentPage + 1;</strong>. Metoda zwraca wartość zmiennej currentPage z użyciem słowa kluczowego <strong>return currentPage;</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej klasa Notebook z dodaną metodą <strong>int write(String text)</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    int pages;
    int pagesWritten;
    int currentPage;

    int write(String text) {
        System.out.println(""Zapisuję tekst na stronie: "" + text);
        currentPage = currentPage + 1;

        return currentPage;
    }

    void goToPage(int page) {
        if (page > pages) {
            System.out.println(""Nie ma takiej strony"");
        } else {
            currentPage = page;
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Skoro metoda zwróciła jakąś wartość, to należy tę wartość przypisać do zmiennej, bez tego tracimy, to co zostało obliczone, przetworzone przez algorytm, kod w metodzie. Aby przypisać wartość zwracaną z metody najpierw trzeba stworzyć zmienną, do której przypiszemy wynik zwracany z metody. W <strong>IntelliJ</strong> pomocny jest <strong>skrót CTRL + ALT + V</strong>, który wciskamy będąc w linijce, gdzie jest wywołana metoda. Skrót ten stworzy za nas zmienną i przypisze jej wartość zwracaną z wybranej metody.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">System.out.println(""Jesteś na stronie: "" + blankNotebook.currentPage);
        int currentPageAfterWrite = blankNotebook.write(""Notatki Junior Java Developer'a."");
        System.out.println(""Po zrobieniu notatki jesteś na stronie: "" + currentPageAfterWrite);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Powyżej fragment kodu pokazujący jak przypisać wartość zwracaną z metody.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":567,""width"":512,""height"":144,""sizeSlug"":""large""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/metody-w-pierwszej-klasie_04-1024x287.png"" alt=""Działania w pierwszej klasie – wartość zwracana metody write – wynik na konsoli"" class=""wp-image-567"" width=""512"" height=""144""/><figcaption>Działania w pierwszej klasie – wartość zwracana z metody write – wynik na konsoli</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Często wiele osób na początku ma problem z zapamiętaniem, gdzie i kiedy należy utworzyć zmienną, do której przypiszemy wartość zwracaną z metody. Zmienną tworzymy zawsze przed wywołaniem metody i/lub na początku linijki, w której wywoływana jest metoda. Pomocą, która pozwoli zapamiętać, gdzie tworzyć zmienną jest sama metoda i jej deklaracja. Np. metoda <strong>int write(String text)</strong> wartość zwracaną <strong>int</strong> ma na początku, przed nazwą samej metody i tak właśnie trzeba ustawić kursor, na początku linii, w której chcemy przypisać wartość zwracaną z metody. Deklarujemy zmienną, np. <strong>int currentPageAfterWrite</strong> i przypisujemy do niej wartość zwracaną z metody write.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przepis na przypisanie wartości zwracanej z metody:<br>- szukamy informacji, podpowiedzi w deklaracji metody, np.: <strong>int write(String text)</strong>,<br>- ustawiamy kursor na początku linii, w której wywołujemy metodę, np. <strong>blankNotebook.write(""Notatki Junior Java Developer'a"");</strong>,<br>- deklarujemy zmienną, np. <strong>int currentPageAfterWrite</strong>,<br>- przypisujemy wartość zwracaną z metody do zmiennej, np. <strong>int currentPageAfterWrite = blankNotebook.write(""Notatki Junior Java Developer'a."");</strong>,<br>- albo korzystamy ze skrótu CTRL + ALT + V w IntelliJ.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Kod klasy NotebookStore, która korzysta z klasy Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NotebookStore {
    public static void main(String[] args) {
        Notebook blankNotebook = new Notebook();
        blankNotebook.pages = 10;

        System.out.println(""Obecna strona notatnika: "" + blankNotebook.currentPage);
        blankNotebook.goToPage(6);
        System.out.println(""Po przejściu na wybraną stronę: "" + blankNotebook.currentPage);

        System.out.println(""Jesteś na stronie: "" + blankNotebook.currentPage);
        int currentPageAfterWrite = blankNotebook.write(""Notatki Junior Java Developer'a."");
        System.out.println(""Po zrobieniu notatki jesteś na stronie: "" + currentPageAfterWrite);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-first-class-methods
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-03-21
586,"Ukrywamy, hermetyzujemy nasz kod w klasie - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>W poprzednich artykułach opisałem teorię i pokazałem przykłady kodu dotyczące tworzenia <a rel=""noreferrer noopener"" aria-label=""pierwszej klasy w języku Java (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"">pierwszej klasy w języku Java</a>, jak i gdzie zapisać <a rel=""noreferrer noopener"" aria-label=""wartości w klasie (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/14/wartosci-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">wartości w klasie</a> oraz jak wykonywać <a rel=""noreferrer noopener"" aria-label=""działania na klasie (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/21/dzialania-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">działania na klasie</a>. Teraz przyszedł czas na ukrywanie, hermetyzowanie naszego kodu w klasie przed niepowołanym dostępem z innych fragmentów kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego mielibyśmy ukrywać nasz kod przed innymi klasami, developer'ami? W jaki sposób osiągnąć hermetyzację kodu? Dlaczego jest to tak ważne? Hermetyzacja jest jedną z trzech zasad programowania obiektowego, czyli: dziedziczenie, polimorfizm i hermetyzacja.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W języku Java hermetyzacja realizowana jest przez słowo kluczowe <strong>private</strong>, które może być używane dla klasy, metody oraz zmiennej.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// private - na poziomie klasy
private class Notebook {}

// private - na poziomie metody
private void goToPage(int page) {}

// private - na poziomie zmiennej
private int currentPage;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Dlaczego ukrywanie, hermetyzacja kodu przed innymi klasami jest taka ważna? Mając wiedzę z poprzednich artykułów wyobraźmy sobie klasę Thermostat, termostat umożliwia utrzymywanie zadanej temperatury, wprowadzana temperatura jest za pomocą klawiatury urządzenia (nie pokrętła). Termostat jest połączony z urządzeniem, które wydziela ciepło np. silnik samochodu i dba o prawidłową temperaturę pracy silnika. Jeżeli zmienna przechowująca ustawioną temperaturę nie miała by słowa kluczowego <strong>private</strong>, to można w dowolny sposób zmienić temperaturę i doprowadzić do uszkodzenia silnika.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aby uniknąć wyżej opisanej sytuacji należy zmienne/pola/atrybuty klasy zrobić prywatnymi poprzez użycie słowa kluczowego <strong>private</strong>. Dodatkowo należy dodać warunek sprawdzający czy podana wartość temperatury dla termostatu mieści się w granicach poprawnej pracy urządzenia, np. 60 - 100 °C.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej przykład kodu ze zmienną prywatną.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Thermostat {
    private double temperature;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej próba użycia zmiennej <strong>temperature</strong> dla klasy <strong>Thermostat</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CarEngineMain {
    public static void main(String[] args) {
        Thermostat thermostat = new Thermostat();
//        thermostat.temperature = 99.99;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Nie możemy skorzystać ze zmiennej <strong>temperature</strong> ponieważ jest ona prywatna i tylko metody w klasie <strong>Thermostat</strong> mogą z niej korzystać. Próba dostępu do zmiennej prywatnej kończy się błędem kompilacji, w tym przypadku otrzymujemy komunikat: 'temperature' has private access in 'pl.juniorjavadeveloper.java.first.clazz.encatsulation.Thermostat'.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W takim razie co należy zrobić, aby zmienić wartość zmiennej prywatnej? Należy skorzystać z własnej metody publicznej, która ustawi wartość dla pola temperature w klasie Thermostat. Możemy zrobić, to na kilka sposobów, jednym z nich jest stworzenie dowolnej metody, która jako parametr będzie przyjmować zadaną temperaturę. Drugim sposobem jest skorzystanie z metod get/set, które są konwencją wykorzystywaną przez język Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej pierwszy sposób dostępu do zmiennych za pomocą własnej metody.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Thermostat {
    private double temperature;

    // metoda publiczna zmieniająca wartość temperatury termostatu
    public void changeTemp(double newTemperature) {
        this.temperature = newTemperature;
    }

    // metoda publiczna zwracająza wartość temperatury termostatu
    public double showTemp() {
        return this.temperature;
    }
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej przykład użycia metod operujących na zmiennej temperature dla klasy Thermostat.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CarEngineMain {
    public static void main(String[] args) {
        Thermostat thermostat = new Thermostat();
//        thermostat.temperature = 99.99;

        thermostat.changeTemp(80.0);
        double showTemp = thermostat.showTemp();
        System.out.println(""Temperatura dla termostatu: "" + showTemp);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":593,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/hermetyzacja-w-pierwszej-klasie_00_konsola-00.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/hermetyzacja-w-pierwszej-klasie_00_konsola-00-300x162.png"" alt=""Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku - własne metody"" class=""wp-image-593""/></a><figcaption>Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku - własne metody</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Rozbudujemy powyższy kod z własnymi metodami o warunek sprawdzający poprawność ustawianej temperatury i sprawdzimy jego działanie. Metoda main() pozostaje bez zmian, wynik programu będzie przedstawiony na konsoli.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public void changeTemp(double newTemperature) {
    if (newTemperature >= 60 &amp;&amp; newTemperature &lt;= 100) {
        this.temperature = newTemperature;
    } else {
        System.out.println(""Niepoprawna wartość temperatury!"");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">    public static void main(String[] args) {
        Thermostat thermostat = new Thermostat();
//        thermostat.temperature = 99.99;

        thermostat.changeTemp(101.0);
        double showTemp = thermostat.showTemp();
        System.out.println(""Temperatura dla termostatu: "" + showTemp);
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":596,""sizeSlug"":""medium""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/03/hermetyzacja-w-pierwszej-klasie_00_konsola-01-300x163.png"" alt=""Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku – własne metody z warunkiem"" class=""wp-image-596""/><figcaption>Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku – własne metody z warunkiem</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Jak widać na powyższym zrzucie ekranu, temperatura termostatu nie została zmieniona, działa na ustawieniach początkowych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Drugim sposobem na zmianę wartości dla zmiennych w klasie jest wykorzystanie metod get/set (getter/setter) zgodnie z konwencją nazewniczą języka Java. Co do zasady metody get/set nie powinny zawierać logiki np. warunków sprawdzających wartości zmiennych. O konwencji nazewniczej napiszę więcej za chwilę, na razie pokażę przykładowy kod oraz jak <strong>wygenerować getter/setter w IntelliJ IDEA używając skrótu ALT + Insert</strong> (kursor w dowolnym miejscu w klasie).</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group=""""> public class Thermostat {
    private double temperature;

    public double getTemperature() {
        return temperature;
    }

    public void setTemperature(double temperature) {
        this.temperature = temperature;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002210\u0022 gal_title=\u0022Hermetyzacja w pierwszej klasie w IntelliJ\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""10"" gal_title=""Hermetyzacja w pierwszej klasie w IntelliJ""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p>Na załączonych zrzutach ekranu widać jak łatwo wygenerować <strong>getter/setter</strong>, oczywiście trzeba znać konwencję do tworzenia tych metod. Najważniejsze, to wiedzieć po co w ogóle są te metody i do czego je używać. Metody te są zawsze publiczne, używany dla nich słowa kluczowego <strong>public</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Konwencja nazewnicza dla metody get/getter:<br>1. Metoda get/getter:<br>- bierzemy nazwę pola w klasie np. temperature,<br>- tworzymy publiczną, zwracającą ten sam typ, co zmienna,<br>- metoda musi mieć przedrostek get,<br>- do get dodajemy nazwę pola pisaną wielką literą, getTemperature,<br>- w metodzie zwracamy wartość pola w klasie.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Thermostat {
    private double temperature;

    public double getTemperature() {
        return temperature;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Konwencja nazewnicza dla metody set/setter:<br>2. Metoda set/setter:<br>- bierzemy nazwę pola w klasie np. temperature,<br>- tworzymy publiczną metodę, która nic nie zwraca,<br>- metoda przyjmuje parametr tego samego typu, co zmienna,<br>- metoda musi mieć przedrostek set,<br>- do set dodajemy nazwę pola pisaną wielką literą, setTemperature,<br>- w metodzie ustawiamy wartość dla pola w klasie.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Thermostat {
    private double temperature;

    public void setTemperature(double temperature) {
        this.temperature = temperature;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej przykład użycia metod get/set.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CarEngineMain {
    public static void main(String[] args) {
        Thermostat thermostat = new Thermostat();

        thermostat.setTemperature(80.0);
        double temperature = thermostat.getTemperature();
        System.out.println(""Temperatura dla termostatu: "" + temperature);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":609,""sizeSlug"":""medium""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/hermetyzacja-w-pierwszej-klasie_01_konsola-00-300x149.png"" alt=""Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku – metody get/set"" class=""wp-image-609""/><figcaption>Ukrywamy, hermetyzujemy nasz kod w klasie – kod Java, IntelliJ, krok po kroku – metody get/set</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Podsumowując, hermetyzacja jest ważnym elementem programowania obiektowego. W języku Java hermetyzację kodu uzyskujemy za pomocą słowa kluczowego private. Dostęp do pól prywatnych realizowany jest za pomocą własnych metod i/lub metod get/set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-first-class-encapsulation
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-03-31
617,"Pierwsza klasa jako serwis CRUD - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>Przyszedł czas na połączenie całej zdobytej wiedzy i stworzenie pierwszego serwisu opartego na <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/CRUD"" target=""_blank"">CRUD</a>. Pisząc serwis nie mam namyśli serwisu www, chodzi o klasę, która ma specjalne przeznaczenie i zawiera operacje CRUD - Create, Read, Update, Delete. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bardzo wiele aplikacji jest tzw. CRUD'ami, czyli udostępnia podstawowe operacje tworzenia (create), odczytu (read), modyfikacji (update) oraz usuwania (delete) obiektów jakiejś klasy. Dla przykładu weźmy katalog samochodów, gdzie mamy klasę Car.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej operacje CRUD dla klasy Car:<br>- CREATE - dodawanie samochodu do katalogu,<br>- READ - odczytanie szczegółów samochodu z katalogu,<br>- UPDATE - zmiana, modyfikacja informacji o samochodzie w katalogu,<br>- DELETE - usunięcie samochodu z katalogu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dodatkowo z CRUD'em związana jest metoda list(), zwracająca listę wszystkich obiektów, na których operuje CRUD, czyli w naszym przypadku metoda list() zwróci listę wszystkich samochodów w katalogu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W poprzednich artykułach opisałem teorię i pokazałem przykłady kodu dotyczące tworzenia <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"">pierwszej klasy w języku Java</a>, jak i gdzie zapisać <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/14/wartosci-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">wartości w klasie</a>, jak wykonywać <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/21/dzialania-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">działania na klasie</a>, jak <a rel=""noreferrer noopener"" aria-label=""ukryć kod klasy (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/03/31/ukrywamy-hermetyzujemy-nasz-kod-w-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">ukryć kod klasy</a> przed niepowołanym dostępem oraz przedstawiłem <a rel=""noreferrer noopener"" aria-label=""tablice i listy (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/04/11/tablice-i-listy-kod-java-intellij-krok-po-kroku/"" target=""_blank"">tablice i listy</a> w języku Java. Te pięć artykułów jest niezbędne do stworzenia serwisu z operacjami CRUD.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim zacznę pisać dlaczego w ogóle stosować CRUD i dlaczego jest on tak ważny poniżej przedstawię klasę Java, która jest CRUD'em, posłuży nam jako szablon dla innych klas będących CRUD'ami. Oczywiście poniższa klasa nic nie robi, zawiera tylko metody, które nie przyjmują żadnych parametrów, ani nie zwracają żadnej wartości.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// CRUD - template class
public class CrudServiceTemplate {
    // C - create
    public void create() {
    }
    // R - read
    public void read() {
    }
    // U - update
    public void update() {
    }
    // D - delete
    public void delete() {
    }
    // L - list
    public void list() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>CRUD jest nierozerwalnie związany z klasą, dla której wykonywane są operacje, żeby mieć poprawny i funkcjonalny CRUD potrzebujemy jeszcze jednej klasy. Klasy, na których operuje CRUD są po prostu zwykłymi <a rel=""noreferrer noopener"" aria-label=""POJO (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/POJO"" target=""_blank"">POJO</a>, czyli klasami, które mają atrybuty/zmienne/pola do tego konstruktory i metody get/set. Takie klasy często są określane mianem: model, encja, <a href=""https://en.wikipedia.org/wiki/Data_transfer_object"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""DTO (otwiera się na nowej zakładce)"">DTO</a>, <a href=""https://en.wikipedia.org/wiki/Value_object"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""VO (otwiera się na nowej zakładce)"">VO</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej przykład klasy, z której będzie korzystał CRUD.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Car {
    private int year;
    private String model;
    private String manufacturer;
    private BigDecimal price;

    // constructors
    // getters/setters
    // toString()
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Mając powyższą klasę Car oraz szablon dla klas z CRUD (CrudServiceTemplate) stworzymy klasę będącą serwisem, czyli zawierającą logikę odnośnie CRUD'a dla klasy Car. Należy zauważyć, że nie ma już potrzeby dodawania w nazwie klasy słowa Crud. Poniżej wspomniana klasa, na razie zwraca ona wartości null dla czytelności kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// CRUD Service dla klasy Car
public class CarService {

    // lista przechowująca wszystkie samochody
    // tylko i wyłącznie dla uproszczenia kodu aplikacji
    // docelowo dane powinny być przechowywane w bazie danych
    private List&lt;Car> carsCatalog = new ArrayList&lt;>();

    // C - create
    public Car create(Car car) {
        return null;
    }
    // R - read
    public Car read(Integer id) {
        return null;
    }
    // U - update
    public Car update(Integer id, Car car) {
        return null;
    }
    // D - delete
    public void delete(Integer id) {
    }
    // L - list
    public List&lt;Car> list() {
        return null;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>CRUD jest ważny ponieważ systematyzuje i grupuje w jednym miejscu operacje, które można wykonać na klasie będącej, np. modelem. CRUD można zastosować dla wielu klas w tym samym projekcie. Dzięki zastosowaniu CRUD w kontekście serwisu, klasy Service separujemy dane zawarte w np. modelu od logiki aplikacji, która używa tego modelu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej opiszę oddzielnie każdą metodę z CRUD dla klasy CarService, a na koniec przedstawię całą klasę z pełną implementacją logiki biznesowej wraz z użyciem klasy CarService.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Należy zauważyć, że CarService jest uproszczoną wersją, która zakłada przechowywanie wyników operacji metod CRUD na liście obiektów <strong>private List&lt;Car&gt; carsCatalog;</strong> - katalogu samochodów - docelowo dane powinny być przechowywane w bazie danych. Na potrzeby tego przykładu <strong>private List&lt;Car&gt; carsCatalog;</strong> będzie symulować bazę danych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Symulując bazę danych za pomocą <strong>private List&lt;Car&gt; carsCatalog;</strong> musimy pamiętać o tym, że w bazie danych każdy wiersz powinien mieć unikalny identyfikator, osiągniemy, to za pomocą <strong>private Random randomCarId;</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego operujemy na unikalnych identyfikatorach? Ponieważ może być wiele takich samych samochodów, tzn. ich marka, model, rok produkcji będą identyczne. Dlatego musimy wprowadzić unikalny identyfikator, taki identyfikator jest standardową praktyką.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej przykład listy samochodów - katalogu samochodów - z unikalnymi identyfikatorami.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table class=""""><thead><tr><th class=""has-text-align-center"" data-align=""center"">id</th><th class=""has-text-align-center"" data-align=""center"">year</th><th class=""has-text-align-center"" data-align=""center"">model</th><th class=""has-text-align-center"" data-align=""center"">manufacturer</th><th class=""has-text-align-center"" data-align=""center"">price</th></tr></thead><tbody><tr><td class=""has-text-align-center"" data-align=""center"">1</td><td class=""has-text-align-center"" data-align=""center"">2016</td><td class=""has-text-align-center"" data-align=""center"">Model X</td><td class=""has-text-align-center"" data-align=""center"">Tesla</td><td class=""has-text-align-center"" data-align=""center"">340 000 zł</td></tr><tr><td class=""has-text-align-center"" data-align=""center"">4</td><td class=""has-text-align-center"" data-align=""center"">2009</td><td class=""has-text-align-center"" data-align=""center"">Corolla</td><td class=""has-text-align-center"" data-align=""center"">Toyota</td><td class=""has-text-align-center"" data-align=""center"">33 000 zł</td></tr><tr><td class=""has-text-align-center"" data-align=""center"">99</td><td class=""has-text-align-center"" data-align=""center"">2020</td><td class=""has-text-align-center"" data-align=""center"">XC 90</td><td class=""has-text-align-center"" data-align=""center"">Volvo</td><td class=""has-text-align-center"" data-align=""center"">300 000 zł</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej szczegółowy opis każdej z metod z CRUD. Należy zauważyć, że nad każdą metodą jest specjalny komentarz w postaci <strong>/** Treść komentarza */</strong> jest, to <a href=""https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""Javadoc (otwiera się na nowej zakładce)"">Javadoc</a>, specjalna forma komentarza, która jest rozpoznawana przez IDE takie jak IntelliJ i wyświetlane w postaci Tooltip oraz służy do tworzenia dokumentacji do projektu. Dla przykładu <a rel=""noreferrer noopener"" aria-label=""dokumentacja klasy Object (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html"" target=""_blank"">dokumentacja klasy Object</a> jest wygenerowana z Javadoc.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":717,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/Java-CRUD_Tooltip-Javadoc-s.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/Java-CRUD_Tooltip-Javadoc-s-1024x559.png"" alt=""Javadoc Tooltip - Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku"" class=""wp-image-717""/></a><figcaption>Javadoc Tooltip - Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>C - Create - tworzenie samochodu za pomocą serwisu.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">/**
 * C - create - tworzy/zapisuje samochód do katalogu
 * @param car Dane samochodu do utworzenia/zapisania w katalogu
 * @return Utworzony samochód z unikalnym identyfikatorem
 */
public Car create(Car car) {
    // generowanie unikalnego identyfikatora samochodu
    int id = randomCarId.nextInt(100_000);
    // ustawienie unikalnego identyfikatora dla samochodu
    car.setId(id);

    // dodanie nowego samochodu do katalogu
    carsCatalog.add(car);
    // zwrócenie utworzonego samochodu z unikalnym identyfikatorem
    return car;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>R - Read - odczytywanie samochodu za pomocą serwisu.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">/**
 * R - read - odczytuje/wyszukuje samochód z katalogu
 * @param id Unikalny identyfikator samochodu w katalogu
 * @return Odczytany z katalogu samochód
 */
public Car read(Integer id) {
    // iterujemy po liście/katlogu samachodów
    for (Car car : carsCatalog) {
        // dla każdego samochodu w katalogu ...
        // ... sprawdzamy czy identyfiktory zgadzają się
        if (car.getId().equals(id)) {
            // jeżeli identyfikatory są zgodne, to ...
            // ... zwracamy wyszukany/odczytany samochód
            return car;
        }
    }
    // jeżeli nie znaleziono szukanego samochodu zwracamy null
    return null;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>U - Update - modyfikacja danych samochodu za pomocą serwisu.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">/**
 * U - update - modyfikuje dane samochodu w katalogu.
 * @param id Identyfikator samochodu do modyfikacji danych
 * @param carUpdate Aktualne/nowe dane samochodu
 * @return Zmodyfikowany samochód w katalogu
 */
public Car update(Integer id, Car carUpdate) {
    // iterujemy po liście/katlogu samachodów
    for (Car car : carsCatalog) {
        // dla każdego samochodu w katalogu ...
        // ... sprawdzamy czy identyfiktory zgadzają się
        if (car.getId().equals(id)) {
            // jeżeli identyfikatory są zgodne, to ...
            // ... modyfikujemy dane samochodu ...
            car.setYear(carUpdate.getYear());
            car.setModel(carUpdate.getModel());
            car.setManufacturer(carUpdate.getManufacturer());
            car.setPrice(carUpdate.getPrice());
            
            // ... zwracamy zmodyfikowany samochód 
            return car;
        }
    }
    // jeżeli nie znaleziono szukanego samochodu zwracamy null
    return null;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>D - Delete - usuwanie samochodu za pomocą serwisu.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">/**
 * D - delete - usuwa samochód z katalogu.
 * @param id Identyfikator samochodu do usunięcia z katalogu.
 */
public void delete(Integer id) {
    // tworzymy Iterator dla naszej listy,
    // aby uniknąć wyjątku ConcurrentModificationException 
    // podczas jednoczesnego iterowania po liście
    // i usuwania z niej elementów
    Iterator&lt;Car> iterator = carsCatalog.iterator();
    // wykonujemy operacje dopóki Iterator ma kolejne elementy
    while (iterator.hasNext()) {
        // pobieramy kolejny element
        Car car = iterator.next();
        // jeżeli identyfikatory są zgodne, to ...
        if (car.getId().equals(id)) {
            // ... usuwamy samochód z listy
            iterator.remove();
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Przyszedł czas na użycie powyższych metod, tak jak widać powstało bardzo dużo kodu, który jeszcze nie został użyty i nie wiadomo czy spełnia nasze oczekiwania i czy w ogóle działa. Oczywiście w prawdziwym projekcie powstałyby najpierw testy jednostkowe zgodnie z <a rel=""noreferrer noopener"" aria-label=""TDD (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"">TDD</a>. Na potrzeby przykładów dla osób dopiero zaczynających przygodę z językiem Java powyższy kod jest wystarczający.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">    public static void main(String[] args) {
        System.out.println(""Katalog samochodów z wykorzystaniem CarService - CRUD'a"");

        // stworzenie obiektu będącego CRUD'em
        CarService carService = new CarService();

        System.out.println(""Zawartość katalogu samochodów przed dodanie zawartości"");
        List&lt;Car> carsCatalog = carService.list();
        System.out.println(carsCatalog + ""\n"");

        System.out.println(""Dodanie jednego samochodu do katalogu"");
        Car toyotaCorollaCar = new Car(2009, ""Corolla"", ""Toyota"", BigDecimal.valueOf(33_000.00));
        System.out.println(""Samochód poza katalogie nie posiada unikalnego identyfikatora"");
        System.out.println(toyotaCorollaCar);
        Car createdToyotaCorollaCar = carService.create(toyotaCorollaCar);
        System.out.println(""Utworzony/dodany samochód w katalogu posiada unikalny identyfikator"");
        System.out.println(createdToyotaCorollaCar + ""\n"");

        System.out.println(""Zawartość katalogu samochodów po dodaniu jednego samochodu"");
        System.out.println(carService.list() + ""\n"");

        System.out.println(""Dodanie kolejnego samochodu do katalogu"");
        Car teslaModelXCar = new Car(2016, ""Model X"", ""Tesla"", BigDecimal.valueOf(340_000.00));
        carService.create(teslaModelXCar);

        System.out.println(""Zawartość katalogu samochodów po dodaniu kolejnego samochodu"");
        System.out.println(carService.list() + ""\n"");

        System.out.println(""Modyfikacja danych samochodu z katalogu"");
        // ... najpierw pobieramy katalog samochodów, aby znać identyfikatory samochodów ...
        List&lt;Car> carsCatalogUpdate = carService.list();
        // ... wybieramy pierwszy samochód do modyfikacji danych ...
        Integer firstCarId = carsCatalogUpdate.get(0).getId();
        Car firstCar = carService.read(firstCarId);
        System.out.println(""Dane samochodu do modyfikacji: "" + firstCar);
        // ... podajemy nowe dane samochodu ...
        Car firstCarUpdate = new Car();
        firstCarUpdate.setId(firstCar.getId());
        firstCarUpdate.setYear(firstCar.getYear());
        firstCarUpdate.setModel(""Corolla Sport"");
        firstCarUpdate.setManufacturer(firstCar.getManufacturer());
        firstCarUpdate.setPrice(BigDecimal.valueOf(35_000.00));
        System.out.println(""Dane samochodu po modyfikacji: "" + firstCarUpdate);
        System.out.println(""W katlogu jeszcze są stare dane"");
        System.out.println(carsCatalog + ""\n"");
        // ... identyfikator samochodu jest przekazywany do metody update() ...
        Integer firstCarToUpdateId = firstCar.getId();
        // ... aktulizujemy dane samochodu w katalogu za pomocą serwisu ...
        Car update = carService.update(firstCarToUpdateId, firstCarUpdate);

        System.out.println(""W katlogu są już nowe dane"");
        System.out.println(carsCatalog + ""\n"");

        // ... usuwamy jedne samochód z katalogu ...
        // ... najpierw pobieramy katalog samochodów, aby znać identyfikatory samochodów ...
        List&lt;Car> carsCatalogDelete = carService.list();
        // .. usuwamy samochód za pomocą serwisu ...
        Car firstCarToDelete = carsCatalogDelete.get(0);
        Integer firstCarToDeleteId = firstCarToDelete.getId();
        carService.delete(firstCarToDeleteId);

        System.out.println(""Samochód został usunięty z katalogu"");
        System.out.println(carsCatalog + ""\n"");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":723,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/Java-CRUD_konsola-wynik.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/Java-CRUD_konsola-wynik-1024x576.png"" alt=""Wynik działania klasy CarServiceMain - Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku"" class=""wp-image-723""/></a><figcaption>Wynik działania klasy CarServiceMain - Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-first-class-crud-service
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-04-25
620,"Tablice i listy – kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>Przyszedł czas na struktury danych takie jak tablice i listy. Są to struktury danych bardzo często używane w programowaniu, ponieważ pozwalają przechować więcej niż jeden obiekt danego typu oraz wykonywać operacje na nich. Struktury danych brzmi ""groźnie"", ale tak na prawdę nie są one skomplikowane. W poprzednich artykułach opisałem teorię i pokazałem przykłady kodu dotyczące tworzenia <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"">pierwszej klasy w języku Java</a>, jak i gdzie zapisać <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/14/wartosci-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">wartości w klasie</a>, jak wykonywać <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/21/dzialania-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">działania na klasie</a> oraz jak <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/31/ukrywamy-hermetyzujemy-nasz-kod-w-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">ukryć kod klasy</a> przed niepowołanym dostępem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim przejdę do samej teorii odnośnie tablic i list pokażę o co chodzi z tym przechowywaniem więcej niż jednego obiektu danego typu. Poniższy kod pokazuje nie najlepsze podejście do tematu wielu zmiennych, obiektów tego samego typu.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class PaintShop {
    private String blackPaint;
    private String whitePaint;
    private String bluePaint;
    // etc.
    // getter/setter
    // toString
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>W powyższym przykładzie za każdym razem kiedy w klasie PaintShop chcielibyśmy dodać nowy kolor musielibyśmy tworzyć nową zmienną, a to już na tym etapie łamie zasadę ""O - open/closed principle"" z <a rel=""noreferrer noopener"" aria-label=""SOLID (otwiera się na nowej zakładce)"" href=""https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)"" target=""_blank"">SOLID</a>. Dodatkowo istnieje bardzo duża liczba kolorów i klasa z np. 99 zmiennymi nie będzie łatwa w utrzymaniu, nie mówiąc już o tym jak będzie wyglądać.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej kod pokazujący użycie zmiennych z klasy PaintShop.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LocalPaintShop {
    public static void main(String[] args) {
        PaintShop paintShop = new PaintShop();

        paintShop.setBlackPaint(""black"");
        paintShop.setGreenPaint(""green"");
        paintShop.setWhitePaint(""white"");

        System.out.println(""Colors in the Shop: "" + paintShop);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":626,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice-i-listy_00_konsola_00.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice-i-listy_00_konsola_00.png"" alt=""Tablice i listy – kod Java, IntelliJ, krok po kroku - wiele String'ów - konsola"" class=""wp-image-626""/></a><figcaption>Tablice i listy – kod Java, IntelliJ, krok po kroku - wiele String'ów - konsola</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Poniższy kod pokazuje jak zadeklarować tablicę obiektów klasy/typu String i uniknąć powyższej sytuacji z oddzielnymi zmiennymi dla każdego koloru.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class PaintShop {
    private String[] paintColors;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tym razem prezentację działania tablic zrobię po prostu w metodzie main() bez klasy zawierającej zmienną tablicową oraz bez metod dostępowych do tablicy. Ułatwi, to zrozumienie istoty tablic bez ""zaciemniania"" obrazu dodatkową. Docelowo zmienna tablicowa musi być w oddzielnej klasie, która umożliwi działanie na tej tablicy. Nie należy modyfikować dowolnej zmiennej, również tablicy, bezpośrednio, bez użycia metod.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje tworzenie tablicy.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ArrayUsageMain {
    public static void main(String[] args) {
        // Deklaracja tablicy typu/klasy String
        // tablica przechowująca 10 elementów
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // - String - typ zmiennych przechowywanych w tablicy,
        // - [] - informacja, o tym, że tworzymy tablicę,
        // - colors - nazwa tablicy
        // = - przypisanie wartości do tablicy
        // new - tworzenie tablicy
        // [10] - rozmiar tablicy
        String[] colors = new String[10];
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Tworząc i korzystając z tablicy należy pamiętać o kilku ważnych elementach:<br></strong>- tablica zawsze musi mieć podany rozmiar,<br>- jeżeli skończy nam się miejsce w tablicy, musimy utworzyć większą,<br>- nie można dynamicznie zmieniać rozmiaru tablicy,<br>- elementy w tablicy są przechowywane na pozycjach od [0] do [n-1],<br>- tablice przechowują wartości pod konkretnym indeksem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje przypisanie i pobranie danych/wartości dla tablicy.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ArrayUsageMain {
    public static void main(String[] args) {
        String[] colors = new String[10];
        // przypisanie wartości do pierwszego elementu
        colors[0] = ""black"";
        // przypisanie wartości do ósmego elementu
        colors[9] = ""white"";
    
        String firstElement = colors[0];
        String fourthElement = colors[3];
        String tenthElement = colors[9];
    
        System.out.println(""Pierwszy element tablicy: "" + firstElement);
        System.out.println(""Czwarty element tablicy: "" + secondElement);
        System.out.println(""Dziesiąty, ostatni element tablicy: "" + eightElement);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":641,""sizeSlug"":""medium""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice-i-listy_00_konsola_01-t-300x155.png"" alt=""Tablice i listy – kod Java, IntelliJ, krok po kroku – pobieranie wartości z tablicy – konsola"" class=""wp-image-641""/><figcaption>Tablice i listy – kod Java, IntelliJ, krok po kroku – działania na tablicy – konsola</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Numerowanie elementów tablicy i ich indeksy zawsze sprawiają najwięcej problemów, bo na pierwszy rzut oka nie są intuicyjne. Wartość tablicy dla konkretnego indeksu można wyjaśnić za pomocą analogi ze skrzynkami na listy np. w bloku, gdzie jest więcej niż jedna skrzynka na listy. <br>- <strong>Ustawianie wartości tablicy:</strong> listonosz umieszczając listy musi znać numer mieszkania adresata i wkłada list do właściwej skrzynki, dla tablicy numerem skrzynki jest jej indeks.<br>- <strong>Pobieranie wartości tablicy:</strong> osoba wyjmująca list również musi wiedzieć, z której skrzynki wyjąć list, czyli znać swój numer mieszkania, dla tablicy jest, to jej indeks. Dopiero dla konkretnego numeru/indeksu można wyjąć listy, wartości z tablicy. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dostęp do elementów tablicy uzyskujemy za pomocą indeksu np. colors[0] pobiera pierwszy, gdzie 0 jest indeksem tablicy. Kod String color = colors[0] pobiera do zmiennej String color wartość będącą pod indeksem 0. Przypisywanie wartości do tablicy również odbywa się za pomocą indeksów np. colors[0] = ""black"", teraz w tablicy pierwszy element będzie miał wartość ""black"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W telegraficznym skrócie starałem się przybliżyć temat tablic, ale tak jak pisałem wcześniej tablice mają pewne ograniczenia, o których należy pamiętać. Po mimo tych ograniczeń tablice są strukturą danych, która jest bardzo często używana. W wielu algorytmach np. sortowania działa się na tablicach, niektóre implementacje List w języku Java oparte są na tablicach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Teraz postaram się przybliżyć listy w języku Java. Listy również jak tablice przechowują więcej niż jeden element danego typu, ale nie mają takich ograniczeń jak tablice np. <br>- nie trzeba podawać rozmiaru listy przy jej tworzeniu,<br>- rozmiar tablicy jest zmieniany dynamicznie podczas wstawiania elementów,<br>- sposób przechowywania elementów zależy od konkretnego typu listy,<br>- elementy w liście przechowywane są od indeksu 0.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Listy w Java w odróżnieniu od tablic są klasami, czyli typami złożonymi. Wszystkie listy w Java są oparte na wspólnym interfejsie java.util.Collection. Dla interfejsu Collection mamy kilka interfejsów rozszerzających, jednym z nich jest właśnie java.util.List, która przechowuje listę elementów. Dla Collection dostępne są również java.util.Set, java.util.Queue oraz wspomniana java.util.List. Dlaczego stworzono wspólny interfejs? Dlatego, aby ujednolicić dostępne operacje na kolekcjach (java.util.Collection) m.in. java.util.List.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":648,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice_i_listy_01_Collection-interface-d.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice_i_listy_01_Collection-interface-d-1024x560.png"" alt=""Tablice i listy – kod Java, IntelliJ, krok po kroku – interfejs java.util.Collection"" class=""wp-image-648""/></a><figcaption>Tablice i listy – kod Java, IntelliJ, krok po kroku – interfejs java.util.Collection</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Operacje na listach wykonujemy za pomocą metod z interfejsu java.util.Collection np. add(E), remove(Object), size(). Niezależnie od tego jaką implementację java.util.List wybierzemy, zawsze mamy dostępne powyższe metody, co ułatwia pracę z kolekcjami w języku Java. Nie będę tutaj pisał o różnicach pomiędzy różnymi typami/implementacjami list np. ArrayList, LinkedList, Vector, więcej informacji można znaleźć w oficjalnej dokumentacji Oracle - <a rel=""noreferrer noopener"" aria-label=""List Implementations (otwiera się na nowej zakładce)"" href=""https://docs.oracle.com/javase/tutorial/collections/implementations/list.html"" target=""_blank"">List Implementations</a>. W poniższych przykładach będę używał ArrayList jako implementacji interfejsu java.util.List.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje tworzenie listy.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ListUsageMain {
    public static void main(String[] args) {
        // Deklaracja listy typu/klasy String
        // domyślnie ArrayList przechowuje 10 elementów
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // - List - typ zmiennej umożliwiającej operacje na liście
        // - &lt;String> - typ generyczny listy, mówi o tym jakie elementy może przechowywać lista
        // - colors - nazwa zmiennej
        // = - przypisanie wartości do listy
        // new - tworzenie obiektu
        // ArrayList - typ listy
        List&lt;String> colors = new ArrayList&lt;>();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje przypisanie i pobranie danych/wartości dla listy.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ListUsageMain {
    public static void main(String[] args) {
        List&lt;String> colors = new ArrayList&lt;>();
        colors.add(""black"");
        colors.add(""white"");
        colors.add(""red"");

        System.out.println(""Pierwszy element listy: "" + colors.get(0));
        System.out.println(""Drugi element listy: "" + colors.get(1));
        System.out.println(""Trzeci element listy: "" + colors.get(2));

        System.out.println(""Zawartość całej listy: "" + colors);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":656,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice-i-listy_00_konsola_02-a.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/tablice-i-listy_00_konsola_02-a-300x164.png"" alt=""Tablice i listy – kod Java, IntelliJ, krok po kroku – działania na liście – konsola"" class=""wp-image-656""/></a><figcaption>Tablice i listy – kod Java, IntelliJ, krok po kroku – działania na liście – konsola</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Nieodzownym elementem tablic i list są pętle, o których napiszę w kolejnych artykułach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-arrays-lists
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-04-11
659,"Pętle - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>W tym artykule omówię pętle dostępne w języku Java. W poprzednim artykule <a href=""https://www.juniorjavadeveloper.pl/2020/04/11/tablice-i-listy-kod-java-intellij-krok-po-kroku/"">Tablice i listy – kod Java, IntelliJ, krok po kroku</a> przedstawiłem struktury danych, które są idealne do prezentowania działania pętli w języku Java. Pętle służą do wykonywania danej czynności zaplanowaną liczbę razy, np. wyświetlenie tekstu ""Hello World!"" trzy razy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Za pomocą pętli możemy iterować, przechodzić po kolejnych elementach. Pętle posiadają warunek sprawdzający czy można kolejny raz wykonać kod programu zawarty w pętli, np. przeszukuj tekst (iterowanie) do momentu znalezienia szukanego wyrazu (warunek). W języku Java mamy dostępnych kilka rodzajów pętli:<br>- ""klasyczna"" pętla for,<br>- pętla ""for-each"",<br>- pętla while i do-while.<br>Więcej informacji można znaleźć w oficjalnej dokumentacji Java od Oracle <a href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html"" target=""_blank"" rel=""noreferrer noopener"" aria-label=""The for Statement (otwiera się na nowej zakładce)"">The for Statement</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim przejdę do omawiania kodu poszczególnych pętli postaram się przedstawić przykłady ich użycia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>""Klasyczna"" pętla for wykorzystywana jest w większości przypadków w połączeniu z tablicami, ponieważ każde kolejne przejście pętli, iteracja posiada ""licznik"" dzięki, któremu możemy operować na kolejnych elementach listy. Za pomocą tego licznika możemy przechodzić po elementach tablicy od początku do końca lub odwrotnie, albo po prostu wybrać interesujący nas element. Ta pętla jest wykonywana określoną liczbę razy, np. tyle ile jest elementów w tablicy. W szczególnym przypadku ""klasyczna"" pętla for może być pętlą nieskończoną.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pętla ""for-each"" służy do iterowania po kolekcjach, czyli elementach, które implementują interfejs java.util.Collection, np. java.util.List, więcej informacji o tym można znaleźć w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/04/11/tablice-i-listy-kod-java-intellij-krok-po-kroku/"">Tablice i listy – kod Java, IntelliJ, krok po kroku</a>. Za pomocą tej pętli można również iterować po tablicach, ale wymaga, to dodatkowego kodu. Pętla ""for-each"" jest dedykowana dla kolekcji. Ta pętla jest wykonywana określoną liczbę razy, np. tyle ile jest elementów w liście, kolekcji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kolejnym przykładem pętli w języku Java jest ""while"" i ""do-while"". Obie pętle są wykorzystywane do wykonywania kodu w pętli dowolną ilość razy, byle został spełniony warunek pętli. W szczególnym przypadku pętla while i do-while mogą być pętlami nieskończonymi. Różnica między pętlo while i do-while jest tak, że pętla do-while wykona się przynajmniej raz ponieważ jej warunek sprawdzany jest później. Jak sama nazwa wskazuje ""do-while"", do - zrób, wykonaj (czynność), a dopiero później while zawierająca warunek, zakończenia pętli.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Prezentację działania pętli for zrobię po prostu w metodzie main() bez klasy zawierającej metodę z ""logiką"" pętli for. Ułatwi, to zrozumienie istoty pętli bez „zaciemniania” obrazu dodatkową. Docelowo pętle for z ich logiką będą umieszczane w metodach i klasach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje deklarację ""klasycznej"" pętli for.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ClassicForLoopMain {
    public static void main(String[] args) {
        // ""klasyczna"" pętla for
        // for(inicjalizacja; warunek końcowy; inkrementacja)
        // kolejne sekcje pętli for rozdzielane są średnikami ;
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // for - początek deklaracji pętli
        // int i = 0 - inicjalizacja - nadanie wartości początkowej zmiennej w pętli
        // i &lt; colors.length - warunek końcowy - wartość dla której pętla się zatrzyma
        // i++ - inkrementacja - zwiększenie zmiennej/licznika w pętli
        for (int i = 0; i &lt; colors.length; i++) {
            // ciało pętli
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej fragment kodu z użyciem ""klasycznej"" pętli for.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ClassicForLoopMain {
    public static void main(String[] args) {
        String[] colors = new String[2];
        colors[0] = ""black"";
        colors[1] = ""white"";

        for (int i = 0; i &lt; colors.length; i++) {
            String color = colors[i];

            System.out.println(""Bieżący kolor: "" + color);
            System.out.println(""i - indeks tablicy: "" + i);
            System.out.println(""colors[i] - wartość tablicy"" + colors[i]);
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":668,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-00.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-00-300x187.png"" alt=""Pętle - kod Java, IntelliJ, krok po kroku - konsola"" class=""wp-image-668""/></a><figcaption>Pętle - kod Java, IntelliJ, krok po kroku - konsola - ""klasyczna"" pętla for</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje deklarację pętli for-each.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ForEachLoopMain {
    public static void main(String[] args) {
        // pętla ""for-each""
        // for(TypElementu element : elementy)
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // for - początek deklaracji pętli
        // String - typ elementu, który jest przechowywany przez listę
        // color - bieżący element pętli
        // : - rozdzielenie elementu od elementów
        // colors - elementy, po których pętla iteruje
        for (String color : colors) {
            // ciało pętli
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej fragment kodu z użyciem pętli for-each.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ForEachLoopMain {
    public static void main(String[] args) {
        List&lt;String> colors = new ArrayList&lt;>();
        colors.add(""black"");
        colors.add(""white"");

        for (String color : colors) {
            System.out.println(""Bieżący kolor: "" + color);
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":678,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-01.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-01-300x188.png"" alt=""Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla for-each"" class=""wp-image-678""/></a><figcaption>Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla for-each</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej porównanie ""klasycznej"" pętli for oraz pętli ""for-each"".</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":680,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_01.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_01-1024x558.png"" alt=""Pętle - kod Java, IntelliJ, krok po kroku - graficzne porównanie pętli for"" class=""wp-image-680""/></a><figcaption>Pętle - kod Java, IntelliJ, krok po kroku - graficzne porównanie pętli for</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje deklarację pętli while.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class WhileLoopMain {
    public static void main(String[] args) {
        int count = 1;

        // pętla while
        // while(warunek zakończenia pętli)
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // while - początek deklaracji pętli
        // count &lt; 3 - warunek zakończenia pętli
        while (count &lt; 3) {
            // ciało pętli
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej fragment kodu z użyciem pętli while.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class WhileLoopMain {
    public static void main(String[] args) {
        int count = 1;
        while (count &lt; 3) {
            System.out.println(""Licznik: "" + count);
            count++;
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":685,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-02.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-02-300x188.png"" alt=""Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla while"" class=""wp-image-685""/></a><figcaption>Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla while</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod pokazuje i opisuje deklarację pętli do-while.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class DoWhileLoopMain {
    public static void main(String[] args) {
        int count = 1;

        // pętla do-while
        // do - ciało pętli while
        // while(warunek zakończenia pętli)
        // ---
        // Wyjaśnienie elementów od lewej do prawej:
        // do - początek deklaracji pętli
        // count &lt; 3 - warunek zakończenia pętli
        do {
            // ciało pętli
        } while (count &lt; 3);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniżej fragment kodu z użyciem pętli do-while.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class DoWhileLoopMain {
    public static void main(String[] args) {
        int count = 1;
        do {
            System.out.println(""Licznik: "" + count);
            count++;
        } while (count &lt; 3);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""center"",""id"":690,""sizeSlug"":""medium"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-medium""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-03.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/04/petle-java_00_konsola-03-300x185.png"" alt=""Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla do-while"" class=""wp-image-690""/></a><figcaption>Pętle - kod Java, IntelliJ, krok po kroku - konsola - pętla do-while</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
https://github.com/juniorjavadeveloper-pl/java-loops
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-04-18
746,"Aplikacje Java mają warstwy jak tort urodzinowy - aplikacja trójwarstwowa","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule przedstawię warstwy aplikacji. Aplikacje w języku Java mają warstwy jak tort urodzinowy. Przedstawię trzy główne warstwy aplikacji oraz warstwę pomocniczą, łączącą inne warstwy oraz bazę danych. Zanim zacznę szczegółowy opis wyjaśnię dlaczego tak ważne jest, aby aplikacja była podzielona na warstwy.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wprowadzenie do warstw</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Stosownie podziału aplikacji na warstwy - klasy i pakiety - jest dobrą praktyką w programowaniu, można powiedzieć, że bez tego nie powstają żadne komercyjne aplikacje i nie chodzi tu tylko o język Java. Każda warstwa reprezentowana jest przez oddzielną klasę umieszczoną w osobnym pakiecie. Pakiety (foldery na dysku) logicznie grupują klasy (pliki na dysku), tym samym tworząc warstwy. Natomiast klasa w danym pakiecie reprezentuje implementację danej warstwy, która zawiera odpowiednią funkcjonalność, czyli rolę, zadanie do wykonania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size"">Poniższy rysunek pokazuje warstwy w aplikacji trójwarstwowej.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""id"":762,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/warstwy-aplikacji-uml.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/warstwy-aplikacji-uml.png"" alt=""Aplikacja trójwarstwowa Java - warstwy w UML"" class=""wp-image-762""/></a><figcaption class=""wp-element-caption"">Aplikacja trójwarstwowa Java - warstwy w UML</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Przykłady warstw</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Typowa aplikacja w języku Java składa się z następujących warstw, które szczegółowo opiszę w dalszej części:<br>1. Warstwa prezentacji, GUI,<br>2. Warstwa logiki biznesowej, service,<br>3. Warstwa dostępu do danych, dao, repository,<br>4. Warstwa pośrednia, mapper, agregat,<br>5. Baza danych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższe nazewnictwo może różnić się w zależności od wybranej technologii, w której została stworzona aplikacja.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Spring Framework</h4>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""normal""} -->
<li class=""has-normal-font-size"">Warstwa prezentacji,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""normal""} -->
<li class=""has-normal-font-size"">Warstwa Service,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""normal""} -->
<li class=""has-normal-font-size"">Warstwa Repository,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""normal""} -->
<li class=""has-normal-font-size"">Warstwa pośrednia Mapper,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""normal""} -->
<li class=""has-normal-font-size"">Baza danych.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Java/Jakarta EE</h4>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Warstwa prezentacji,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Warstwa logiki biznesowej,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Warstwa DAO,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Brak - warstwy pośredniej,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Baza danych.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Diagram UML</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej przykład aplikacji trójwarstwowej z klasami/obiektami wymienianymi między warstwami za pomocą warstwy pośredniej. Do wymiany danych między warstwami używamy np. Model/DTO, Entity/VO i mappera, agregatu - szczegółowo opisane poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":763,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/warstwy-aplikacji-mapper_uml.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/warstwy-aplikacji-mapper_uml.png"" alt=""Aplikacja trójwarstwowa Java - warstwa pośrednia w UML"" class=""wp-image-763""/></a><figcaption class=""wp-element-caption"">Aplikacja trójwarstwowa Java - warstwa pośrednia w UML</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Opis warstw</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej znajduje się szczegółowy opis poszczególnych warst wraz z przykładami ich zastosowania. W skrócie. Warstwa prezentacji to tzw. front-end, zawiera elementy widoczne dla użytkownika w formie graficznej, np. strona www, okienka w graficznym interfejsie użytkownika. Back-end, to warstwa logiki biznesowej, dostępu do danych oraz warstwa pośrednia, warstwy te nie są widoczne w formie graficznej dla użytkownika systemu. Baza danych, to po prostu repozytorium, źródło danych, magazyn danych, który przechowuje dane.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Warstwa prezentacji</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tę warstwę opiszę na podstawie strony www, która wyświetla HTML. Sam HTML, to za mało, potrzebny jest framework aplikacji web, który dostarcza system szablonów HTML. Dodatkowo taki framework korzysta ze wzorca projektowego <a aria-label=""MVC (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"" target=""_blank"" rel=""noreferrer noopener"">MVC</a>. Dlaczego sam HTML nie wystarczy? HTML z założenia tworzy statyczne strony WWW, to Javascript dodaje interakcję z użytkownikiem w przeglądarce WWW. Statyczne strony, to takie, które są wyświetlane dokładnie tak, jak zostały napisane w HTML'u, Javascript operuje na elementach HTML'a. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Do komunikacji i udostępniania dynamicznych danych zwracanych przez serwer aplikacji, back-end, potrzebny jest dynamiczny HTML, który uzyskujemy za pomocą fremwork'ów web z systemem szablonów. <strong>Przykładem warstwy prezentacji</strong> może być formularz www umożliwiający wykonanie przelewu bankowego. Na takim formularzu podajemy dane do przelewu, kwotę oraz datę wykonania przelewu. Zebrane dane są przesyłane do back-end'u, warstwy logiki biznesowej.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Warstwa logiki biznesowej</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zwana również service, zawiera logikę aplikacji, która umożliwia przetwarzanie przychodzących danych z np. www i zwraca wynik przetwarzania. W tej warstwie zawarte są algorytmy, weryfikacja poprawności danych i obliczenia na danych. Service jest pośrednikiem pomiędzy warstwą prezentacji, a warstwą dostępu do danych w tej warstwie znajduje się również warstwa pośrednia, mapper, agregat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Przykładem warstwy logiki biznesowej, service</strong> może być kod aplikacji weryfikujący przelew bankowy, który zlecił użytkownik przez www. Back-end przed wykonaniem przelewu sprawdzi najpierw czy klient ma dostępne środki na koncie, czy przelew jest zaplanowany na banking-day, czyli dzień pracy banku. Może też uruchomić mechanizmy przeciwdziałające praniu brudnych pieniędzy i wiele innych. Bardzo dużo rzeczy dzieje się po stronie back-end'u.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Warstwa dostępu do danych</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ta warstwa odpowiedzialna jest za utrwalanie, zapisywanie wykonanych operacji do np. bazy danych. Co to oznacza? Weźmy za przykład wyżej przedstawiony przelew bankowy. Po poprawnym wykonaniu przelewu, zapisywana jest informacja, o tym kto i kiedy zrobił przelew, na jaką kwotę i jakie było saldo po i przed operacją. Takie dane posłużą później wyświetleniu historii przelewów na naszym rachunku bankowym oraz do np. wygenerowania wykresu naszych wydatków. Bez utrwalonych, zapisanych danych nie było by, to możliwe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Warstwa pośrednia</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Może pełnić funkcję mapper'a, agregat'u</strong> jest używana pomiędzy:<br>- warstwą prezentacji, a warstwą logiki biznesowe, service,<br>- warstwą logiki biznesowej, a warstwą dostępu do danych.<br>Relacja pomiędzy warstwami jest dwukierunkowa.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Po co w ogóle nam warstwa pośrednia? W większości przypadków służy ona do zamiany jednego typu obiektu na drugi. Co to oznacza? Oznacza to, że różne warstwy korzystają z różnych typów obiektów:<br>- warstwa prezentacji z użyciem MVC, korzysta z klas będących Model/DTO - Data Transfer Object, <br>- warstwa dostępu do danych korzysta z klas będących Entity/VO - Value Object.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":773,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/mapper_dto-vo_.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/mapper_dto-vo_.png"" alt=""Mapper DataTransferObject na Value Object - Dto-Vo"" class=""wp-image-773""/></a><figcaption class=""wp-element-caption"">Mapper DataTransferObject na Value Object - Dto-Vo</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyżej przykład Mappera dla warstwy pośredniej. Opisana wcześniej funkcja przelewu bankowego posłuży jako <strong>przykład warstwy pośredniej</strong>, mapper, agregat. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Po co nam DTO, VO, Entity, Model?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak widać powyżej w różnych warstwach klasy różnią się od siebie, mają więcej lub mniej pól w klasie i to jest pierwszy powód dla którego potrzebujemy warstwy pośredniej. Drugim powodem jest nie mieszanie walidacji danych na różnych warstwach. Dodatkowo typy danych w DTO oraz VO mogą się różnić i będą wymagały konwersji, to jest kolejny powód dla którego należy użyć warstwy pośredniej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wyświetlając listę naszych przelewów chcemy mieć gwarancję, że dane otrzymamy w niezmienionej postaci. Od strony programistycznej, aby to osiągnąć w warstwie dostępu do danych należy użyć Entity/VO - Value Object, które gwarantują, że wartości (np. kwota przelewu) w klasie nie ulegną zmianie przechodząc przez warstwy. O niezmienności Value Object można przeczytać - <a rel=""noreferrer noopener"" aria-label=""Value object - Wikipedia (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Value_object"" target=""_blank"">Value object - Wikipedia</a>. W tej warstwie dane mają już konkretny typ w odróżnieniu od warstwy prezentacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wprowadzając dane przez stronę www podajemy niezbędne dane do realizacji przelewu, tutaj możemy użyć DTO i/lub Model. Wprowadzone przez użytkownika dane mogą być nieprawidłowe, należy zweryfikować ich poprawność i wyświetlić stosowny komunikat. Dodatkowo w większości przypadków do warstwy prezentacji dane przychodzą w postaci tekstu, bez konkretnego typu w przeciwieństwie do warstwy dostępu do danych. Warstwa prezentacji przenosi dane do warstwy logiki biznesowej, service za pomocą warstwy pośredniej, mapper, agregat.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2020-05-13
766,"Ja chcę pisać tylko kod, nie interesują mnie wymagania biznesowe!","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule poruszę bardzo ważny temat, który dla początkującego programisty, programistki może wydawać się mało istotny. Chodzi o wymagania biznesowe, czyli to, jak ma działać tworzony system lub jak działa istniejący system według osoby, która zleca jego napisanie. Często, to jak ma działać system nie jest istotne dla programisty, programistki oraz nie idzie w parze z jego wizją, co stanowi poważny problem i prowadzi do wielu nieporozumień.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Kim jest osoba, która zleca napisanie oprogramowania?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zanim przejdę do wyjaśnienia pojęcia wymaganie biznesowe, odpowiem na pytanie <strong>kim jest osoba, która zleca napisanie oprogramowania, systemu?</strong> Może, to być dowolna osoba dla, której tworzymy system np. nasz pracodawca, firma, do której zostaliśmy oddelegowani w ramach outsourcingu, gdzie pracujemy jako podwykonawca. Zazwyczaj jest, to osoba nie posiadająca rozległej wiedzy technicznej, ale wie jak ma działać system, moim zdaniem, to bardzo dobrze, że jest, to osoba nietechniczna, bo taka osoba nie patrzy przez pryzmat ""ograniczeń"" języka programowania czy framework'a.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Co to są wymagania biznesowe?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wymagania biznesowe, to założenia, co do funkcji, które ma realizować tworzony system np. wykonywanie przelewów w systemie bankowym, założenie konta walutowego. Aby zrozumieć wymagania biznesowe należy rozumieć tworzony system np. przelew bankowy wymaga wiedzy z dziedziny związanej z bankowością takiej jak np. rachunek, przelew, odsetki, kapitalizacja. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Źródła wymagań biznesowych</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Taką wiedzę można nabyć samemu czytając różne książki i poradniki, ale jest, to dłuższa droga i nie koniecznie kończy się sukcesem. Drugim sposobem jest po prostu komunikacja w zespole z analitykiem biznesowym, który powinien wyjaśnić działanie systemu pod kątem przelewu bankowego.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ten drugi sposób, komunikacja w zespole jest w 90% przypadków wymagany od programistów, dawno już minęły czasy, w których, to programista ""zamykał się w piwnicy, pisał magiczny kod"" i inni musieli być zachwyceni z efektów jego pracy, bo użył w kodzie najnowszych elementów danego języka programowania. Tak, to nie działa, więcej o komunikacji w zespole i umiejętnościach miękkich pisałem w <a rel=""noreferrer noopener"" aria-label=""Junior Java Developer umiejętności techniczne, a umiejętności miękkie (otwiera się na nowej zakładce)"" href=""https://www.juniorjavadeveloper.pl/2020/02/01/junior-java-developer-umiejetnosci-techniczne-a-umiejetnosci-miekkie/"" target=""_blank"">Junior Java Developer umiejętności techniczne, a umiejętności miękkie</a>. Programista musi rozumieć dziedzinę tworzonego systemu inaczej nie będzie w stanie napisać dobrego systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Dlaczego wymagania biznesowe są tak ważne?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Należy pamiętać, że w 99% przypadków piszemy kod dla kogoś chyba, że tworzymy własny system w ramach np. start-up'u. Język programowania i tworzony w nim kod jest tylko narzędziem do realizacji wymagań biznesowych. Rolą programisty jest tworzenie wysokiej jakości kodu, który realizuje założone wymagania biznesowe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Co programista robi z wymaganiami biznesowymi?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Skoro już wiemy jak ważne są wymagania biznesowe i komunikacja z osobą zlecającą wykonanie systemu, to teraz przedstawię na przykładzie, co będzie, jeżeli programista nie zrozumie dokładnie wymagania biznesowego i napisze daną funkcję systemu. Wyobraźmy sobie, że programista otrzymuje zadanie napisanie kodu realizującego przelew zagraniczny w obcej walucie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Nie rozumie wymagań</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Opiszę teraz <strong>wariant, w którym, to programista nie zrozumiał wymagań biznesowych</strong>, a tym samym nie zna dziedziny systemu. Programista stworzył kod odpowiedzialny za przelew zagraniczny. Do wykonania operacji przelewu potrzebuje informacji o dwóch kontach, pierwszego z którego przelewamy pieniądze oraz drugiego, na które przelewamy pieniądze. Dla pierwszego konta należy sprawdzić czy klient ma środki na koncie, to jest oczywiste i zostało dobrze zaimplementowane. Programista pomyślał również o tym, że przelewy mogą być wykonywane w dni pracy banku, banking-days.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak widać jedno wymaganie biznesowe kryje w sobie dwa kolejne, tak jest zawsze, rzadko kiedy jedno wymaganie jest tak proste, że nie wymaga implementacji innych elementów. Programista oddaje zaimplementowane przelewy zagraniczne, a podczas testów wychodzą błędy w samym kodzie jak również błędy w logice biznesowej, te drugie są równie istotne jak te pierwsze. Do programisty wraca informacja, że przelew nie został poprawnie przewalutowany ponieważ każdy przelew zagraniczny należy najpierw przewalutować na Euro, a następnie na walutę docelową, czyli np. przelew z PLN na USD wymaga przewalutowania PLN na EUR, a następnie EUR na USD. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tego programista nie wiedział, bo nie zagłębił się dokładnie w wymagania biznesowe i/lub nie zrozumiał dziedziny tworzonego systemu. Jakie konsekwencje ma takie błędne zaimplementowanie dowolnej funkcjonalności w systemie? Po pierwsze konsekwencje finansowe, jeżeli taka funkcjonalność zostałaby udostępniona publicznie, gdzie bank ma setki tysięcy klientów. Do tego dłuższy czas realizacji, ponowne przejście ścieżki implementacji, wdrożenia i testów, co angażuje różne osoby. Dodatkowo, jeżeli taka sytuacja powtarza się częściej może, to wiązać się ze spadkiem reputacji danego programisty.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Rozumie wymagania</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Wariant, w którym, to programista zrozumiał wymagań biznesowe</strong> po prostu nie ma negatywnych konsekwencji opisanych powyżej. Dodatkowo programista, który już zrozumiał fragment systemu łatwiej przyswoi kolejne wymagania biznesowe i lepiej zrozumie dziedzinę tworzonego systemu. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Należy pamiętać, że wymagania biznesowe odnośnie tworzonego systemu zmieniają się w czasie i to, co było aktualne wczoraj jutro może wymagać zmiany. Dlatego programista musi znać bardzo dobrze język programowania, aby dostosować się do zmieniających się wymagań biznesowych dla danego systemu. Celem programisty nie jest programowanie samo w sobie i używanie najnowszych technologii za wszelką cenę, jego celem jest implementacja działającego systemu zgodnie z wymaganiami biznesowymi.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Porady dla programisty</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co należy zrobić w przyszłości, aby uniknąć takich sytuacji? Na pewno skupić się na zrozumieniu dziedziny tworzonego systemu, współpracować z analitykami biznesowymi lub osobami, które mają wiedzę biznesową na temat tworzonego systemu. Programista dodatkowo musi szlifować swój warsztat w danym języku programowania tak, aby później w łatwy sposób przełożyć wymagania biznesowe na język programowania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Odnośnie tworzenia systemu zgodnie z wymaganiami biznesowymi, to idealne byłoby podejście <a rel=""noreferrer noopener"" aria-label=""Domain-Driven Design - DDD (otwiera się na nowej zakładce)"" href=""https://en.wikipedia.org/wiki/Domain-driven_design"" target=""_blank"">Domain-Driven Design - DDD</a>. W kwestii szlifowania warsztatu programisty, to należy wykonać jak najwięcej ćwiczeń, tutoriali związanych z aktualnie używaną technologią i językiem. Można również skorzystać z <a rel=""noreferrer noopener"" aria-label=""www.codewars.com (otwiera się na nowej zakładce)"" href=""http://www.codewars.com"" target=""_blank"">www.codewars.com</a>, gdzie poprzez zadania można trenować umiejętności programistyczne oraz współzawodniczyć z innymi programistami. Polecam również <a rel=""noreferrer noopener"" href=""https://challengerocket.com/"" target=""_blank"">https://challengerocket.com/</a> - Solve a SkillChallenge and get immediate feedback to see if you qualify for the recruitment process. All done remotely.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak widać wymagania biznesowe są bardzo ważnym elementem tworzonego systemu informatycznego.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-05-24
775,"Java EE vs. Spring Framework - Dawid kontra Goliat - bulldogjob.pl - ACCEPTED","<!-- wp:paragraph -->
<p>W tym artykule przedstawię, co moim zdaniem spowodowało, że Java EE ""przegrała w walce"" ze Spring Framework, która, to walka mogłaby się wydawać z góry  przegrana z perspektywy Spring Framework, który był niewielkim graczem w porównaniu z ""gigantem"", którym była Java EE w tamtych czasach. Java EE była gigantem, bo za nią stała firma Oracle, natomiast Spring Framework inicjalnie został stworzony przez jedną osobę, Roda Johnsona. Obecnie Spring Framework jest już ""pełnoletni"" w tym roku skończył&nbsp;18 lat. Natomiast Java EE w grudniu 2020 r. skończy 21 lat, sam język Java ma już 25 lat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podczas mojej pracy jako programisty języka Java korzystałem z dwóch najbardziej popularnych rozwiązań do tworzenia aplikacji typu enterprise. Pierwszym rozwiązaniem była <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_EE"" target=""_blank"">Java EE (Enterprise Edition)</a>, drugim <a rel=""noreferrer noopener"" aria-label=""Springframework (otwiera się na nowej zakładce)"" href=""https://spring.io/"" target=""_blank"">Spring Framework</a>. Kiedyś popularna była Java EE (od 2000 roku), ale teraz, to Spring Framework jest najpopularniejszym framework'iem wykorzystywanym do tworzenia aplikacji typu enterprise dla języka Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Co takiego stało się, że Java EE, która jest dzieckiem twórców języka Java przegrała ze Spring Framework? Bardzo obrazowo porównuję, to na przykładzie PKP i PolskimBus'em (autobusy za 1zł). PKP przespało swój czas na polskim rynku, nie rozwijało się, posiadało stare pociągi, bez udogodnień. Natomiast PolskiBus (obecnie FlixBus) wykorzystał pojawiającą się szansę i stworzył bardzo dobre połączenia, oferuje nowoczesne i wygodne autobusy z wieloma udogodnieniami, takimi jak darmowe wi-fi.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podobnie stało się z Java EE, przespała swój czas, oferowała przestarzałe technologie i rozwiązania. Java EE wymaga ""ciężkiego"" serwera aplikacyjnego zgodnego ze specyfikacją Java EE. Użycie EJB (Enterprise Java Beans) nie wspierało dobrych zasad programowania obiektowego, zmieniło się, to trochę za sprawą DI (dependency injection), ale było już za późno. Moim zdaniem największym problemem był praktycznie brak możliwości testowania komponentów EJB.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Natomiast Spring Framework nie wymaga ""ciężkiego"" serwera aplikacyjnego, dependency injection (DI) jest jego głównym elementem, razem z inversion of control (IoC). Kod, który piszemy w Spring nie jest ściśle związany z samym framework'iem, co automatycznie pozwala na łatwe testowanie aplikacji. Dodatkowo Spring wspiera pisanie testów na każdym etapie i dla każdej warstwy aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego walka Dawida z Goliatem? Tak jak pisałem na wstępie, Spring Framework inicjalnie został stworzony przez jedną osobę, Roda Johnsona. Za powstaniem Java EE stała ogromna firma Oracle. W czasie kiedy pojawił się Spring Framework każdy miał dość Java EE i wyczekiwał jakiejś alternatywy. Zdawano sobie sprawę, że firma stojąca za Java EE nie odda tak łatwo palmy pierwszeństwa, natomiast Spring Framework zdobywał coraz to nowych zwolenników i współtwórców.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spring Framework zaczynał od zera, musiał zasłużyć sobie na grono odbiorców. Natomiast Java EE była mocno promowana w świecie korporacyjnym. Na szczęście programiści zaczeli dostrzegać zalety korzystania ze Spring Framework i rozpowszechniali użycie tego framework'a we własnych firmach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Idea przyświecająca Java EE była na prawdę bardzo obiecująca i szlachetna. Odciążenie programisty od powtarzających się i podatnych na błędy elementów kodu takich, jak np. tworzeniem obiektów i zarządzaniem cyklem ich życia. Udostępnienie jednego, wspólnego interfejsu, który będzie implementowany przez różnych dostawców serwerów dla Java EE. Serwery aplikacyjne dla Java EE, to np. WildFly (dawniej JBoss), WebLogic, BEA. Miało, to ujednolicić konfigurację aplikacji Java EE. Skutek był odwrotny do zamierzonego, gdyż każdy dostawca serwera aplikacyjnego miał możliwość konfiguracji aplikacji i samego serwera w różny sposób.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Główne problemy, które moim zdaniem przyczyniły się do ""przegranej"" Java EE ze Spring Framework:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Bardzo słaba oficjalna dokumentacja do specyfikacji Java EE.</li><li>Niewielka liczba przydatnych tutoriali dla Java EE.</li><li>Konieczność używania ""ciężkich"" serwerów aplikacyjnych implementujących całą Java EE.</li><li>Serwery aplikacyjne dla Java EE, które rzadko działały stabilnie w trakcie development'u.</li><li>Programista musiał zajmować się konfiguracją i administrowaniem serwerów Java EE.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Java EE, trochę informacji i historii <a rel=""noreferrer noopener"" href=""https://www.baeldung.com/java-enterprise-evolution"" target=""_blank"">Java EE vs J2EE vs Jakarta EE</a>, <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_EE"" target=""_blank"">Wikipedia - Jakarta EE</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na początku mojej pracy jako programisty, a konkretnie jako Junior Java Developer dużo pracowałem z technologią EJB w wersji 2.1, która wchodzi w skład Java EE. Konfiguracja EJB była bardzo niewygodna, co opóźniało development. Przykład konfiguracji EJB 2.1 za pomocą XML, źródło docs.oracle.com - <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/cd/E16439_01/doc.1013/e13981/ses21imp001.htm#BABIGDAJ"" target=""_blank"">Implementing an EJB 2.1 Stateless Session Bean</a>. Nawet po latach ""nie mam odwagi"" patrzeć ponownie na konfigurację EJB za pomocą XML'a. Ten przykład nie jest jedynym, jeżeli chodzi o uciążliwość w korzystaniu z Java EE. Dodatkowo dochodziły nieudokumentowane i efemeryczne błędy związane z serwerem aplikacyjnym, na którym uruchamiałem aplikacje. Szukałem nieistniejących błędów, np. serwer aplikacyjny zapamiętywał stare dane, a ja już umieściłem nową wersję aplikacji na serwerze. Zmarnowałem niezliczone godziny podczas pracy z Java EE. To wszystko sprawiało, że walczyłem z framework'iem, zamiast pisać kod kolejnych funkcji oprogramowania i dostarczać działające rozwiązania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W takim razie, co moim zdaniem przyczyniło się do ""wygranej"" Spring z Java EE:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Bardzo dobra oficjalna dokumentacja techniczna.</li><li>Wsparcie społeczności związanej ze Spring Framework.</li><li>Brak konieczności używania ""ciężkich"" serwerów dla całej Java EE.</li><li>Wystarczy ""lekki"" kontener servlet'ów, serwer HTTP np.: <a rel=""noreferrer noopener"" href=""https://tomcat.apache.org/"" target=""_blank"">Tomcat</a>, <a rel=""noreferrer noopener"" href=""https://www.eclipse.org/jetty/"" target=""_blank"">Jetty</a>.</li><li>Wsparcie ze strony IDE, np.: <a rel=""noreferrer noopener"" href=""https://www.eclipse.org/eclipseide/"" target=""_blank"">Eclipse</a>, <a rel=""noreferrer noopener"" href=""https://www.jetbrains.com/idea/"" target=""_blank"">IntelliJ</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Obecnie tworząc projekty oparte na Spring Framework skupiam się głównie na logice biznesowej, którą muszę zaimplementować, a nie na technicznych problemach tak jak było, to w przypadku Java EE. Przez logikę biznesową rozumiem, np. wykonaj przelew bankowy z konta Janka na konto Tomka. Jeżeli tworzę w Spring Framework aplikację web, to po prostu dołączam moduł Spring MVC korzystając z zależności. To samo dotyczy dostępu do bazy danych, wtedy dodaję zależność dla modułu Spring Data. Utworzenie szablonu nowego projektu opartego na Spring Framework jest równie łatwe, wystarczy skorzystać ze <a rel=""noreferrer noopener"" href=""https://start.spring.io/"" target=""_blank"">Spring Initializr</a>, gdzie ww. moduły można dodać po prostu wpisując ich nazwy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href=""https://spring.io/projects/spring-framework"">Moduły Spring Framework</a> i korzyści z ich zastosowania:<br>- <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html"" target=""_blank"">Core, Beans i Context</a> - dostarczają Dependency Injection oraz Inversion of Control.<br>- <a rel=""noreferrer noopener"" href=""https://spring.io/projects/spring-boot"" target=""_blank"">Spring Boot</a> - dostarcza domyślnie skonfigurowaną aplikację Spring.<br>- <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html"" target=""_blank"">Spring Web</a> - wsparcie dla warstwy web, np.: HTML i/lub REST.<br>- <a rel=""noreferrer noopener"" href=""https://spring.io/projects/spring-data"" target=""_blank"">Spring Data</a> - wsparcie dla warstwy dostępu do danych, np.: JDBC, JPA, Hibernate.<br>- <a rel=""noreferrer noopener"" href=""https://spring.io/projects/spring-security"" target=""_blank"">Spring Security</a> - autentykacja i autoryzacja użytkowników, np.: HTTP Basic Auth, OAuth.<br>- <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html"" target=""_blank"">Spring Test</a> - wsparcie dla testów aplikacji stworzonej w oparciu o Spring Framework.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Spring Framework, trochę informacji i historii <a rel=""noreferrer noopener"" href=""https://springtutorials.com/spring-framework-history/"" target=""_blank"">Spring Framework History: 2002 – 2017</a>, <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Spring_Framework"" target=""_blank"">Wikipedia - Spring Framework</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Należy pamiętać, że Spring Framework nie jest jedynym dostępnym framework'iem opartym na DI i IoC. Java EE miała i ma swoje wady. Tak samo po wielu latach również Spring Framework ma swoje wady. Nie należy ograniczać się tylko do Spring Framework, ani zamykać na inne rozwiązania takie, jak np.:<br>- Google Guice,<br>- PicoContainer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Warto zapoznać się z <a rel=""noreferrer noopener"" href=""https://www.christianschenk.org/blog/comparison-between-guice-picocontainer-and-spring/"" target=""_blank"">Comparison between Guice, PicoContainer and Spring</a> oraz dostępnymi alternatywami dla Spring Framework:<br>- <a rel=""noreferrer noopener"" href=""https://stackshare.io/spring-framework/alternatives"" target=""_blank"">https://stackshare.io/spring-framework/alternatives</a><br>- <a rel=""noreferrer noopener"" href=""https://alternativeto.net/software/spring/"" target=""_blank"">https://alternativeto.net/software/spring/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, konkurencja powoduje, że powstają nowe, alternatywne rozwiązania, które zaspokajają zapotrzebowanie rynku. W tym przypadku był, to nowy framework dla aplikacji typu enterprise, który rozwiązał problemy Javy EE. Praca ze Spring Framework od samego początku była przyjemniejsza w porównaniu do Java EE i napędzana entuzjazmem związanym z czymś nowym. Obecnie ciężko sobie wyobrazić projekt Javowy, który nie korzysta ze Spring Framework i jego modułów, które usprawniają pracę programisty.</p>
<!-- /wp:paragraph -->",1970-01-01
803,"Jak szukać pierwszej pracy jako Junior Java Developer?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule przedstawię miejsca i sposoby na poszukiwanie pierwszej pracy jako Junior Java Developer. Skoro już wiesz <a href=""https://www.juniorjavadeveloper.pl/2020/02/15/jak-znalezc-pierwsza-prace-jako-junior-java-developer/"" target=""_blank"" rel=""noreferrer noopener"">Jak znaleźć pierwszą pracę jako Junior Java Developer?</a>, teraz przyszedł czas na sposoby jak szukać pierwszej pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Gdzie i jak szukać pierwszej pracy?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej moja autorska lista miejsc i sposobów na poszukiwanie pracy jako Junior Dev.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">LinkedIn</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pierwszym miejsce, gdzie szukałbym pracy jako Junior Java Developer jest LinkedIn. Pierwszą rzeczą jaką zrobiłbym, to aktualizacja profilu i dodanie zdjęcia. Dodatkowo można zadbać o poprawny URL do profilu na LinkedIn, np. mój <a aria-label=""https://www.linkedin.com/in/jacekjablonka/ (otwiera się na nowej zakładce)"" href=""https://www.linkedin.com/in/jacekjablonka/"" target=""_blank"" rel=""noreferrer noopener"">https://www.linkedin.com/in/jacekjablonka/</a> uważam, że jest dobry, ale widziałem adresy URL <a aria-label=""https://www.linkedin.com/in/jan-nowak-b76952190 (otwiera się na nowej zakładce)"" href=""https://www.linkedin.com/in/jan-nowak-b76952190"" target=""_blank"" rel=""noreferrer noopener"">https://www.linkedin.com/in/jan-nowak-b76952190</a>, taki adres URL nie wygląda dobrze w CV. Link do profilu można zmienić pod <a href=""https://www.linkedin.com/public-profile/settings?trk=d_flagship3_profile_self_view_public_profile"" data-type=""link"" data-id=""https://www.linkedin.com/public-profile/settings?trk=d_flagship3_profile_self_view_public_profile"" target=""_blank"" rel=""noreferrer noopener"">tym adresem</a> lub tak, jak pokazałem poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002212\u0022 gal_title=\u0022LinkedIn - URL profilu\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""12"" gal_title=""LinkedIn - URL profilu""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Mając poprawnie uzupełniony profil na LinkedIn wysyłałbym zaproszenia z wiadomością do rekruterów, koniecznie z sensowną wiadomością, np. ""Zapraszam do mojej sieci kontaktów. Obecnie poszukuję pracy jako Junior Java Developer. Link do mojego portfolio <a href=""https://github.com/juniorjavadeveloper-pl"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/juniorjavadeveloper-pl</a>"". Skoro osoby rekrutujące do IT wysyłają tygodniowo kilka zaproszeń i ofert do jednej osoby, dlaczego, to my nie możemy wysyłać zaproszeń i ""ofert"" do rekruterów? Jeżeli nie możesz znaleźć takiej osoby na LinkedIn, to wyślij zaproszenie do mnie z wiadomością o tym poście, a wtedy będziesz mógł wyszukać rekruterów w moich kontaktach, 500+ kontaktów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Job Boards</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kolejnym sposobem na szukanie może być regularne przeglądanie ofert lub zapisanie się do powiadomień o wybranych przez nas ofertach do tzw. alertów. Wiele wyszukiwarek ofert pracy w IT umożliwia subskrypcję do interesujących nas ofert. Popularną stroną z ofertami pracy w IT jest <a aria-label=""https://nofluffjobs.com/pl (otwiera się na nowej zakładce)"" href=""https://nofluffjobs.com/pl"" target=""_blank"" rel=""noreferrer noopener"">https://nofluffjobs.com/pl</a>, <a aria-label=""https://justjoin.it (otwiera się na nowej zakładce)"" href=""https://justjoin.it"" target=""_blank"" rel=""noreferrer noopener"">https://justjoin.it</a>, <a aria-label=""https://bulldogjob.pl (otwiera się na nowej zakładce)"" href=""https://bulldogjob.pl"" target=""_blank"" rel=""noreferrer noopener"">https://bulldogjob.pl</a> wiele ofert można znaleźć również na <a href=""https://emagine.pl/dla-specjalistow-it/"" data-type=""link"" data-id=""https://emagine.pl/dla-specjalistow-it/"" target=""_blank"" rel=""noreferrer noopener"">https://emagine.pl/dla-specjalistow-it/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":807,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/06/nofluffjobs_subskrypcja-ofert.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/06/nofluffjobs_subskrypcja-ofert-1024x558.png"" alt=""No Fluff Jobs - subskrypcja powiadomień o wybranych ofertach"" class=""wp-image-807""/></a><figcaption class=""wp-element-caption"">No Fluff Jobs - subskrypcja powiadomien o wybranych ofertach</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Grupy na Facebooku</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Grupy na Facebook są również ciekawym miejscem na szukanie pracy jako Junior Java Developer, np. <a rel=""noreferrer noopener"" aria-label=""Praca w IT dla Stażystów i Juniorów (IT Jobs for Intern/Junior) (otwiera się na nowej zakładce)"" href=""https://www.facebook.com/groups/1561984417428846/"" target=""_blank"">Praca w IT dla Stażystów i Juniorów (IT Jobs for Intern/Junior)</a> i/lub <a rel=""noreferrer noopener"" aria-label=""Programowanie - wsparcie na starcie (otwiera się na nowej zakładce)"" href=""https://www.facebook.com/groups/157790704649699/"" target=""_blank"">Programowanie - wsparcie na starcie</a>. Oczywiście grup jest dużo więcej wystarczy wyszukać na Facebooku hasła programista Java, praca IT, a otrzymamy bardzo dużo wyników. Grupy na Facebooku mają dodatkowy plus, mamy kontakt z osobami, które podobnie jak my szukają pracy, możemy wymienić się wiedzą i doświadczeniami. Takie grupy nie usuwają postów z przydatnymi informacjami, co pozwala na późniejsze ich wyszukanie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Oficjalne strony firm IT</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Mniej popularnym i zajmującym trochę czasu sposobem jest przeglądanie stron firm z branży IT, które umieszczają oferty pracy na swoich stronach. Plusem takiego sposobu jest fakt, że będziemy mieli informacje o firmie nie tylko suchą ofertę pracy i moderowany opis, tak jak, to ma miejsce na stronach grupujących oferty pracy. Często osoba rekrutująca pyta o informacje na temat firmy, do której aplikujemy, aby zweryfikować nasz poziom zaangażowania w poszukiwanie pracy. Jeżeli znamy nie tylko ofertę pracy, ale również wiem o firmie, do której aplikujemy jest, to dużym plusem. Oznacza to, że interesuje nas coś więcej niż tylko zarobki i stos technologiczny.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-06-13
859,"Jak może wyglądać rozmowa kwalifikacyjna dla Junior Java Developer'a? - przykład","<!-- wp:paragraph -->
<p>W tym artykule pokażę jak może wyglądać rozmowa kwalifikacyjna na stanowisko Junior Java Developer. Przedstawię zarówno pytania sprawdzające wiedzę i umiejętności techniczne jak i kompetencje miękkie kandydata. W dużej części przypadków na takiej rozmowie jest więcej niż jedna osoba z danej firmy. Dlatego przedstawię również osoby, które mogą być w trakcie rozmowy kwalifikacyjnej poza osobą techniczną, która sprawdzi wiedzę z zakresu języka Java i nie tylko.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zacznę od osób, które mogą pojawić się na rozmowie kwalifikacyjnej. Niekoniecznie wszystkie osoby będą od początku do końca w trakcie procesu rekrutacji. Mogą one wymieniać się w trakcie rozmowy. Obecna powinna być <strong>osoba techniczna</strong>. Może pojawić się <strong>osoba z działu HR</strong>, która będzie w trakcie rekrutacji weryfikować kompetencje miękkie, niekoniecznie zadając jakieś pytania kandydatowi. Kolejną osobą może być <strong>kierownik projektu i/lub scrum master</strong>, oni natomiast będą weryfikować czy kandydat będzie pasował do obecnego zespołu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->",1970-01-01
873,"Jak zmagałem się z zadaniem - etapy rozwiązywania problemów programistycznych","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule opiszę moje zmagania z zadaniem programistycznym, które miałem wykonać. </p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym momencie samo zadanie nie jest istotne. Chodzi o przedstawienie etapów, problemów, z którymi musiałem się zmierzyć, które moim zdaniem są wspólne dla większości problemów programistycznych. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Moje zadanie programistyczne</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Musiałem stworzyć aplikację na Android (w języku Java), która będzie miała tylko jeden ekran (GUI) podzielony na dwie sekcje (fragmenty).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Moje etapy zmagania się z zadaniem</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniższa lista jest moją próbą przedstawienia i usystematyzowania etapów zmagania się z dowolnym zadaniem programistycznym.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Brak planowania i podziału zadania - nawet najmniejsze zadanie należy zaplanować i podzielić na mniejsze elementy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Niedoszacowanie złożoności zadania - niewiedza, bagatelizowanie zadania.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Składanie zadania z mniejszych elementów w jedną całość - użycie dwóch różnych bibliotek, metod implementacji framework'a.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Niezgłębienie wiedzy teoretycznej danej biblioteki, framework'a - korzystając z nowych bibliotek, framework'ów należy przynajmniej przeczytać oficjalną dokumentację wybranego zagadnienia.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Ograniczenia w dokumentacji i tutorial'ach - oficjalna dokumentacja i tutorial'e opisują i przedstawiają jedynie wyizolowane, idealne rozwiązania.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><a href=""https://en.wikipedia.org/wiki/Proof_of_concept"" target=""_blank"" rel=""noreferrer noopener"">Proof Of Concept</a>, PoC, izolowanie problemu - jeżeli, to możliwe tworzymy mniejsze, oddzielne projekty, w których sprawdzamy działanie jednego elementu. </li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wprowadzanie pojedynczych zmian - zmiany w kodzie robimy w jednej linijce, testujemy i dopiero wtedy wprowadzamy kolejną zmianę; najlepiej użyć <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"">TDD - Test Driven Development</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Niesprawdzenie wymagań dla aplikacji - bardzo często jest tak, że programista wie jak rozwiązać dane zadanie, ale nie upewni się jak ma wyglądać całość projektu i wtedy musi ""zaczynać wszystko od nowa"", a wystarczyło zapytać ""co dokładnie ma robić aplikacja jako całość"".</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Czasem trzeba zacząć od początku i nie brnąć dalej.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Poboczne zadania niezwiązane z programowaniem - nieraz trzeba będzie coś skonfigurować np. serwer, uzyskać dostęp do czegoś np. klucz do API.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Efekt końcowy nie cieszy tak bardzo jak sama droga w trakcie rozwiązywania problemu - jeżeli masz takie podejście, to programowanie jest dla Ciebie.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Przykład zadania, z którym się zmagałem - 7 dni</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Pierwszego dnia</strong> sprawdziłem, że <a rel=""noreferrer noopener"" href=""https://developer.android.com/studio/projects/templates"" target=""_blank"">szkielet aplikacji można wygenerować z kreatora</a> do tworzenia projektów w <a rel=""noreferrer noopener"" href=""https://developer.android.com/studio"" target=""_blank"">Android Studio</a> (wersja IntelliJ dla Android). Jest również wiele tutorial'i na ten temat w internecie. Pomyślałem skoro coś można wygenerować z kreatora, to na pewno nie będzie to trudne zadanie, zabiorę się za to jutro. Punkt 1. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Drugiego dnia</strong>, po wygenerowaniu projektu wszystko działało, wyświetlał się tekst i przycisk reagował na kliknięcie. Ogłosiłem wielki sukces i resztę zadania odłożyłem na następny dzień. Punkt 2. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Trzeciego dnia</strong> zabrałem się za dzielenie ekranu na sekcje, fragmenty. Okazało się, że i to również można wygenerować za pomocą kreatora i jest wiele tutoriali na ten temat w internecie. Wygenerowałem kolejny projekt, który korzysta z fragmentów. W tym momencie miałem dwa oddzielne projektu zawierające dwie różne metody, dwa różne sposoby korzystania z framework'a Android. Fragmenty również działały poprawnie. Kolejny sukces, zadanie dokończę następnego dnia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Czwartego dnia</strong> przyszedł czas na połączenie dwóch projektów w jedną całość. Przecież na pewno się da, to zrobić, bo widziałem gdzieś w internecie, że tak można. Stworzyłem trzeci projekt, który będzie zawierał pierwszy projekt z szablonem aplikacji oraz drugi projekt z fragmentami. Niestety tego już nie było w oficjalnej dokumentacji, tutoriale również milczały w tej kwestii. Musiałem samemu metodą prób i błędów połączyć wszystkie projekty w całość. Po dłuższych zmaganiach udało się to osiągnąć. Punkt 3. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego od razu nie dodałem fragmentów do szablonu projektu, tylko stworzyłem trzeci projekt? Zawsze, jeżeli, to możliwe tworzymy tzw. PoC - Proof Of Concept, weryfikujemy czy dana funkcjonalność działa tak jak chcemy. Następnie łączymy mniejsze PoC w jedną całość, tego w większości przypadków nie będzie w oficjalnej dokumentacji lub w tutorial'ach, tutaj należy wykazać się logicznym myśleniem. Punkt 6. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Piątego dnia</strong> do tworzonej aplikacji ""przyszło"" nowe wymaganie, o którym wcześniej nic nie wiedziałem - należy <a rel=""noreferrer noopener"" href=""https://developers.google.com/maps/documentation/android-sdk/start"" target=""_blank"">wyświetlić dane na mapach Google</a>. Oczywiście jest kreator i są tutoriale, zabrałem się za tworzenie czwartego projektu. Dla map Google należało jeszcze wykonać kilka czynności nie związanych z programowaniem, a mianowicie stworzyć <a rel=""noreferrer noopener"" href=""https://developers.google.com/maps/documentation/android-sdk/get-api-key"" target=""_blank"">klucz do API dla map Google</a>. Punkt 8 i 10. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Teraz miałem cztery aplikacje - projekty PoC:<br>- pierwszy, szablon aplikacji dla Android,<br>- drugi, fragmenty w ekranach GUI,<br>- trzeci, połączenie projektu pierwszego i drugiego,<br>- czwarty, aplikacja z podłączonymi mapami Google.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Szóstego dnia</strong> okazało się, że bezproblemowo da się połączyć projekt ""czwarty"" z ""drugim"", ale już nie da się połączyć ""trzeciego"" z ""czwartym"". Tak więc, łączenie projektów zaczęło się od nowa. Stworzyłem nowy projekt ""pierwszy"", naniosłem na niego projekt ""czwarty"", a następnie dodałem projekt ""drugi"". Tak, tak, inaczej się nie dało. Zapytasz pewnie, ale jak, to? W oficjalnej dokumentacji nie było takiej konfiguracji, a tutorial'e skupiały się na pojedynczych wyizolowanych zagadnieniach, np. fragmenty w ekranach GUI, mapy Google w Android. Przez chwilę próbowałem połączyć projekt ""trzeci"" i ""czwarty"", ale lepiej było zacząć od początku i tak też zrobiłem. Punkt 4, 5 i 9. - Etapy zmagania się z zadaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Siódmego dnia</strong> tłumaczyłem osobie odbierającej aplikację dlaczego aplikacja nie wygląda i nie działa tak jak się tego spodziewał ;)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Samego kodu Java było niewiele, większość czasu spędziłem na zapoznawaniu się z nowym framework'iem, w tym przypadku Android framework, ale może, to być np. Spring Framework, Hibernate itp.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Oczekiwania vs rzeczywistość</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Różne osoby w odmienny sposób postrzegają zamawiane oprogramowanie, należy o tym cały czas pamiętać - poniższy obrazek idealnie, to oddaje.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":917,""sizeSlug"":""full""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/07/application-expectations-vs-reality.jpg"" alt=""Tworzenie oprogramowania, aplikacji - oczekiwania vs. rzeczywistość :)"" class=""wp-image-917""/><figcaption class=""wp-element-caption"">Tworzenie oprogramowania, aplikacji - oczekiwania vs. rzeczywistosc :)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Wnioski</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak wynika z powyższego realizacja ""małego"" projektu zajęła mi sześć dni. Zalecam nie siedzenie po nocach i zakładania, że da się, to zrobić ""w jeden dzień"". Lepiej podejść do tematu zdroworozsądkowo i założyć więcej niż jeden dzień na realizację danego zdania. Dodam jeszcze, że opisuję sytuację, w której tylko ja samemu pracowałem nad danym zadaniem. Sytuacja się komplikuje, jeżeli zdanie ma wykonać zespół programistów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dodatkowym elementem, którego nie spodziewałem się było samo wyszukiwanie rozwiązań w wyszukiwarce. Szukając hasła ""Android Google Maps"" otrzymywałem linki do aplikacji na Android z mapami Google, podobnie było z innymi słowami kluczowymi. Okazało się, że należy dodać słowo ""developer"" w zapytaniu dla wyszukiwarki np. zamiast ""Android Google Maps"" należało wyszukać ""Android developer Google Maps"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-07-22
886,"2 lata z programowania Błażeja - prawdziwa historia przebranżowienia na Junior Java Developer'a","<!-- wp:paragraph -->
<p>W tym artykule przedstawię historię Błażeja, który przebranżowił się na Junior Java Developer'a. Historię napisał sam Błażej. Ja tylko umieściłem ją na moim blogu dodając linki do moich artykułów, które korespondują z tym, co Błażej napotkał na swojej drodze do Junior Java Developer'a. Błażej swoje pierwsze kroki z językiem Java stawiał pod moim okiem, później samodzielnie pracował nad własnym rozwojem w stronę Junior Java Developer'a. Poniżej to, co Błażej spisał.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Naukę programowania w Javie rozpocząłem pracując w firmie na pełen etat jako IT Consultant (obowiązki mocno rozszerzonego IT Support w międzynarodowej Duńskiej firmie). Czas na programowanie poświęcałem po pracy. Uczyłem się z kursów Udemy, kursy na YouTube, dokumentacja Oracle - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/25/przydatne-ksiazki-i-strony-do-nauki-jezyka-java/"" target=""_blank"">Przydatne książki i strony do nauki języka Java</a>. Po ok. 8 miesiącach rozpocząłem rozsyłanie CV - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/15/jak-znalezc-pierwsza-prace-jako-junior-java-developer/"" target=""_blank"">Jak znaleźć pierwszą pracę jako Junior Java Developer?</a>. Gdy nadarzyła się okazja pracy w dużej korporacji Tieto postanowiłem przeprowadzić się do obcego mi wtedy miasta Szczecin, aby zyskać pierwsze tak ważne doświadczenie jako Java Developer. Cała rekrutacja była online i dwuetapowa, najpierw miękki hr, a później spotkanie z osobą techniczną. W czacie trzeba było napisać kod trzech zadanek i od razu wyjaśnić dlaczego taki kod. Wszystko po to aby pokazać rozumienie kodu. Z uwagi na otrzymanie nowej pracy musiałem się przeprowadzić, firma pokrywała koszty przeprowadzki. Projekt był ciekawy mieliśmy team 3 developerów i devopsa. Trzeba było zbudować aplikacje tweatera backend plus wyświetlanie contentu na stronie internetowej. Stack technologiczny Java 8, EJB, IntelliJ, Gerrit, Jenkins, GitLab, JSON, REST, Jboss, PostgreSQL - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/22/kiedy-sam-jezyk-java-to-za-malo-jak-nie-utonac-w-morzu-technologii-zwiazanych-z-jezykiem-java/"" target=""_blank"">Kiedy sam język Java to za mało. Jak nie utonąć w morzu technologii związanych z językiem Java?</a>. Projekt był prowadzony w metodyce Scrum. Rozpoczęliśmy od Scrum Procker, następnie rozpisaliśmy w Jira czego będzie dotyczył projekt. Następnie stworzyliśmy Use Case, Activity Diagram, Sequence Diagram i Diagram Klas. Następnie rozpisaliśmy na tablicy metody do zaimplementowania (To Do, In Progress, Done) - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"">Czy sam język Java wystarczy?</a>. Dziennie robiliśmy tzw. Daily Stand Up. Raz na tydzień mieliśmy dłuższe spotkanie z seniorami. Po trzech miesiącach zaprezentowaliśmy gotową aplikacje przed Project Managerem."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Z uwagi że projekt się zakończył i nie było nic w Javie, firma zapewniła nam projekt w Pythonie więc w pracy uczyłem się Pythona. W tym czasie rozpocząłem po pracy przygotowywania do zdania egzaminu z Javy „98-388 MTA: Programming Using Java” Tak więc mój czas był wypełniony w pracy i po pracy programowaniem, również w weekendy. Byłem w obcym mieście więc skupiłem się na programowaniu i pracy. I tak przez pół roku. Po 8 miesiącach projekt w Pythonie zakończył się i rzucono nas na Cloud i tworzenie OpenStack (odpowiednik Microsoft Azure). Jeden kolega zrezygnował bo nie było to już zupełnie związane z programowaniem, ja z tego samego powodu zrezygnowałem miesiąc później."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Od stycznia do końca maja pisałem projekty w domu, dużo aplikowałem o pracę. Dodam że jedna z ciekawszych i bardziej wartościowych rekrutacji wyglądała w taki sposób że dostałem plik PDF z opisaną funkcjonalnością programu i założeniami. Moim celem było zrozumieć biznesowe wymagania i następnie zaimplementować aplikacje do zarządzania parkingiem: podawanie nr tablicy rejestracyjnej, opcjonalne zaznaczenie opcji niepełnosprawności (inna stawka za godzinę postoju), włącznie/zatrzymanie licznika i wyświetlenie ile jest do zapłaty. Moduł dla administratora parkingu z informacją kto ma włączony licznik a kto nie, moduł dla właściciela zliczający zarobek dzienny i miesięczny. Wszystko z wykorzystaniem SOLID, DRY - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a> - logowanie błędów, interfejs z poziomu strony internetowej więc był też wykorzystany REST. Inne projekty ciekawe przy rekrutacjach to np. napisanie aplikacji która po API łączy się z instytutem sejsmologicznym i po podaniu współrzędnych geograficznych zwraca top 10 w najbliższej odległości trzęsień ziemi tego dnia."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""W maju w jednym momencie otrzymałem 3 oferty pracy. W dużym amerykańskim korpo Clear2Pay-FIS branża bankowa język angielski na co dzień w pracy, druga w dużej ale polskiej firmie piszącej rozwiązania dla urzędów i trzecia miała 15 osób pisząca dodatki do JIRA. Oczywiście język programowania Java. Wybrałem największą tą amerykańską firmę. Pierwszy miesiąc nauka bankowości, procesów finansowych, po intensywnym miesiącu z bankowości egzamin, aby pracować dalej trzeba go zaliczyć na 50%, miałem 54% :-) Dla porównania senior w Javie który ze mną zaczynał miał 57%. Drugiego i trzeciego miesiąca to było otrzymywanie ticketów w JIRA i szukanie w kodzie gdzie występuje błąd aby następnie poprawić jedną linijkę. Czasem schodził mi tydzień nie rzadko trzy dni aby znaleźć taki błąd – ogólnie siedzenie i analizowanie kodu długimi godzinami. Kodowania prawie zero, za to 99% czasu to analizowanie kodu - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"">Czy sam język Java wystarczy?</a>. Raz na 2 tygodnie reinstalacja środowiska z uwagi na pewne problemy ze stabilnością niektórych kontenerów Dockerowych. Kod ma już kilkanaście lat od Java 1.4 do 1.8 Spring i EJB oddziały które piszą ten kod są rozproszone po całym świecie. Pozostały stack technologiczny IntelliJ, Docker, Confluence, Jenkins, SVN. Po kolejnych dwóch miesiącach dobiegł końca mój okres próbny i nie przedłużono mi umowy. Następnie przeniosłem się do rodzinnego miasta."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Postanowiłem pouczyć się języka bardziej przyjaznego freelancerom i był to .NodeJS zrobiłem w tym pierwsze projekty poduczyłem się AWS po to aby deployować projekt. Zaproszono mnie na trzy rozmowy związane z Node. Ostatecznie prace znalazłem w rodzinnym Bielsku-Białej jako uwaga junior w C# :-) Firma poszukiwała kogoś z C# a że Java trochę podobna to powiedzieli ok :-) Chodziło o pisanie modyfikacji do programu dla księgowych i do ERP marki eNova. C# jest trochę podobny do Java, jest to jęzk obiektowy. Niestety system jaki był rozwijany tj. eNova jest polskiej produkcji, więc mamy do czynienia z systemem embeded przez co zero informacji w Google, zapomnij o StackOverflow. Dokumentacja przemieszana i mało można było się z niej dowiedzieć. Problem w firmie pojawił się z tym, że firma była bardzo mała 4 programistów, plus ja osoba do wdrożenia. Programiści byli bardzo zajęci i nie mieli czasu, aby poświęcić go nowej osobie aby wdrożyć w system i w nowy język. Ostatecznie po trzech miesiącach nie przedłużono mi umowy, firma wytłumaczyła to z brakiem osoby która mogła by mnie wdrożyć w to jak funkcjonuje system. - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/01/junior-java-developer-umiejetnosci-techniczne-a-umiejetnosci-miekkie/"" target=""_blank"">Junior Java Developer umiejętności techniczne, a umiejętności miękkie</a>"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Z programowaniem jest tak, najpierw trzeba opanować język, to jest do zrobienia, ja tak opanowałem Jave i podstawy Pythona i zrobiłem jakieś projekty w Node. Języki są do siebie podobne i dużo między sobą zapożyczają z rozwiązań. Później trzeba nauczyć się nowej dziedziny np. bankowości albo finanse albo jeszcze coś innego oraz dowiedzieć się gdzie co w kodzie jest napisane aby wiedzieć jak się do tego odnieść aby zrobić modyfikacje w kodzie. Jeżeli nie wie się gdzie w kodzie co zostało napisane to nie wiesz gdzie szukać błędu ani jak korzystać z różnych metod/funkcji. Trzeba mieć też wiedzę teoretyczną z danej dziedziny. Tak więc samo nauczenie się programowania i pisania aplikacji od zera i przedstawiania gotowych aplikacji nie oznacza, że już wszystko wiecie, wbrew przeciwnie. - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/24/ja-chce-pisac-tylko-kod-nie-interesuja-mnie-wymagania-biznesowe/"" target=""_blank"">Ja chcę pisać tylko kod, nie interesują mnie wymagania biznesowe!</a>"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Język to 1/3 sukcesu, trzeba opanować nowy przedmiot w jakim działa firma np. bankowość, prawo bankowe regulacje itd. Trzeba wiedzieć, co nalicza się w księgowości, co mówi prawo polskie gdy jest taka i taka spółka która rozlicza VAT i płaci taki podatek, trzeba wiedzieć co dopisać aby w programie było to zgodne z prawem i pilnowało aby osoba wprowadzająca koszty i zakupy firmy dobrze wszystko wprowadziła i przeliczyła aby wszystko dobrze powpadało na konta księgowe. Jest jeszcze jedna kwestia związana z czytaniem kodu, który już istnieje. To kolejne wyzwanie, kolejna trudność. Możesz pisać swoje programy, wiedzieć w każdej linii co się dzieje. Ale to nie znaczy że potrafisz czytać cudzy kod. I nie mówię o rozumieniu StackOverflow ale rozumieniu czasem rozbudowanych struktur w kodzie. Kod często jest różnej jakość i jest często pisany przez różne osoby pisane tj. lepszych i gorszych programistów. Czytanie i rozumienie kodu to kolejne wyzwanie w pracy programisty."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Błażej: ""Aktualnie po 2 latach z programowaniu chce wykorzystać wiedzę techniczną z programowania i IT aby połączyć ją z moimi umiejętnościami miękkim w komunikacji i relacjach międzyludzkich i współpracy międzynarodowej z menagerami."".</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":899,""width"":151,""height"":192,""sizeSlug"":""large""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/07/blazej-szczypka_junior-java-developer.png"" alt=""Błażej Szczypka - Junior Java Developer"" class=""wp-image-899"" width=""151"" height=""192""/><figcaption>Błażej Szczypka - Junior Java Developer</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Błażej o sobie: ""Z informatyką jestem związany ponad 10 lat. Ukończyłem uczelnie informatyczną PJATK w Warszawie. Mam szerokie doświadczenie od projektowania, zbierania wymagań, po realizację, testy, wdrożenie na serwer klienta. Pracowałem w takich firmach jak IBM, Budimex, Lionbridge. W czasie wolnym biegam (ukończony półmaraton), jeżdżę na rowerze (prowadzę bloga z moimi podróżami rowerowymi po Europie <a rel=""noreferrer noopener"" href=""http://www.rowerblazeja.com"" target=""_blank"">www.rowerblazeja.com</a>), gram w tenisa, chodzę po górach, pływam kajakiem, jeżdżę na rolkach, nartach i jeszcze trochę by można było tego wymieniać."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mam nadzieję, że historia Błażej pozwoli przybliżyć proces jaki większość osób musi przejść chcąc przebranżowić się na Junior Java Developer'a. Oczywiście ścieżka każdej osoby może wyglądać zupełnie inaczej, ale większość elementów z historii Błażeja będzie się powtarzać.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojego bloga <a rel=""noreferrer noopener"" href=""http://www.juniorjavadeveloper.pl"" target=""_blank"">www.juniorjavadeveloper.pl</a>, będą pojawiać się kolejne wpisy oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl lub <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/jacekjablonka/"" target=""_blank"">LinkedIn</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:heading {""align"":""center"",""level"":5} -->
<h5 class=""has-text-align-center""><a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/sciezka-wsparcia-przyszlego-junior-java-developera/"" target=""_blank"">Ścieżka wsparcia przyszłego Junior Java Developer’a</a></h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wychodząc na przeciw oczekiwaniom przyszłych młodszych programistów języka Java przygotowałem „Ścieżkę wsparcia przyszłego Junior Java Developera”. Dlaczego akurat takie a nie inne kroki na ścieżce wsparcia? Pod uwagę wziąłem kilka miesięcy mojej pracy z wieloma osobami, które chciały zmienić zawód na Junior Java Developer’a.</p>
<!-- /wp:paragraph -->

<!-- wp:block {""ref"":1163} /-->",2020-07-29
888,"Czytanie cudzego kodu - jak samemu pisać czytelny kod","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule opiszę bardzo ważną kwestię, którą jest czytanie cudzego kodu, ale równocześnie będą, to również wskazówki jak pisać własny kod tak, aby ktoś inny mógł go zrozumieć. Pracując z narzędziem git, każdy fragment kodu posiada informację o autorze, zmianach w kodzie i czasie dokonania zmian. Tym samym ""uchylanie się"" od własnego kodu jest niemożliwe, mówienie, to nie mój kod nie zadziała.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Skupię się jedynie na czytelności kodu, która rzuca się w oczy już przy pierwszym code review. Dodatkowo opiszę tak ważną kwestię jak Definition of Done, czyli kwestia ustalenia kiedy kod, który został napisany uznajemy za skończony.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie będę zagłębiał się w tym artykule w takie elementy kodu jak:<br>- architektura aplikacji,<br>- udostępnianie funkcjonalności przez API,<br>- moduły/warstwy aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zajmę się takimi elementami kodu jak:<br>- konwencja nazewnicza,<br>- kolejność elementów w klasie,<br>- samoopisujący się kod,<br>- wzorce projektowe,<br>- dobre praktyki SOLID i DRY.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Kod źródłowy czytamy jak dobrze napisaną książkę</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">""Kod napisany w dowolnym języku programowania powinien czytać się jak dobra książka. Osoba czytająca książkę nie chciałby przecież być zanudzana dokładną kopią fragmentów książki umieszczaną w wielu miejscach tej samej książki (DRY – Don’t Repeat Yourself). Ciężko byłoby czytać książkę, która ma pomieszane rozdziały, akcja nie jest spójna i ma się wrażenie, że autor chyba nie wiedział co pisze (SOLID)."" - artykuł ""<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a>"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Prawdą jest, że sama znajomość podstaw języka Java nie oznacza, że będziemy pisać czytelny, poprawny i ładny kod. Tak samo jak znając język polski nie każdy potrafi pisać książki, do tego mamy różne gatunki literackie np.: powieść, dramat.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Definition of Done - kiedy mój kod jest ukończony?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zacznijmy od Definition of Done - kiedy mój kod jest ukończony? Książka ma swój początek i koniec, składa się z rozdziałów i w pewnym momencie zostaje wydana, aby czytelnicy mogli zapoznać się z dziełem danego autora. W przypadku książek proces tworzenia i wydawania jest usystematyzowany. Tak samo jest z kodem źródłowym, ale nie każdy zdaje sobie z tego sprawę, że znajomość języka Java, to dopiero początek (więcej w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"">Czy sam język Java wystarczy?</a>), a proces wytwarzania oprogramowania jest pracą zespołową.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wracając do Definition of Done, pisząc kod źródłowy należy ustalić, co rozumiemy przez ""skończyłem pisać mój kod, teraz ktoś może z niego korzystać"". Dlaczego w ogóle Definition of Done w artykule o tym jak pisać czytelny kod? Nie każdy tak samo rozumie kiedy kod jest skończony. Wyjaśnię na przykładzie wymagania biznesowego wykonującego przelewy zagraniczne - więcej o wymaganiach biznesowych w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/24/ja-chce-pisac-tylko-kod-nie-interesuja-mnie-wymagania-biznesowe/"" target=""_blank"">Ja chcę pisać tylko kod, nie interesują mnie wymagania biznesowe!</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kod odpowiedzialny za przelewy zagraniczne według młodszego programisty jest skończony w momencie, gdy uda mu się przelać środki z jednego konta testowego na inne konto testowe - oczywiście nie robimy <a rel=""noreferrer noopener"" href=""https://niebezpiecznik.pl/post/mbank-testowal-na-produkcji-i-wylozyl-sobie-cala-infrastrukture/"" target=""_blank"">testów na produkcji jak mBank</a>. Według doświadczonego programisty jest on skończony w momencie, gdy będzie miał testy jednostkowe oraz będzie SOLID i DRY. Natomiast dla osoby zgłaszającej wymaganie biznesowe, skończony kod, to taki, który został umieszczony na serwerze testowym, przetestowany przez testerów manualnych i jest zgodny z wymaganiem biznesowym.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Czytelny kod źródłowy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wracając do czytelnego kodu, który sami piszemy lub w momencie, kiedy czytamy kod kogoś innego. Jak zawsze kij ma dwa końce. Wiele razy widziałem jak moi koledzy ""rwali sobie włosy z głowy"" czytając kod kogoś innego, często zadawali na głos pytania ""jak, to możliwe"", ""kto, to w ogóle pisał"", ""przecież, to nie ma szansy działać"", ""gdzie jest Heniek, idę do niego!"". Bardzo łatwo jest sprawdzić kto jest autorem danego fragmentu kodu wystarczy polecenie <a rel=""noreferrer noopener"" href=""https://www.git-scm.com/docs/git-blame"" target=""_blank"">git-blame</a>. Mając na uwadze to, co napisałem, należy pisać własny kod tak, aby po przeczytaniu naszego kodu nie była wysyłana po nas ekipa Terminatorów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Konwencja nazewnicza</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Konwencja nazewnicza jest bardzo ważnym elementem, polecam zapoznanie się z oficjalną dokumentacją Oracle <a rel=""noreferrer noopener"" href=""https://www.oracle.com/java/technologies/javase/codeconventions-contents.html"" target=""_blank"">Code Conventions for the Java TM Programming Language</a> opisującą konwencje nazewnicze dla języka Java - dokumentację można również pobrać w formie dokumentu <a rel=""noreferrer noopener"" href=""https://www.oracle.com/technetwork/java/codeconventions-150003.pdf"" target=""_blank"">PDF</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Kolejność elementów w klasie</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na pewnym etapie, mając już spore doświadczenie w kodowaniu w języku Java przeglądanie klas nie wygląda tak, że patrzymy od pierwszej linijki i przechodzimy do kolejnej i kolejnej. Przeglądając klasę sprawdzamy w jakich zmiennych klasa przechowuje swój stan, jak jest konstruowana, a następnie jakie udostępnia metody i wtedy zastanawiamy się do czego możemy ją wykorzystać. Zakładamy przy tym, że zmienne są na samym początku ciała klasy, pod nimi konstruktory, metody z logiką biznesową, a na samym końcu ""metody pomocnicze"" getter/setter i toString.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wyobraźmy sobie teraz sytuację, w której programista przegląda pięćdziesiątą klasę danego dnia i za każdym razem napotyka inną kolejność elementów w klasie. Wypada z rytmu, nie może się skupić tym samym spada jego wydajność. To tak jak ze wspomnianymi na wstępie rozdziałami książki, która ma pomieszane rozdziały.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Samoopisujący się kod</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Kod</strong>, który piszemy powinien być <strong>samoopisujący się</strong>, tzn. widząc nazwę metody i/lub zmiennej od razu wiemy do czego służy i nie musimy zastanawiać się, co autor miał na myśli. Jeżeli stosujemy komentarze dla metody i/lub zmiennej, to oznacza, że sami nie wiemy, co dany fragment kodu reprezentuje. Jedynym dopuszczalnym komentarzem dla kodu jest <a rel=""noreferrer noopener"" href=""https://www.oracle.com/java/technologies/javase/javadoc.html"" target=""_blank"">Javadoc</a>, który służy do późniejszego wygenerowania dokumentacji dla naszego kodu. Każdy Framework posiada Javadoc, np. <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/"" target=""_blank"">Springframework API Doc</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak wygląda kod samoopisujący się? Poniżej przykład dobrej i złej konwencji nazewniczej.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// nazwa klasy nie opisuje jej przeznaczenia i funkcji
public class Main {
    // metoda 'calculate' nie wiemy, co dokładnie robi
    // musimy zagłębiać się w jej kod
    public double calculate(int a, int b) {
        return a / b;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// nazwa klasy opisuje jej przeznaczenia i funkcji
public class Calculator {
    // metoda 'division' od razu informuje o tym, co będzie robić
    public double division(int a, int b) {
        return a / b;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2 class=""wp-block-heading""><strong>Wzorce projektowe</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na wstępie zaznaczę, że w codziennej pracy Junior Java Developer rzadko kiedy ma możliwość wprowadzenia jakiegoś wzorca projektowego do istniejącego systemu. Dlaczego piszę o tym na wstępie? Chciałbym zaznaczyć, że młodszy programista języka Java powinien skupić się raczej na dobrych praktykach SOLID i DRY, a następnie rozszerzać swój warsztat o wzorce projektowe. Dodam również, że nie ma narzędzia, które wykrywa wzorce projektowe w kodzie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dodatkowo wzorce projektowe, które są prezentowane w wielu tutorialach są oderwane od rzeczywistości. Co przez, to rozumiem? W rzeczywistym systemie wzorce projektowe nie są wyróżnione w jakiś szczególny sposób w kodzie, tak jak ma, to miejsce w tutorialach. W istniejącym systemie nie spotkamy raczej klas np.: <strong>MenuComposite</strong> (Composite Pattern), <strong>InProgressState</strong> (State Pattern). Spotkamy raczej klasy <strong>Menu</strong>, która jest właśnie kompozytem (Composite Pattern), klasa <strong>Job</strong> w połączeniu z klasą <strong>Step</strong> będzie reprezentować wzorzec stanu (State Pattern).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading""><strong>Dobre praktyki SOLID i DRY</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak jak napisałem powyżej, młodszy programista powinien skupić się na dobrych praktykach podczas pisania kodu, zamiast na siłę używać wzorce projektowe. Więcej o SOLID i DRY napisałem o nich więcej w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" target=""_blank"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-09-13
907,"Pułapki szablonu CRUD we własnym portfolio i rzeczywistym projekcie","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule opiszę pułapki i zagrożenia związane z szablonem CRUD tworzonym w Spring Boot, którego uczy się na Bootcamp. Od razu zaznaczę, że nie jestem przeciwnikiem Bootcamp'ów. Po prostu wiem z własnego doświadczenia z czym zmagają się moi uczniowie, którzy na Bootcamp nauczyli się lub nie nauczyli jak tworzyć aplikacje CRUD z użyciem Springframework.Tak, wiele osób na różnym etapie Bootcamp zgłasza się do mnie.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading {""align"":""center""} -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""align"":""left"",""fontSize"":""large""} -->
<p class=""has-text-align-left has-large-font-size"">Dlaczego wymieniam Bootcamp? Tam właśnie zaczęła się idea ""projektów typu CRUD"" i rozpowszechniła się na pozostałe obszary internetu, a następnie były one kopiowane i powielane. Czym jest CRUD i jak napisać jego kod wyjaśniłem w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"" rel=""noreferrer noopener"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading""><strong>Powtarzalność i powszechność rozwiązań powielanych w projektach</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Pierwszą pułapką jest powtarzalność i powszechność rozwiązań powielanych w projektach realizowanych na Bootcamp</strong>. Dlaczego jest, to takim dużym problemem? Spójrzmy na, to z perspektywy osoby prowadzącej rekrutację i przeglądającej dużą ilość CV. Kiedy rekruter widzi w CV kolejny projekt o podobnie brzmiącej nazwie i wyglądające podobnie do poprzednich. Zaczyna się zastanawiać, co daną osobę może wyróżniać spośród innych jej podobnych? Dlaczego akurat, to CV ma przejść do kolejnego etapu selekcji? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak, jak pisałem w <a href=""https://www.juniorjavadeveloper.pl/2020/02/15/jak-znalezc-pierwsza-prace-jako-junior-java-developer/"">Jak znaleźć pierwszą pracę jako Junior Java Developer?</a> ""Osoba rekrutująca, przeglądając CV, może stworzyć dwie grupy jedna, to studenci, np. po studiach informatycznych, a druga grupa, to osoby kończące Bootcamp. Niestety „pierwszeństwo” mają studenci."". Jeżeli nasze CV przejdzie do dalszego etapu, to należy zrobić wszystko, aby wyróżnić się spośród innych z szablonem CRUD z Bootcamp. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Jak rozwiązać problem</strong>?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Jak rozwiązać problem powszechności aplikacji CRUD powielanych na Bootcamp?</strong> Pisałem już o tym w <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/07/wlasne-portfolio-jak-zbudowac-dobre-portfolio-i-gdzie-je-umiescic/"" target=""_blank"">Własne portfolio – jak zbudować dobre portfolio i gdzie je umieścić?</a>. ""Dobre portfolio moim zdaniem powinno zawierać zarówno jeden „większy” projekt z wykorzystaniem Spring Framework jak również „mniejsze” projekty prezentujące np. właściwości języka Java. Projekt w Spring Framework, to niekoniecznie wspomniany wcześniej CRUD, jeżeli już robimy CRUD’a, to ważne, aby miał on dobrą dokumentację w pliku READ.ME oraz sam kod zawierał testy jednostkowe, np. w JUnit i był zgodny z SOLID i DRY."". Rozwiązaniem jest po prostu nieszablonowy projekt.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przykład nieszablonowego projektu opisałem w <a href=""https://www.juniorjavadeveloper.pl/2020/02/15/jak-znalezc-pierwsza-prace-jako-junior-java-developer/"" target=""_blank"" rel=""noreferrer noopener"">Jak znaleźć pierwszą pracę jako Junior Java Developer?</a>. ""Projekt będzie składał się z aplikacji serwerowej i łączącej się z nią aplikacji mobilnej. Możemy np. stworzyć aplikację mobilną, która dla bieżącej pogody i lokalizacji przygotuje propozycję ubrań na dany dzień. Brzmi skomplikowanie, ale tak na prawdę nie jest."".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading""><strong>Schematyczne i wierne odzwierciedlanie wyuczonego szablonu</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Pułapką numer dwa jest ""schematyczne i wierne odzwierciedlanie wyuczonego szablonu CRUD"".</strong> Osoby, które widzą kod z artykułu <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a> często zadają mi pytanie ""dlaczego tak pisać kod, a nie w sposób jaki nauczyłem się na Bootcamp lub z tutorial'a?"". Z takimi samymi pytaniami spotykam się podczas moich zajęć z uczniami. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zastanówmy się nad powyższymi pytaniami. Dlaczego nazwałem metody: create, read, update i delete, zamiast: createCar, getCar, modifyCar, removeCar. Dlaczego dla klas nie użyłem sufiksu Dto lub Model? Dlaczego główna klasa nazywa się CarService, a nie CarCrud? Za chwilę odpowiem na powyższe pytania, ale najpierw zobrazuję, to za pomocą kodu Java.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// 1. poprawna konwencja nazewnicza według mnie
public class CarService {
    public Car create(Car car) {
        return null;
     }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// 2. poprawna konwencja nazewnicza według Bootcamp, tutorial
public class CarCrud {
    public CarDto createCar(CarDto carDto) {
        return null;
     }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W powyższym fragmencie kodu problemem jest schematyczne podejście do konwencji nazewniczej. Rzadko kiedy w różnych projektach konwencja nazewnicza jest taka sama lub chociaż podobna do tej, którą widzieliśmy w innym projekcie lub nas nauczono. Konwencja nazewnicza wskazuje, a nie narzuca jak powinno nazywać się klasy, metody i zmienne. Takie schematyczne podejście zaciemnia i zamazuje sens tworzenia klasy typu CRUD.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak, jak pisałem w <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>: ""Bardzo wiele aplikacji jest tzw. CRUD’ami, czyli udostępnia podstawowe operacje tworzenia (create), odczytu (read), modyfikacji (update) oraz usuwania (delete) obiektów jakiejś klasy. Dla przykładu weźmy katalog samochodów, gdzie mamy klasę Car."". Właśnie na tym należy się skupić i dostosować szablon CRUD do projektu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wyjaśnię dlaczego ""1. poprawna konwencja nazewnicza według mnie"" jest lepszym rozwiązaniem. Dodawanie ""Car"" do nazwy metody, co daje nam ""createCar()"" jest zbędne. Po pierwsze, działamy w obrębie klas CarService i przekazujemy do metody parametr typu ""Car"", czyli create(Car car). Moim zdaniem jest, to wystarczające, aby wiedzieć, że metoda ""create()"" dotyczy obiektów klasy ""Car"", czyli jest w kontekście danej klasy. To jest powielanie już istniejących informacji, czyli tzw. masło maślane.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Oczywiście stosowanie nazw np. CarDto, CarModel, itp. ma sens, jeżeli tworzymy aplikację wielowarstwową, a zakładam, że taką tworzymy. Wtedy będziemy mieli kilka różnych klas z tą samą nazwą np. Car. Więcej o aplikacjach, które posiadają warstwy napisałem w <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" target=""_blank"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Jak rozwiązać problem</strong>?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Jak rozwiązać problem schematycznego i wiernego odzwierciedlania wyuczonego szablonu CRUD?</strong> Przede wszystkim należy traktować szablon jak zbiór wytycznych, które rozwiązują konkretny problem, a nie jak sposób rozwiązywania wszystkich zagadnień programistycznych. To tak jak z montażem drzwi wiadomo, że w większości przypadków będą one prostokątem, który należy zamontować w ścianie. Wtedy pojawia się zamawiający i mówi, że mają, to być np. drzwi przesuwane z okienkiem dla jego kotów. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworzenie aplikacji typu CRUD należy ćwiczyć. Trzeba znaleźć kilka tutoriali, kursów przedstawiających jak, to należy robić i wykonać każdy z nich. Jeżeli da się, to można wydzielić z nich część wspólną i stworzyć własny przepis na szablon CRUD.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-08-18
944,"Okiem Eksperta - Jak napisać dobre CV? - Agnieszka Ciećwierz","<!-- wp:paragraph -->
<p>Artykuł ten rozpoczyna cykl pod tytułem ""Okiem Eksperta"". W którym, to cyklu gościnnie będą prezentowane artykuły ekspertów z różnych dziedzin, nie tylko IT. Tak, aby jeszcze bardziej pomóc osobom, które chcą zostać młodszymi programistami Java - Junior Java Developer.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {""mediaId"":947,""mediaLink"":""https://www.juniorjavadeveloper.pl/?attachment_id=947"",""mediaType"":""image"",""verticalAlignment"":""center"",""imageFill"":false,""focalPoint"":{""x"":""0.50"",""y"":""0.50""}} -->
<div class=""wp-block-media-text alignwide is-stacked-on-mobile is-vertically-aligned-center""><figure class=""wp-block-media-text__media""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/08/ekspert_agnieszka-ciecwierz_pp.jpg"" alt=""Okiem Eksperta - Agnieszka Ciećwierz"" class=""wp-image-947""/></figure><div class=""wp-block-media-text__content""><!-- wp:paragraph {""placeholder"":""Treść..."",""fontSize"":""normal""} -->
<p class=""has-normal-font-size"">Agnieszka Ciećwierz specjalizuje się w testach kompetencyjnych oraz psychologicznych wykorzystywanych w procesie rekrutacji, bilansach kompetencji, ocenie pracowniczej, zarządzaniu i rozwijaniu talentów. Wspiera firmy w badaniu kompetencji i potencjału pracowników oraz kandydatów do pracy. Równolegle prowadzi wykłady i szkolenia z kompetencji miękkich. Jest też prelegentką i panelistką podczas wydarzeń branżowych, autorką licznych artykułów oraz książki <a rel=""noreferrer noopener"" href=""https://onepress.pl/ksiazki/daj-sie-zrekrutowac-jak-przygotowac-sie-do-procesu-rekrutacji-agnieszka-ciecwierz,reopko.htm"" target=""_blank"">„Daj się zrekrutować! Jak przygotować się do procesu rekrutacji”</a>.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>Często pytacie mnie jak napisać CV stąd dzisiejszy wpis. Zacznę od wytłumaczenia, dlaczego CV powinno być dostosowane do oferty pracy i konkretnego ogłoszenia, ponieważ wielokrotnie spotykam się z pytaniem: „Czy należy wysyłać wszędzie jedno i to samo CV?”.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Moja odpowiedź brzmi — NIE!!!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do każdej oferty, na którą odpowiadamy, CV powinno być przygotowane indywidualnie. Wiem, że teraz pewnie zastanawiacie się dlaczego. Już spieszę wyjaśnić:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Po pierwsze:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Każda oferta jest inna. W każdej firmie i na każdym stanowisku szukają czegoś innego. W jednej firmie nacisk będą kłaść na jedną z Waszych kompetencji, a w drugiej na inną. Dlatego też tak ważne jest, aby rekruter nie musiał przeglądać 10 stron CV w celu odnalezienia konkretnych kompetencji, których poszukuje, tylko mógł je zobaczyć od razu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Po drugie:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pamiętajcie, że rekruter — dowiodło tego badanie The Ladders[1] przeprowadzone z wykorzystaniem techniki eye tracking (czyli mierzenia ruchu gałek ocznych podczas czytania ogłoszenia rekrutacyjnego) — ma średnio sześć sekund na wstępne zapoznanie się z Waszym CV. W tym czasie będzie szukał tylko rzeczy, które będą pokrywały się z ogłoszeniem rekrutacyjnym i ustalonym profilem kandydata. Jeśli takich wspólnych punktów nie znajdzie, Wasze CV zostanie odrzucone. Dlatego też jeśli CV będzie przygotowane konkretnie pod daną ofertę pracy, istnieje większe prawdopodobieństwo, że rekruter szybciej wyłapie punkty zbieżne z oczekiwaniami na danym stanowisku i zaprosi Was na rozmowę kwalifikacyjną. A teraz po kolei:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Zdjęcie</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśli chodzi o zdjęcie w CV — nie jest ono konieczne. Z raportu InterviewMe Rekrutacja oczami pracodawców i rekruterów[2] z 2019 roku wynika, że tylko 11% rekruterów i pracodawców (biorących udział w badaniu) zależy na tym, by w CV znalazło się zdjęcie kandydata.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pamiętajcie, że jeśli nie masz zdjęcia, na którym wyglądacie profesjonalnie — nie wstawiajcie innego. Z tego samego raportu wynika, że 44% rekruterów uważa, że skoro kandydat dodał zdjęcie do CV, to ta fotografia powinna spełniać konkretne standardy![3] Niby każdy o tym wie, a nadal można spotkać w CV zdjęcia z imprez z kuflem piwa w ręku, z uciętą głową kolegi obok czy też zdjęcie z plaży bez koszulki. Zdjęcie powinno świadczyć o Waszym profesjonalizmie, a nie o rozrywkowym trybie życia po pracy — bo to nikogo nie interesuje.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Dane</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W tym miejscu wpisujecie swoje imię i nazwisko, aktualny (!) numer telefonu oraz adres e-mail. Pamiętajcie, że adres mailowy powinien brzmieć profesjonalnie. Jeśli nie macie takiego, załóżcie nowy specjalnie do wysyłania CV. Nie musicie wpisywać adresu zamieszkania/zameldowania czy też stanu cywilnego (nie mam pojęcia, skąd wzięła się moda na wpisywanie tej informacji).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Wykształcenie</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W sekcji wykształcenie wpisujesz ostatnio ukończoną szkołę lub uczelnię. Naprawdę nie musisz wpisywać przedszkola, podstawówki, gimnazjum i liceum. W zupełności wystarczy wpisać wykształcenie wyższe (licencjat, magister itp.), jeśli je masz, jeśli nie — wpisz ostatnią skończoną szkołę.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Doświadczenie zawodowe</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Co zawrzeć w rubryce „doświadczenie zawodowe” w CV? Najlepiej:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>nazwy organizacji, w których pracowaliście, wraz z konkretnymi datami zatrudnienia od – do;</li><li>stanowiska, które zajmowaliście;</li><li>krótki opis stanowiska i/lub listę Waszych konkretnych obowiązków — nie piszcie ogólnie „zarządzanie bazą klientów”, tylko „obsługa stałych klientów oraz pozyskiwanie nowych (tutaj możecie napisać, ilu nowych klientów udało Wam się zdobyć), odbywanie spotkań, tworzenie ofert itp.”.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Bądźcie zwięźli, treściwi i konkretni. Połóżcie nacisk na istotne informacje, które odnoszą się bezpośrednio do oferty pracy, na którą aplikowaliście!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>A co, jeśli nie macie doświadczenia zawodowego?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Warto opisać aktywność studencką, przynależność do stowarzyszeń czy też wolontariat. Jeśli zdobyliście stypendium, wygraliście jakiś konkurs na uczelni (bądź gdzie indziej), również umieśćcie to w swojej aplikacji! Dodatkowo jeśli prowadzicie bloga czy też kanał na YouTubie, także warto o tym napisać. Warto też odnosić się do tego, czego nauczyliście się dzięki danej aktywności i jak może Wam się to przydać w przyszłej pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Kompetencje/umiejętności</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśli macie już ogłoszenie, na które chcecie aplikować- możecie teraz zakreślić kompetencje i umiejętności, które się pokrywają z pożądanymi przez pracodawcę, i wpisać je do CV. Podkreślę jeszcze raz słowo — <strong>POKRYWAJĄ!</strong> Nie wspominajcie o kompetencjach, których nie posiadacie — wtedy sami sobie robicie krzywdę — bo jeśli nawet przejdziecie dalej i zostaniecie przyjęci na dane stanowisko, to po pierwsze, niestety najprawdopodobniej się na nim nie sprawdzicie, a po drugie — będziecie się męczyli w pracy, a tego przecież nie chcecie! Dlatego też tak ważna jest szczerość — szczerość głównie wobec siebie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Aktualna klauzula RODO</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pamiętajcie o zmianie klauzuli o danych osobowych. Po zmianie przepisów nowa klauzula w CV brzmi następująco:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Wyrażam zgodę na przetwarzanie moich danych osobowych dla potrzeb niezbędnych do realizacji procesu rekrutacji (zgodnie z ustawą z dnia 10 maja 2018 roku o ochronie danych osobowych (Dz. Ustaw z 2018, poz. 1000) oraz zgodnie z Rozporządzeniem Parlamentu Europejskiego i Rady (UE) 2016/679 z dnia 27 kwietnia 2016 r. w sprawie ochrony osób fizycznych w związku z przetwarzaniem danych osobowych i w sprawie swobodnego przepływu takich danych oraz uchylenia dyrektywy 95/46/WE (RODO))</em><sup>[4]</sup>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Podsumowanie zawodowe</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Podsumowanie zawodowe powinno znaleźć się na samym początku CV. Powinno być krótkie i zwięzłe — dobrze, żeby składało się maksymalnie z trzech – czterech zdań. Dodatkowo powinno odpowiadać na trzy najważniejsze pytania pracodawcy:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Kim jesteście i jak długie macie doświadczenie?</li><li>Jakie jest Wasze najważniejsze osiągnięcie zawodowe? (Mogą być to sukcesy w realizacji celów).</li><li>Gdzie chcecie znaleźć pracę? („Aktualnie poszukuję nowych wyzwań zawodowych jako [nazwa stanowiska]”)[5].</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Pytanie, z którym również bardzo często się spotykam, to: „Czy to źle, jeśli moje CV ma więcej niż jedną stronę?”.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Rekruter oczekuje, że przedstawicie mu w swoim CV wszystkie swoje zalety oraz opiszecie kompetencje w taki sposób, by z dokumentu wynikało, że pasujecie do jego oferty pracy. Kierujcie się tym, nawet jeśli oznacza to, że Wasze CV będzie dłuższe niż strona[6].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując: według raportu InterviewMe “Rekrutacja oczami pracodawców i rekruterów” to, co w CV kandydata zniechęca rekrutera, to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>CV niedopasowane do oferty pracy — 62% ankietowanych rekruterów;</li><li>błędy językowe w CV — 50% ankietowanych rekruterów;</li><li>nieprofesjonalne zdjęcie w CV — 44% ankietowanych rekruterów;</li><li>nieprofesjonalny adres e-mail — 44% ankietowanych rekruterów;</li><li>CV dłuższe niż dwie strony — 22% ankietowanych rekruterów;</li><li>brak zdjęcia w CV — 11% ankietowanych rekruterów.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Dziękuję Agnieszce za podzielenie się swoim doświadczeniem! Artykuł można również znaleźć na stronie <a rel=""noreferrer noopener"" href=""http://www.aciecwierz.pl/jak-napisac-dobre-cv/"" target=""_blank"">http://www.aciecwierz.pl/jak-napisac-dobre-cv/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojego bloga, będą pojawiać się kolejne artykuły oraz zapraszam do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->",2020-08-13
998,"Po co w ogóle testować kod aplikacji? mBank robi to na produkcji! Praktyczny przykład JUnit test","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule opiszę dlaczego testowanie kodu aplikacji jest tak ważne, opiszę jak tworzyć różne rodzaje testów oraz pokażę przykład JUnit test dla Javy. Zawsze powtarzam, jeżeli chcesz spać spokojnie, to pisz testy kodu aplikacji. Pod pojęciem testy rozumiem różne rodzaje testów np.: testy jednostkowe, testy integracyjne, testy automatyczne oraz manualne. Można wryóżnić kilka technik pisania testów.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ludzie dzielą się na tych, którzy piszą testy oraz tych, którzy będą je pisali. Wszyscy wiemy jak wyglądały testy aplikacji na produkcji robione przez mBank - <a href=""https://niebezpiecznik.pl/post/mbank-testowal-na-produkcji-i-wylozyl-sobie-cala-infrastrukture/"" target=""_blank"" rel=""noreferrer noopener"">niebezpiecznik.pl</a> (5/8/2020) - tak nie robimy, chcemy tego uniknąć. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Techniki pisania testów</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na wstępie wspomniałem różne rodzaje testów, omówię je szerzej później. Do rodzajów testów można dodać jeszcze różne techniki pisania testów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">TDD - Test Driven Development</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Najpopularniejszą techniką pisania testów jest <a href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"" rel=""noreferrer noopener"">Test Driven Developmnet - TDD</a>. Technika TDD zakłada w pierwszej kolejności pisanie testów, a następnie pisanie właściwej klasy, którą testujemy. Dzięki temu wymuszamy pisanie testów do tworzonego kodu. TDD wyrabia dobry nawyk dzięki, któremu nasz kod źródłowy ""od razu"" posiada testy. Polecam książkę <a href=""https://helion.pl/view/20365c/tddszv_ebook.htm"" data-type=""link"" data-id=""https://helion.pl/view/20365c/tddszv_ebook.htm"" target=""_blank"" rel=""noreferrer noopener"">TDD. Sztuka tworzenia dobrego kodu</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">""Technika"" dopisywania testów</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kolejną ""techniką"" pisania testów jest dodawanie testów do już istniejącego kodu źródłowego w trakcie refaktoryzacji lub z powodu braku testów. Nie jest, to idealne rozwiązanie, ale tworzenie testów nawet dla istniejącego kodu jest lepszym rozwiązaniem niż brak testów. Proces refaktoryzacji wspartej TDD jest opisany w ""Rozdział 31. Refaktoryzacja"" w książce <a href=""https://helion.pl/view/20365c/tddszv_ebook.htm"" data-type=""link"" data-id=""https://helion.pl/view/20365c/tddszv_ebook.htm"" target=""_blank"" rel=""noreferrer noopener"">TDD. Sztuka tworzenia dobrego kodu</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Po co pisać testy?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zacznę od tego, że brak testów może wskazywać na to, że nie rozumiemy tworzonego kodu źródłowego, bo dobre testy wymagają znajomość kodu, który testujemy. Jeżeli rozumiemy kod, który testujemy, to znaczy, że będziemy w stanie zmodyfikować go. Często powtarzam moim uczniom, uczennicom, jeżeli chcecie spać spokojnie, to piszcie testy jednostkowe. Kolega, koleżanka z zespołu dziesięć razy zastanowi się zanim zmodyfikuje nasz kod, bo testy mogą przestać działać i będzie trzeba je poprawić. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jedyną stałą rzeczą w kodzie jest zmienność kodu. Testy pozwalają modyfikować istniejący kod bez obaw, że nasza zmiana coś popsuła w kodzie. Jeżeli tak będzie, to testy wykażą taki błąd i już na etapie tworzenia kodu będziemy w stanie wyłapać i poprawić taki błąd, a nie na produkcji. Unikniemy sytuacji z naszego ulubionego mBanku - <a href=""https://niebezpiecznik.pl/post/powazna-wpadka-mbanku-klienci-mieli-wglad-w-cudze-rachunki/"" target=""_blank"" rel=""noreferrer noopener"">niebezpiecznik.pl</a> (5/8/2020).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Kto pisze testy?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W procesie tworzenia testów należy wyróżnić programistów oraz testerów. Dlaczego nie wystarczą testy pisane przez programistów? Powodów jest kilka, pierwszym z nich jest to, że programista testując swój kod wie jakie warunki i miejsca omijać w testowanym kodzie, no i oczywiście, kto będzie znajdował błędy w swoim idealnym kodzie? Testerzy często tworzą testy dla osób nietechnicznych, które chcą zweryfikować jak działa zamawiane oprogramowanie. Dodatkowo tester ""dostaje wynagrodzenie"" za znalezienie jak największej liczby błędów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Programista</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Testy napisane przez programistów weryfikują poprawność działania tworzonego kodu z perspektywy języka programowania, jak również logiki biznesowej aplikacji, np. wykonanie przelewu bankowego jest logiką biznesową aplikacji. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Programiści w większości przypadków tworzą testy automatyczne. Dla każdego testu należy zdefiniować dane wejściowe oraz oczekiwany wynik, aby zdefiniować takie dane oraz wynik musimy wiedzieć jaka jest logika naszej aplikacji. Innymi słowy, tworząc poprawne testy pokazujemy, że wiemy jak działa testowana przez nas aplikacja.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Tester</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworzą testy, aby głównie zweryfikować logikę biznesową aplikacji oraz testują tzw. warunki brzegowe, np. czy można wykonać przelew na ujemną kwotę i/lub datę z przeszłości? Testerzy tworzą zarówno testy automatyczne jak również manualne.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Kategorie testów</h2>
<!-- /wp:heading -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Testy manualne</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Polegają np. na klikaniu w stronę internetową banku w celu wykonania przelewu. Jeżeli tester znajdzie błąd podczas wykonywania przelewu zgłosi go - za pomocą systemu do zgłaszania błędów, np. <a href=""https://pl.wikipedia.org/wiki/JIRA"" target=""_blank"" rel=""noreferrer noopener"">JIRA</a> - programiście, który będzie musiał taki błąd poprawić w późniejszym czasie, nie koniecznie od razu. Idealną sytuacją jest, w której tester posiada <a href=""https://pl.wikipedia.org/wiki/Historyjka_u%C5%BCytkownika"" target=""_blank"" rel=""noreferrer noopener"">scenariusze testowe</a>, które, to krok po kroku opisują, co należy zrobić, aby wykonać przelew bankowy. Na tej podstawie można odtworzyć sytuację, która wywołała błąd, w przeciwnym wypadku błąd może nie zostać nigdy odtworzony i naprawiony.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading""><strong>Testy automatyczne</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wymagają użycia narzędzia, za pomocą którego można zaprogramować, zautomatyzować sekwencję czynności, które doprowadzą np. do wykonania przelewu bankowego. Większość testów automatycznych tworzonych przez testerów jest testami integracyjnymi. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Do testów automatycznych testerzy mogą używać takie narzędzia jak <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Selenium_(software)"" target=""_blank"">Selenium</a> (testy www), <a rel=""noreferrer noopener"" href=""https://www.postman.com/automated-testing/"" target=""_blank"">Postman</a> (testy REST API) lub <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Apache_JMeter"" target=""_blank"">JMeter</a> (testy wydajnościowe). Kroki niezbędne do wykonania testu powinny być spisane w <a href=""https://pl.wikipedia.org/wiki/Historyjka_u%C5%BCytkownika"" target=""_blank"" rel=""noreferrer noopener"">scenariuszu testowym</a>. Za pomocą ww. narzędzi tester nagrywa, koduje test automatyczny, który następnie jest odtwarzany dowolną ilość razy w dowolnym momencie na wcześniej zdefiniowanym zbiorze danych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z założenia testy tworzone przez programistów są testami automatycznymi. Do tworzenia takich testów programiści używają framework'ów do testowania kodu źródłowego, czyli klas języka Java. Najpopularniejszym obecnie framework'iem jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/JUnit"" target=""_blank"">JUnit</a>. Jak łatwo korzysta się z JUnit w IntelliJ napisałem wcześniej w tym artykule. Testy automatyczne tworzone przez programistę możemy podzielić na testy integracyjne i jednostkowe.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zanim omówię testy kodu źródłowego z perspektywy programisty zachęcam do zapoznania się z informacjami o klasach w języku Java, <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/07/pierwsza-klasa-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa – kod Java, IntelliJ, krok po kroku</a> oraz informacjami o metodach w języku Java, <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/03/21/dzialania-w-pierwszej-klasie-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Działania w pierwszej klasie – kod Java, IntelliJ, krok po kroku</a>. Testy kodu źródłowego pisane przez programistę testują metody w klasach.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">JUnit test - praktyczny przykład</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Środowiska programistyczne takie, jak IntelliJ domyślnie wspierają tworzenie testów dla naszego kodu. Wystarczy ustawić kursor na wybranej nazwie klasy i wcisnąć ALT+Enter, wyświetli nam się opcja ""Create Test"" i/lub wcisnąć ALT+Insert w dowolnym miejscu w kodzie klasy i wybrać opcję ""Test..."". Następnie będziemy mogli wybrać bibliotekę do testów (na chwilę obecną domyślny jest JUnit5) oraz metodę, którą chcemy przetestować, będzie ona dostępna do wyboru na liście.</p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002214\u0022 gal_title=\u0022Po co w ogóle testować kod aplikacji?\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""14"" gal_title=""Po co w ogóle testować kod aplikacji?""]
<!-- /wp:tw/bwg -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Test jednostkowy - co testować?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Programista pisząc <strong>testy jednostkowe</strong>, testuje poprawność działania metod w klasie, głównie metod publicznych. W jaki sposób testuje się poprawność działania metody? W języku Java metoda może przyjmować parametry, zwracać wynik i/lub rzucać wyjątek i właśnie te elementy są testowane przez programistę. Testowanie działania metody linijka po linijce nie miało by większego sensu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Test jednostkowy - jak testować?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Mając powyższą wiedzę programista definiuje dane wejściowe do metody oraz sprawdza wartość zwracaną z metody. Dobrą praktyką jest podzielenie testu na <strong>sekcje given, when, then</strong> - nazwy są samo opisujące się. W tych sekcjach programista umieszcza logikę testu jednostkowego.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">W sekcji <strong>given</strong> powinna być klasa, którą testujemy oraz wartości dla parametrów testowanej metody - dane wejściowe - w tym przypadku  <strong>BankService</strong> oraz <strong>BankAccount</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">W sekcji <strong>when</strong> powinna zostać wywołana metoda, którą testujemy <strong>transfer()</strong>, przekazujemy do niej wartości dla parametrów (<strong>fromBankAccount</strong> oraz <strong>toBankAccount</strong>), a następnie przypisujemy wartość zwracaną <strong>transferred</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">W sekcji <strong>then</strong> sprawdzamy wartość zwracaną z metody <strong>transfer()</strong> za pomocą mechanizmu assercji z framework'a JUnit - w tym przypadku <strong>assertFalse()</strong>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:image {""align"":""center"",""id"":1090,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/10/Tworzenie-testu-IntelliJ_04.png"" target=""_blank"" rel=""noopener noreferrer""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/10/Tworzenie-testu-IntelliJ_04-1024x760.png"" alt=""Po co w ogóle testować kod aplikacji? - Test jednostkowy JUnit"" class=""wp-image-1090""/></a><figcaption class=""wp-element-caption"">Po co w ogole testowac kod aplikacji? - Test jednostkowy JUnit</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Test integracyjny</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Testy integracyjne</strong> programista pisze dla wielu współpracujących ze sobą klas i ich metod, grupuje różne funkcje kodu w celu przetestowania tzw. pełnej ścieżki dla danego <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Przypadek_u%C5%BCycia"" target=""_blank"">przypadku użycia</a>, który może być opisany w <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Historyjka_u%C5%BCytkownika"" target=""_blank"">scenariuszu testowym</a>. W dużym uproszczeniu można powiedzieć, że w sekcji <strong>given</strong> będzie więcej obiektów (<strong>CurrencyConverterService</strong> i <strong>BankService</strong>), a w sekcji <strong>when</strong> będzie więcej wywołań metod (<strong>balance()</strong> i <strong>convert()</strong>), których wyniki będą wzajemnie przekazywane (<strong>BigDecimal balance</strong> i <strong>BigDecimal balanceInEuro</strong>).</p>
<!-- /wp:paragraph -->

<!-- wp:image {""id"":1093,""sizeSlug"":""large""} -->
<figure class=""wp-block-image size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/10/Tworzenie-testu-IntelliJ_05-1024x716.png"" alt=""Po co w ogóle testować kod aplikacji? - Test integracyjny JUnit"" class=""wp-image-1093""/><figcaption class=""wp-element-caption"">Po co w ogole testowac kod aplikacji? - Test integracyjny JUnit</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Piramida testów</h2>
<!-- /wp:heading -->

<!-- wp:image {""align"":""center"",""id"":3717,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/10/Matrin-Fowler-The-Practical-Test-Pyramid.png"" alt=""Matrin Fowler - The Practical Test Pyramid"" class=""wp-image-3717""/><figcaption class=""wp-element-caption"">Matrin Fowler - The Practical Test Pyramid</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na koniec umieszczę link do artykułu o piramidzie testów z praktycznym przykładem oraz obszernym wytłumaczeniem roli i znaczenia testów - <a href=""https://martinfowler.com/articles/practical-test-pyramid.html"">https://martinfowler.com/articles/practical-test-pyramid.html</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-10-02
1111,"Pierwsze dni w pracy IT jako Junior Java Developer - rekrutacja, onboarding, sprzęt","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule postaram się pokazać jak mogą wyglądać pierwsze dni w pracy Junior Java Developera, czasem jest śmiesznie, komicznie, a czasem demotywująco. Opiszę w nim trzy kluczowe elementy, z którymi młodszy programista może zetknąć się w pierwszych dniach pracy - rekrutacja (a raczej efekt rekrutacji), onboarding oraz sprzęt, który otrzymujemy lub nie.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Rekrutacja - efekt rekrutacji</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przecież zostaliśmy już zatrudnieni i przyszliśmy do pracy. No i właśnie, po przyjściu do nowej, wymarzonej pracy możemy zastać, co najmniej dwie skrajne sytuacje. Zostaliśmy przydzielenie do projektu i rozpoczynamy błyskawiczne i intensywne wdrażanie się w niego. Drugą sytuacją może być brak projektu, tzn. nie zostaliśmy przypisani do żadnego projektu lub projekt dla nas jeszcze nie istnieje.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Pierwszy projekt</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zostaliśmy przydzieleni do projektu i co dalej? Jeżeli dany projekt posiada dokumentację, to zapewne dostaniemy do niej dostęp i będziemy musieli się z nią zapoznać. Należy jednak pamiętać, że dokumentacja jest nieaktualna już w momencie jej tworzenia, bo jedyny stały element w systemie, kodzie, to zmiana. Tak samo powinniśmy otrzymać dostęp do repozytorium z kodem źródłowym.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Brak projektu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co w sytuacji, gdy nie zostaliśmy przydzieleni do żadnego projektu? Jak, to w ogóle możliwe, że nas zatrudniono i nie ma dla nas pracy, projektu? Czasem tak bywa, ponieważ np. rekrutacja na dane stanowisko jest ciągła, a koszt pozyskania nowego pracownika jest większy niż koszt utrzymania programisty bez pracy. Wiem, że to brzmi dziwnie, ale czasem tak jest. Wtedy przeważnie dostajemy stertę dokumentacji do zapoznania się, albo musimy zapoznać się z nowym framework'iem. Możemy też dostać zadanie stworzenia <a href=""https://en.wikipedia.org/wiki/Proof_of_concept"" target=""_blank"" rel=""noreferrer noopener"">PoC</a> (Proof of Concept) jakiegoś rozwiązania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Brak sprzętu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Brak przypisania do konkretnego projektu nie jest najdziwniejszą sytuacją. Czasem zdarza się, że w ogóle nie dostaniemy sprzętu, na którym moglibyśmy pracować. To może wydawać się kompletnym absurdem, ale przyczyn takiej sytuacji może być kilka. Budżet na sprzęt jest ustalany dużo wcześniej i możemy trafić na okres, w którym nie planuje się zakupu nowego sprzętu. Może też tak być, że sprzęt jest rotowany między odchodzącymi, a przychodzącymi pracownikami. W takiej sytuacji będziemy musieli poczekać, aż ktoś odejdzie z firmy, to jest raczej praktyka dużych korporacji.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Brak przełożonego, opiekuna</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z brakiem projektu oraz sprzętu może się również wiązać brak bezpośredniego przełożonego, który będzie nadzorował nasze prace, ale i również nasz rozwój, na którym najbardziej zależy młodszemu programiście Java. Widziałem już nowo zatrudnione osoby, które przez kilka tygodni siedziały bez sprzętu w oczekiwaniu na przydział projektu i przełożonego. Nie zrażałbym się zaistniałą sytuacją, bo gwarantowane jest, że jak trafimy w końcu do projektu, to w pewnym momencie nie będziemy narzekać na brak pracy, a raczej na nadgodziny.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Onboarding</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W sytuacji, gdy już dostaniemy przydział projektowy oraz przełożonego, może rozpocząć się <strong>proces onboarging'u</strong>, czyli proces, w którym nowy pracownik zdobywa wiedzę, umiejętności i zachowania, aby zostać efektywnym członkiem danej organizacji. W większości przypadków będziemy musieli samemu szukać wiedzy na temat organizacji, w której pracujemy tzn. jaka jest kultura organizacji,  hierarchia itp. Drugim skrajnie różnym przypadkiem może być firma, w której wszystko jest sformalizowane i spisane na potrzeby onboarging'u nowego pracownika.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Dostajemy ""nasz"" komputer</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W trakcie procesu onboarding'u <strong>dostaniemy ""nasz"" komputer</strong>. Celowo napisałem wyraz nasz w cudzysłowie. Tak na prawdę nie należy zapominać, że jest, to własność firmy, która nas zatrudniła. Co prawda, jeżeli będzie, to laptop, to będziemy mogli zabrać go ze sobą do domu. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z posiadaniem ""naszego"" komputera wiąże się kilka elementów:<br>- musimy dbać o ten komputer (ale, to jest oczywiste),<br>- na komputerze będzie zainstalowane sporo oprogramowania monitorującego,<br>- w dowolnym momencie ktoś inny będzie mógł skorzystać z naszego komputera,<br>- nie będziemy mogli instalować dowolnego oprogramowania.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2020-10-15
1214,"Jak znaleźć Mentora? - JustGeek.IT - ACCEPTED","<!-- wp:paragraph -->
<p>Kolejny kurs, tutorial z programowania za Tobą. Nadal nie wiesz, którą wybrać ścieżkę, żeby zostać młodszym programistą wybranego przez siebie języka programowania. Co najważniejsze jak znaleźć wymarzoną pierwszą pracę. Pomocnym w tym wszystkim może okazać się&nbsp;Mentor, ale jak go znaleźć? Mentor z definicji, to ""doświadczony, mądry doradca, nauczyciel i wychowawca"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><s>Dobrze by było, gdybyś pokazał czytelnikom choć skrót swojej drogi i tego, jaki wpływ na ciebie miał jakiś mentor. To pokaże, że jesteś… ""nasz"", że jesteś taki sam jak czytelnik :)</s></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gdybym na mojej drodze nie spotkał kilku mentorów zapewne więcej czasu zajęłoby mi zostanie programistą. Tak się składa, że moimi mentorami było dwóch Piotrków, którzy doskonale rozumieli programistów na różnych etapach rozwoju. Pierwszy Piotrek pomógł mi stawiać pierwsze kroki w programowaniu w języku Java oraz świecie IT. Drugi Piotrek pomógł mi doszlifować mój warsztat programisty. Moim wirtualnym mentorem, z którego pomocy może skożystać każdy w każdym momencie był Uncle Bob Martin - <a rel=""noreferrer noopener"" href=""http://cleancoder.com"" target=""_blank"">http://cleancoder.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poza odpowiedzią na główne pytanie - Jak znaleźć mentora? - w tym artykule przedstawię&nbsp;następujące kwestie:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Czy mentor w ogóle jest mi potrzebny?</li><li>Co takiego może zaoferować mi mentor?</li><li>Współpraca z mentorem:<ul><li>Jak przygotować się do pierwszego spotkania?</li><li>Plan nauki - materiał vs. czas na naukę.</li></ul></li><li>Mentor tylko dla przyszłego, młodszego programisty?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Najpierw odpowiedzmy sobie na pytanie: <strong>Czy w ogóle jest mi potrzebny Mentor?</strong>  Moim zdaniem mentor jest potrzebny, jeżeli:<br>- nie wiesz jaką ścieżkę nauki programowania wybrać,<br>- chcesz zweryfikować swoją wiedzę,<br>- potrzebujesz wsparcia w dalszej nauce,<br>- stworzyłeś samodzielnie projekt i chciałbyś go zweryfikować.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Co takiego może mi zaoferować mentor?</strong> Pół żartem pół serio, to mentor pozwoli uniknąć błędów oraz wielu godzin spędzonych na rozwiązywaniu ""banalnego"" problemu. Mentor wskaże nam kierunek rozwoju. Jego doświadczenie na stanowisku programisty pokaże szerszy kontekst pracy programisty. Tutorial czy kurs online nie przedstawią informacji ze zwykłego dnia pracy programisty. Samo programowanie, to dopiero początek, wierzchołek góry lodowej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Poszukiwania mentora można rozpocząć od</strong> grup na Facebooku oraz portali z ogłoszeniami takimi jak <a rel=""noreferrer noopener"" href=""https://www.e-korepetycje.net"" target=""_blank"">https://www.e-korepetycje.net</a> i/lub <a rel=""noreferrer noopener"" href=""https://www.olx.pl/uslugi-firmy/uslugi/korepetycje"" target=""_blank"">https://www.olx.pl/uslugi-firmy/uslugi/korepetycje</a>. Może, to być dla Ciebie zaskakujące, ale właśnie w taki sposób znajdują mnie osoby poszukujące mentora dla przyszłego Junior Java Developera. Niech Ciebie nie zwiedzie wyraz korepetycje w nazwie. Można tam na prawdę znaleźć różne osoby, od studentów, którzy chcą dorobić do studiów, a kończąc właśnie na mentorach. Na e-korepetycje.net korepetytorzy/mentorzy mają własny profil z biogramem oraz listą ocen np. mój profil <a rel=""noreferrer noopener"" href=""https://www.e-korepetycje.net/jacek-korepetytor"" target=""_blank"">https://www.e-korepetycje.net/jacek-korepetytor</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kolejnym sposobem poszukiwania mentora mogą być video kursy na np. <a rel=""noreferrer noopener"" href=""https://www.youtube.com/"" target=""_blank"">YouTube.com</a>, <a rel=""noreferrer noopener"" href=""https://www.udemy.com/"" target=""_blank"">Udemy.com</a> itp. Wyszukujemy interesujące nas zagadnienie i patrzymy kto jest autorem danego kursu lub kanału. Na YouTube proponuję do szukanej frazy dopisać słowo ""PL"", np. ""java spring boot datajpa PL"", na Udemy mamy możliwość wyboru języka dla kursu, tu sprawa jest łatwiejsza. Autor takiego video kursu w większości przypadków będzie miał informacje o swoim blogu, stronie, na których znajdziemy dane kontaktowe oraz ""ofertę"" nauczania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Najlepiej skontaktować się z więcej niż jednym mentorem oraz umówić się&nbsp;na próbną, bezpłatną konsultację. Przy wyborze mentora ciężko będzie nam zweryfikować jego umiejętności techniczne, ale na początek kierowałbym się tym jak nam się z nim rozmawia i czy sposób prowadzenia konsultacji nam odpowiada. To jest bardzo ważne, bo współpraca z mentorem powinna być długofalowa. Oczywiście zawsze możemy zmienić mentora, ale wrócimy do punktu wyjścia, a nowy mentor zapewne będzie miał inną wizję jak wspierać przyszłego programistę.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><s>jeśli masz taki roadmap, to zaprezentuj go proszę w artykule, możesz zmienić informacje zawarte w nim, ale fajnie będzie pokazać, jak mógłby wyglądać taki plan</s></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przykład ścieżki wsparcia młodszego programisty Java. W mojej codziennej pracy wspieram przyszłych Junior Java Developer'ów. Ścieżka, którą ja stosuję składa się z czterech elementów, z tym że ostatni element jest już kompletnym programem nauki języka Java od podstaw. </p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Konsultacja z mentorem.<ul><li>Tu dowiaduję się czego potrzebuje dana osoba i jak mogę jej pomóc.</li></ul></li><li>Weryfikacja CV i portfolio.<ul><li>Pozwala, to sprawdzić jak światu prezentuje się dana osoba.</li></ul></li><li>Symulacja rozmowy kwalifikacyjnej.<ul><li>Ten krok pozwala skonfrontować się danej osobie z rzeczywistością programisty.</li></ul></li><li>Przebranżowienie Java.<ul><li>Wprowadzenie do języka Java.</li><li>Programowanie obiektowe.</li><li>Systemy kontroli wersji Git.</li><li>Testowanie oprogramowania – TDD.</li><li>Wzorce Projektowe.</li><li>Bazy danych – SQL.</li><li>Bazy danych – programowanie (JDBC, Hibernate).</li><li>Usługi sieciowe dla protokołu HTTP (REST, SOAP).</li><li>Podstawy serwerów – teoria, praktyka.</li><li>Podstawy HTML, CSS i JavaScript.</li><li>Java EE – technologia JSP i Servlet'y.</li><li>Spring Framework – Web MVC, Data JPA, Security.</li><li>Metodyka Scrum (teoria).</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Współpraca z mentorem.</strong> Moim zdaniem mentor powinien mieć przygotowany ""program"" mentoringu/nauczania i/lub przygotowaną ścieżkę rozwoju dla młodszego programisty. Nie musi, to być w formie ""oferty sprzedażowej"" z dokładnym rozpisaniem, co w danym dniu będzie omawiane. Wystarczy roadmap ze ścieżką rozwoju, dodatkowo lista tematów, w których specjalizuje się mentor. Wybierając mentora w większości przypadków chodzi nam o indywidualne, spersonalizowane podejście, a nie kolejną ""ofertę"". W odróżnieniu od sformalizowanej i zorganizowanej nauki, takiej jak np. Bootcamp, współpraca z mentorem raczej nie będzie wiązała się z podpisywaniem umowy cywilnoprawnej, daje, to większą elastyczność zarówno po stronie ucznia jak i mentora.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Jak przygotować się do pierwszego spotkania?</strong> Pierwsze spotkanie warto poprzedzić wymianą pytań i informacji z mentorem np. za pośrednictwem wiadomości e-mail lub komunikatora, takiego jak Messenger, Skype. Należy ustalić stawkę za godzinę pracy mentora oraz czy będzie potrzebna nam np. faktura. Na tym właśnie etapie powinniśmy zapytać o ""program"" mentoringu/nauczania, ustalić tematy, które nas interesują, przedstawić projekt z naszego portfolio, który chcielibyśmy zweryfikować, omówić.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W obecnej sytuacji w grę wchodzi raczej tylko ""spotkanie"" online, moim zdaniem, to sporo ułatwia. Możemy taką rozmowę odbyć w dogodnych dla nas warunkach, a nie np. w gwarnej kawiarni. Myślę, że warto, aby pierwsze ""spotkanie"" było w formie wideorozmowy. Oczywiście taka pierwsza rozmowa nie odpowie na wszystkie nasze pytania i nie rozwieje wszystkich naszych wątpliwości, ale na pewno pozwoli zdecydować czy chcemy nawiązać współpracę z danym mentorem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><s>Mentor może nam przekazać minimalną teorię i wskazać źródła do dalszej nauki, ale to my musimy zapoznać się z teorią. myślę, że warto pociągnąć wątek tego, czego mentor nie zrobi za nas, że to nie rola, która nauczy nas, a właśnie wskaże kierunek.</s></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mentor może nam przekazać minimalną teorię i wskazać źródła do dalszej nauki, ale to my musimy zapoznać się z teorią. Pozostając przy tym temacie należy pamiętać, że mentor, to nie to samo co korepetytor. Mentor jest naszym drogowskazem, nie rozwiąże za nas zadania programistycznego, raczej wskaże nam źródła i sposoby rozwiązań danego zagadnienia. Korepetytor może za nas rozwiązać jakiś problem programistyczny.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Plan nauki - materiał vs. czas na naukę.</strong> Jeżeli udało nam się ustalić ""program"" mentoringu/nauczania, to przyszedł czas na weryfikację naszych możliwości czasowych na realizację tego programu. Z własnego doświadczenia wiem, że trzeba sobie ustalić ile czasu jesteśmy w stanie poświęcić na naukę oraz ustalić stałe dni i godziny nauki. Proponuję również naukę podzielić na część teoretyczną i praktyczną. Tak, wiedza teoretyczna jest niezbędna. Mentor może nam przekazać minimalną teorię i wskazać źródła do dalszej nauki, ale to my musimy zapoznać się z teorią. Odnośnie teorii, to zaznaczę, że wiedzę zdobywamy z oficjalnej dokumentacji, nie uczymy się ze <a href=""http://www.stackoverflow.com"" target=""_blank"" rel=""noreferrer noopener"">www.stackoverflow.com</a>. W czasie pracy z mentorem skupiłbym się na części praktycznej pisania kodu w wybranym języku programowania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Mentor tylko dla przyszłego, młodszego programisty?</strong> W tym artykule skupiłem się na poszukiwaniu mentora przez przyszłego młodszego programistę. Nie oznacza to, że mentor może być tylko dla osoby, która dopiero zaczyna swoją przygodę z programowaniem. Moim zdaniem na każdym etapie rozwoju jako programisty (junior, mid, senior) warto korzystać ze wsparcia mentora, nie zawsze musimy go nazywać mentorem, może, to być po prostu kolega z pracy z większym doświadczeniem od nas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, poszukiwania mentora można rozpocząć w różnych miejscach, warto odpowiedzieć sobie na pytanie czy potrzebujemy mentora. Jeżeli odpowiedź na pytanie jest twierdząca i znajdziemy potencjalnych mentorów, to należy sprawdzić, co takiego dany mentor może nam zaoferować. Dobrze będzie umówić się&nbsp;na próbne zajęcia z mentorem i zweryfikować jak się nam z nim współpracuje. W kwestii współpracy, to należy zarezerwować sobie czas na samodzielną naukę (teoria i praktyka) jak również na same zajęcia z mentorem. Na koniec dodam, że z pomocy mentora może korzystać programista na dowolnym etapie rozwoju (junior, mid, senior).</p>
<!-- /wp:paragraph -->",1970-01-01
1229,"Czysta Java przejście na Spring - CRUD: Klasy -> Dependency Injection",,2020-10-27
1231,"Czysta Java przejście na Spring - Web: Servlet -> Controller",,1970-01-01
1234,"Czysta Java przejście na Maven",,1970-01-01
1236,"Czysta Java przejście na Gradle",,1970-01-01
1238,"Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja","<!-- wp:paragraph -->
<p>W tym artykule postaram się pokazać jak unikać błędu, który popełniają programiści podczas pisania kodu aplikacji, nawet tego najmniejszego i najprostszego kodu. Błędem tym jest brak zastanowienia się, co tak na prawdę chcemy kodować. Samemu nieraz popełniłem ten błąd. Możesz mi wierzyć, albo i nie, ale nawet nad jednym, prostym fragmentem kodu można zmarnować wiele godzin, jeżeli wcześniej nie zastanowimy się, co on ma robić.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wszystko zaczyna się od zadania, pomysłu, który mamy do wykonania zimplementowania. Pokażę sposób, który stosuję na co dzień podczas tworzenia oprogramowania. Praktyczne zastosowanie poniższego sposobu można znaleźć w moim artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2023/02/01/od-czego-zaczac-tworzenie-aplikacji-przestan-pisac-kod-zrodlowy-praktyczny-przyklad/"" data-type=""post"" data-id=""2446"" target=""_blank"">Od czego zacząć tworzenie aplikacji? – Przestań pisać kod źródłowy – praktyczny przykład</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Sposób, który stosuję składa się z trzech prostych kroków:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><strong>Analiza</strong> - pozwala głębiej zastanowić się nad tym, co zamierzamy kodować oraz spisać naszą wizję tworzonego oprogramowania, aplikacji.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Projekt</strong> - systematyzuje i dokumentuje informacje uzyskane podczas procesu analizy, które później można wykorzystać do implementacji.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Implementacja</strong> - poprzedzona analizą i projektem nie jest już chaotycznym zbiorem kodu oprogramowania, który trzeba często modyfikować.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center""><em>Nie należy zrażać się&nbsp;widząc takie pojęcia jak analiza i projekt, bo pod tymi pojęciami w moim przypadku kryją się proste metody i rozwiązania.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 1. Analiza - Dlaczego analiza jest taka ważna?</strong> Dzięki niej możemy spojrzeć na tworzone oprogramowanie z szerszej perspektywy, co pozwoli nam dokładniej zrozumieć tworzony kod. Analiza pozwala nam dowiedzieć się, co tak naprawdę ma realizować tworzone oprogramowanie. Przeprowadzam analizę tak, aby nie utonąć w morzu ""dokumentacji"". Która, to z założenia jest nieaktualna w momencie jej tworzenia, bo jedyną stałą w programowaniu jest zmiana kodu. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dla analizy również mam kilka kroków do wykonania:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Opis w formie tekstu, spisanego np. w notatniku.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Wybranie rzeczowników i czasowników z opisu.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Karty CRC - Class Responsibility Collaborators.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Ad. 2. Projekt - Nawet najprostszy projekt </strong>pozwala uniknąć dużej ilości <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Refaktoryzacja"" target=""_blank"">refaktoryzacji</a> kodu. Oczywiście współczesne <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Integrated_development_environment"" target=""_blank"">IDE</a> (Integrated Development Environment) wspiera i automatyzuje proces refaktoryzacji, ale po, co dodawać sobie więcej pracy? Dodatkowo projekt pokaże zależności między elementami tworzonego oprogramowania, co pozwoli z wyprzedzeniem np. podzielić aplikację na warstwy i/lub moduły.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dla projektu również mam kilka kroków do wykonania:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Diagram klas w UML.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Makiety GUI.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Lista end-point'ów REST i/lub API.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Ad. 3. Implementacja - W trakcie implementacji używam</strong> <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"">TDD</a> (Test Driven Development) prawie dla całego kodu. Dlaczego TDD? Na początku, jak zaczynamy implementować metody z naszego diagramu klas UML, to nie wiemy jak dokładnie będzie działać dana metoda. Wtedy należy zadeklarować metodę, a implementację dodawać podczas tworzenia i rozwijania testów jednostkowych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center""><em>To tyle teorii, teraz czas na praktyczne wykorzystanie przedstawionej wiedzy. Mógłbym napisać dużo więcej teorii, ale chcę pokazać, że proces jest na prawdę&nbsp;bardzo prosty, a jego praktyczne zastosowanie daje bardzo dobre rezultaty.</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator {""opacity"":""css"",""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-css-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""align"":""center"",""style"":{""typography"":{""fontSize"":24}}} -->
<p class=""has-text-align-center"" style=""font-size:24px""><strong>Praktyczne wykorzystanie trzech kroków:</strong><br><strong>Analiza, Projekt i Implementacja.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zacznijmy od początku, dostajemy ""proste"" zadanie, <strong>zaimplementowanie systemu do przechowywania notatek</strong>. Należy pamiętać, jeżeli zadanie byłoby ""proste"", to można by było rozwiązać je za pomocą kreatora. Każde nawet proste zadnie możemy sobie skomplikować nie rozkładając go na czynniki.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Analiza - Opis w formie tekstu:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>System umożliwia przechowywanie notatek, które użytkownik tworzy, notatka zawiera informacje o autorze oraz dacie utworzenia i ostatniej modyfikacji. Każda notatka posiada tytuł oraz treść, którą można modyfikować. Jeżeli użytkownik ma więcej notatek, to można wyświetlić je w postaci listy notatek. Notatki można usunąć oraz wyświetlić ich zawartość. Autor może podać swoje imię i nazwisko jak również pseudonim artystyczny.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Analiza - Wybranie rzeczowników i czasowników z opisu:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego z tekstu wybieramy tylko rzeczowniki i czasowniki? Ponieważ, to pozwoli nam zidentyfikować i określić przyszłe klasy języka Java (rzeczowniki) oraz metody w klasach Java (czasowniki). Docelowo wszystkie nazwy klas i metod będą w kodzie zapisane po angielsku dla ułatwienia na czas analizy pozostawiam polskie wyrazy.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Rzeczowniki (przyszłe klasy Java)</th></tr></thead><tbody><tr><td>System, Notatka, Data utworzenia notatki, Data modyfikacji notatki, Tytuł notatki, Treść notatki, Autor, Imię autora, Nazwisko autora, Pseudonim autora</td></tr></tbody></table><figcaption class=""wp-element-caption"">Lista rzeczowników zidentyfikowanych w opisie</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Czasowniki (przyszłe metody w klasach Java)</th></tr></thead><tbody><tr><td>Przechowywanie, Tworzenie, Modyfikacja, Wyświetlenie listy, Wyświetlenie zawartości</td></tr></tbody></table><figcaption class=""wp-element-caption"">Lista czasowników zidentyfikowanych w opisie</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Powyższa lista może wydawać się banalnie prosta, ale chodzi o przedstawienie idei, za pomocą, której możemy przeanalizować dowolnie duży, złożony system informatyczny.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Analiza - Karty CRC - Class Responsibility Collaborators:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim przystąpimy do tworzenia kart CRC muszę powiedzieć o dwóch ważnych relacjach pomiędzy klasami. W telegraficznym skrócie:<br>- <strong>Pierwsza relacja, to IS-A (jest)</strong> - dziedziczenie (inheritance) oznacza, to że Car IS-A Vehicle - Samochód jest Pojazdem.<br>- <strong>Druga relacja, to HAS-A (ma)</strong> - kompozycja (composition) oznacza, to że Car HAS-A Engine - Samochód ma Silnik.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Więcej informacji <a rel=""noreferrer noopener"" href=""https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php"" target=""_blank"">Inheritance (IS-A) vs. Composition (HAS-A) Relationship</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego piszę o tych relacjach właśnie teraz? Ponieważ pewne rzeczowniki nie będą oddzielnymi klasami, ale ich składowymi, a niektóre kasy będą bardziej ogólnym przypadkiem innych, np.:<br>- <strong>Autor IS-A (jest) Użytkownik(iem)</strong>,<br>- <strong>Notatka HAS-A (ma) Autor(a), Treść, itp</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Karty CRC (Class, Responsibility, Collaborators) służą do przedstawienia dla klasy (Class) jej odpowiedzialności/zależności (Responsibilities) oraz powiązań z innymi klasami w ramach tworzonego systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""hasFixedLayout"":true} -->
<figure class=""wp-block-table""><table class=""has-fixed-layout""><tbody><tr><td><strong>Class:</strong></td><td><em>Notatka</em></td></tr><tr><td><strong>Responsibility</strong></td><td><strong>Collaborators</strong></td></tr><tr><td>Przechowuje (HAS-A) dane notatki:<br>- Tytuł, Treść, Autor</td><td>Autor (klasa)</td></tr></tbody></table><figcaption class=""wp-element-caption"">Tabela z kartą CRC dla klasy Notatka</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:table {""hasFixedLayout"":true} -->
<figure class=""wp-block-table""><table class=""has-fixed-layout""><tbody><tr><td><strong>Class:</strong></td><td><em>Autor (Użytkownik)</em></td></tr><tr><td><strong>Responsibility</strong></td><td><strong>Collaborators</strong></td></tr><tr><td>Przechowuje (HAS-A) dane autora:<br>- Imię, Nazwisko, Pseudonim</td><td>Notatka (klasa)</td></tr></tbody></table><figcaption class=""wp-element-caption"">Tabela z kartą CRC dla klasy Autor</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Projekt - Diagram klas w UML</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na podstawie analizy, a konkretnie kart CRC stworzymy <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Diagram_klas"" target=""_blank"">diagram klas</a> w języku <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Unified_Modeling_Language"" target=""_blank"">UML</a>. Oczywiście w tym przypadku będzie, to bardzo prosty diagram, ale tak samo jak na etapie analizy chodzi o przedstawienie idei, za pomocą, której możemy stworzyć diagram klas (projekt) tworzonego systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do tworzenia diagramów w języku UML używam darmowego narzędzia - <a rel=""noreferrer noopener"" href=""https://www.diagrams.net"" target=""_blank"">https://www.diagrams.net</a>, dostępnego online, bez konieczności instalacji - jest również dostępna aplikacja typu desktop.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1287,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/11/Note-Author_Class-Diagram_UML.png"" target=""_blank"" rel=""noopener noreferrer""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/11/Note-Author_Class-Diagram_UML.png"" alt=""Note - Author, Class Diagram UML"" class=""wp-image-1287""/></a><figcaption class=""wp-element-caption"">Note - Author, Class Diagram UML</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Elementy z diagramu UML w telegraficznym skrócie:<br>1. <strong>Note</strong> - nazwa klasy,<br>2. <strong>+ title: String</strong> - znak <strong>+</strong> (plus), zmienna publiczna; <strong>title</strong> - nazwa zmiennej; <strong>String</strong> - typ zmiennej,<br>3. Połączenie, relacja między klasami <strong>&lt;&gt;---</strong> agregacja.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Projekt - Makiety GUI</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jeżeli tworzymy interfejs użytkownika dla naszej aplikacji, to należy stworzyć makiety GUI nawet, jeżeli są, to bardzo proste makiety GUI. Interfejs użytkownika może być dla aplikacji web'owej i/lub aplikacji desktop. Przez makiety GUI rozumiem, zobrazowanie w formie graficznej elementów interfejsu użytkownika takich jak np.: przyciski, etykiety, pola do wprowadzania danych itp.. Dlaczego warto tworzyć nawet najprostsze makiety GUI takie, jak poniższe? Takie makiety pozwolą zrozumieć, przybliżyć biznesowy aspekt tworzonego systemu oraz będą dobrą bazą do tworzenia kolejnych makiet.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1305,""sizeSlug"":""full""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/11/Notes-list-GUI-Mockups-UML__.png"" alt=""Lista Notatek - Makiety GUI w UML"" class=""wp-image-1305""/><figcaption class=""wp-element-caption"">Lista Notatek - Makiety GUI w UML</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1303,""sizeSlug"":""full""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/11/Add_Edit-Note-GUI-Mockups.png"" alt=""Dodawanie/Edycja Notatki - Makiety GUI w UML"" class=""wp-image-1303""/><figcaption class=""wp-element-caption"">Dodawanie/Edycja Notatki - Makiety GUI w UML</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Projekt - Lista end-point’ów REST i/lub API</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego przed przystąpieniem do implementacji/programowania systemu należy ustalić end-point'y i/lub API? Wypisanie takich elementów pozwoli nam zobaczyć szerszy kontekst, obraz tworzonego systemu. Co, to jest w ogóle end-point? End-point jest, to punkt styku, komunikacji między różnymi elementami oprogramowania i/lub systemów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Uwaga!</strong> Poniższy opis jest niewystarczający, dodatkowy opis wybiega poza ten artykuł. Należy uzupełnić wiedzę o takie elementy jak: 1. <a rel=""noreferrer noopener"" href=""https://rapidapi.com/blog/api-glossary/endpoint/"" target=""_blank"">Należy odróżnić end-point od API</a>, 2. Co to jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Representational_state_transfer"" target=""_blank"">REST</a>? 3. Co to jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/API"" target=""_blank"">API</a>? 3. Protokół <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"" target=""_blank"">HTTP</a>. 4. Usługi sieciowe - <a href=""https://en.wikipedia.org/wiki/Web_service"">WebService</a>. 5. <a href=""https://en.wikipedia.org/wiki/Web_application"">Aplikacja Web</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>End-point powinien być udokumentowany i dobrze znany osobom, które z niego korzystają. Jest, to komunikacja typu żądanie/odpowiedź (request/response), która odbywa się za pośrednictwem adresu URL, pod którym dostępna jest funkcjonalność systemu. W większości przypadków jest, to komunikacja typu klient-serwer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dla aplikacji web z interfejsem użytkownika w postaci stron html będzie, to zbiór adresów URL ze stronami do wyświetlenia użytkownikowi. Natomiast dla aplikacji REST będzie, to zbiór adresów URL (konkretnie URI), które zwracają dane mniej czytelne dla zwykłego użytkownika, np. w formacie JSON. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aplikacja web z GUI służy do komunikacji człowiek-komputer, a aplikacja REST służy do komunikacji komputer-komputer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniższa tabela prezentuje adresy URL, pod którymi będą dostępne strony w ramach aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Działanie</th><th>Web URL</th><th>HTTP Method</th><th>HTML Page</th></tr></thead><tbody><tr><td>Lista notatek</td><td>/notes</td><td>GET</td><td>notes.html</td></tr><tr><td>Dodaj notatkę</td><td>/notes/add</td><td>POST</td><td>manage-note.html</td></tr><tr><td>Szczegóły notatki</td><td>/notes/details</td><td>GET</td><td>manage-note.html</td></tr><tr><td>Edycja notatki</td><td>/notes/edit</td><td>POST</td><td>manage-note.html</td></tr><tr><td>Usunięcie notatki</td><td>/notes/delete</td><td>POST</td><td>notes.html</td></tr></tbody></table><figcaption class=""wp-element-caption"">Lista adresów URL dla stron HTML.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>    </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego używam tylko metod GET i POST protokołu HTTP? Ponieważ <a href=""https://en.wikipedia.org/wiki/Form_(HTML)"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Form_(HTML)"" target=""_blank"" rel=""noreferrer noopener"">formularz HTML</a> obsługuje właśnie tylko te dwie metody GET i POST. Co mam na myśli pisząc formularz HTML? Wizualnie jest, to zbiór elementów HTML umożliwiających wprowadzanie danych takich jak pole tekstowe, przycisk wysyłający dane, przykładem może być formularz logowania, zakładania konta lub umożliwiający dodanie postu na Facebook. Technicznie umożliwia komunikację, wysyłanie wprowadzonych danych na serwer celem ich przetworzenia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniższa tabela prezentuje end-point'y zgodne z architekturą <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Representational_state_transfer"" target=""_blank"">REST</a>, która działa w oparciu o <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Metody_HTTP"" target=""_blank"">metody protokołu HTTP</a>, np.: GET, POST.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Działanie</th><th>REST</th><th>HTTP Method</th></tr></thead><tbody><tr><td>Lista notatek</td><td>/api/notes</td><td>GET</td></tr><tr><td>Dodaj notatkę</td><td>/api/notes + (body/payload)</td><td>POST</td></tr><tr><td>Szczegóły notatki</td><td>/api/notes/{id}</td><td>GET</td></tr><tr><td>Edycja notatki</td><td>/api/notes + (body/payload)</td><td>PUT</td></tr><tr><td>Usunięcie notatki</td><td>/api/notes/{id}</td><td>DELETE</td></tr></tbody></table><figcaption class=""wp-element-caption"">Lista end-point'ów REST API.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Implementacja</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przyszedł czas na upragnioną implementację, zanim do tego przejdziemy, kilka słów wyjaśnienia. <em>Tak, tak znów odwlekamy implementację, ale im więcej czasu poświęcimy na analizę i projekt tym więcej błędów, nieporozumień unikniemy podczas implementacji.</em> Jak widać sam proces implementacji jest poprzedzony słownym opisem, który w tym przypadku składa się z ""tysiąca słów"". Moim zdaniem pokazuje, to jak wiele elementów poprzedza sam proces pisania kodu źródłowego aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Zawsze powtarzam, że zanim przystąpimy do kodowania musimy zrozumieć, co tak na prawdę mamy do zakodowania. Żeby zrozumieć tworzony system musimy zapytać, uzgodnić szczegóły z osobą i/lub firmą, która zleca nam stworzenie systemu.</strong> Pozwoli, to nam uniknąć wielu nieporozumień, nieprzyjemnych sytuacji oraz wielu godzin refaktorowania i/lub przepisywania tworzonego systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Implementację wykonujemy w naszym ulubionym środowisku programistycznym np. <a rel=""noreferrer noopener"" href=""https://www.jetbrains.com/idea/"" target=""_blank"">IntelliJ IDEA</a>. Mając przygotowany diagram klas, po prostu tworzymy klasy oraz ich zawartość zgodnie z elementami na diagramie. Dodajemy pola w klasie oraz metody. <em>W tym miejscu gorąco zachęcam do skorzystania z techniki <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"">TDD</a>, czyli najpierw piszemy klasę testową, a potem implementację tworzonej metody.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, implementacja nawet najprostszego systemu polecam rozpocząć od analizy, następnie stworzyć projekt, a dopiero na samym końcu zabrać się za kodowanie, najlepiej zgodnie z <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"">TDD</a>. Powyższy przykład pozwala wyrobić nam dobry nawyk, który zaowocuje w przyszłości.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2020-11-17
1353,"Moja praca zdalna jako mentor Junior Java Developer'a","<!-- wp:paragraph -->
<p>Moja praca jako mentor dla Junior Java Developer od początku była pracą zdalną. Nie miałem własnego biura w powszechnym znaczeniu tego słowa. Moje biuro było w mojej głowie. Od zawsze dla mnie ludzie są najważniejsi, technologia i fizyczna lokalizacja to tylko narzędzie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pracę zdalną mogę podzielić na dwa okresy, przed i po pandemii. Przed pandemią z moimi klientami, uczniami spotykaliśmy się osobiście, face-to-face. W czasie pandemii cała moja praca przeniosła się online i od kwietnia 2020 r. pracuję w stu procentach zdalnie. W tym artykule przedstawię różnicę między pracą face-to-face, a pracą online z moimi klientami, uczniami.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zacznijmy od początku. Jak większość osób z IT również pracowałem w biurze. W sumie w IT jako konsultant informatyczny pracuję od 2006 r., głównie język Java - prawie 14 lat. Praca zdalna zaczęła się u mnie w 2016 r., czyli po 10 latach pracy. Na początku było to 1-2 dni pracy zdalnej, a później proporcje odwróciły się na 1-2 pracy w biurze. Natomiast od końca 2018 r. pracuję tylko zdalnie jako mentor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jak wyglądały początki mojej pracy zdalnej? Pierwszą pracę zdalną umożliwiła mi praca dla zagranicznej, Duńskiej firmy, gdzie z założenia pracowałem dla firmy o odległej lokalizacji. To tutaj pracowałem 1-2 dni zdalnie. Następnie pracowałem w trybie 1-2 dni w biurze dla firmy ze Stanów Zjednoczonych, a konkretnie jej oddziału z Wielkiej Brytanii. Tym samym naturalne było dla mnie przejście na model pracy w stu procentach zdalnej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przedstawię głównie pracę zdalną jako mentor. O pracy zdalnej w IT powstało już wiele artykułów. Moja praca zdalna w IT była podobna do pracy innych konsultantów informatycznych i/lub programistów dowolnego języka programowania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Korzyści pracy face-to-face z moimi klientami, uczniami</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Możliwość budowania relacji,</li><li>Łatwość w pokazywaniu różnych rzeczy w kodzie,</li><li>Szybsza realizacja programu nauczania,</li><li>Sprawne rozwiązywanie problemów technicznych.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Korzyści pracy online z moimi klientami, uczniami</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Więcej czasu na naukę (brak dojazdów),</li><li>Brak bariery psychologicznej jak w pracy face-to-face, </li><li>Większe możliwości techniczne.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Jako mentor pracowałem zdalnie w różnych lokalizacjach. Zaczynając od pracy w domu u klienta, ucznia poprzez pracę w kawiarni, a kończąc na pracy w wynajętym biurze coworking'owym, nie wspominając o pracy z domu. Każda lokalizacja, to inne wyzwania, udogodnienia, ale również problemy. Praca u klienta, ucznia w domu wiązała się z dojazdami, tak samo jak praca w kawiarni, ale pracując z kawiarni mogłem w jednej lokalizacji spotkać się z wieloma klientami, uczniami. Coworking miałem niedaleko domu więc chodziłem na pieszo, pracując z domu chodziłem do innego pokoju.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Każdy z klientów, uczniów miał różne wymagania, co do lokalizacji w zależności czy łatwiej uczył się w ciszy i spokoju - praca w domu u klienta, ucznia. Niektórzy woleli kawiarnię ze względu na łatwy dojazd po pracy, kawiarniany gwar nie przeszkadzał nam w pracy, nauka i projekty szły zgodnie z planem. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Godziny pracy z moimi klientami, uczniami były bardzo różne nie raz zaczynałem zajęcia o 7 rano, a czasem ostatnie zajęcia kończyły się o 22 wieczorem. Zdarzało się, że miałem zajęte weekendy, ale za, to miałem ""weekend"", wolne dni w środku tygodnia. W ogólnym rozrachunku, to lepiej wychodziła elastyczna praca zdalna niż zadaniowe ""od do"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wszystko zmieniło się w czasie pandemii, gdzie wszyscy moi klienci przenieśli się na pracę zdalną. Również w związku z tą sytuacją zwiększyła mi się znacząco liczba klientów, uczniów. Teraz więcej osób miało czas np. ten który poświęcali na podróż do pracy i tym samym chcieli wykorzystać go na naukę programowania w języku Java. W tym czasie, kiedy można było, to skorzystałem z pracy zdalnej w różnych miejscach w Polsce.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Łatwo jest się przyzwyczaić do pracy zdalnej i popaść w rutynę, która może spowodować obniżenie wydajności. W moim przypadku ciężko mówić o rutynie mając w miesiącu od piętnastu do dwudziestu klientów, uczniów, gdzie każdy z nich jest inny, to akurat bardzo lubię w mojej pracy. Współpraca z moimi klientami, uczniami dotyczy bardzo różnych spraw. Głównie zajmuję się zmianą zawodu na Junior Java Developer'a, ale również prowadzeniem niewielkich projektów komercyjnych, np. integracja Amazon API z e-nadawca (API Poczty Polskiej).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Wady pracy face-to-face z moimi klientami, uczniami</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Nieplanowane odwoływanie zajęć,</li><li>Dojazd do klienta.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Wady pracy online z moimi klientami, uczniami</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Większość osób ma wyłączone kamery, nie widać osoby,</li><li>Ciężko jest zobaczyć czy uczeń już ma problem z zadaniem czy zastanawia się nad rozwiązaniem.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Praca zdalna jak każda inna ma swoje wady i zalety. Dla mnie główną wadą był brak kontaktu face to face z moimi klientami, uczniami, nie łatwo buduje się relacje w świecie wirtualnym. Największe zalety pracy zdalnej dla mnie, to elastyczne godziny pracy oraz większa swoboda klientów, uczniów w przyswajaniu przekazywanej wiedzy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na&nbsp;<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2021-02-17
1387,"Podstawy obsługi komputera, poważnie? - Junior Java Developer","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zaskakujący tytuł posta? Niestety rzeczywistość jest jeszcze bardziej zaskakująca! Długo zastanawiałem się czy napisać ten post i jak go napisać tak, aby nikt nie poczuł się urażony tym, co chcę przekazać. Krótko i na temat, przyszły Junior Java Developer musi znać podstawy obsługi komputera.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">O tym, że <a href=""https://www.juniorjavadeveloper.pl/2020/01/10/co-jest-potrzebne-do-programowania-w-jezyku-java/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/01/10/co-jest-potrzebne-do-programowania-w-jezyku-java/"">sam język Java, to za mało</a> pisałem już wcześniej, teraz dodam, że podstawy obsługi komputera, to niezbędna podstawa. Pisałem również o tym, <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/10/co-jest-potrzebne-do-programowania-w-jezyku-java/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/01/10/co-jest-potrzebne-do-programowania-w-jezyku-java/"" target=""_blank"">co jest potrzebne do programowania</a>. Dlaczego podstawy obsługi komputera są takie ważne? Ponieważ naturalnym, jedynym i używanym na co dzień środowiskiem pracy programisty jest komputer, a dokładniej, to system operacyjny, na którym pracuje programista. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Moim zdaniem każdy przyszły młodszy programista Java powinien znać środowisko, w którym będzie na co dzień pracował. Moim zdaniem problemy wynikają głównie z  braku wiedzy i umiejętności w obsłudze komputera, np.:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Brak znajomość systemu operacyjnego, na którym pracujemy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Brak znajomość podstawowych skrótów klawiszowych.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Strach przed używaniem terminala/konsoli/wiersza poleceń.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Znajomość systemu operacyjnego, na którym pracujemy</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Bez tego bardzo ciężko będzie programować i nie chodzi mi tu o znajomość technicznych elementów systemu jak np. współdzielenie wątków czy rodzaj systemu plików. <span style=""text-decoration: underline;"">Chodzi mi o nawigację po systemie plików z użyciem eksploratora plików</span>, należy wiedzieć, gdzie jest główny dysk, gdzie mamy zainstalowane oprogramowanie i gdzie jest katalog domowy użytkownika. <span style=""text-decoration: underline;"">Zmienne środowiskowe</span>, które są ustawiane dla narzędzi programistycznych i które są odczytywane przez oprogramowanie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Nawigacja po systemie plików</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Piszę tu o nawigacji z wykorzystaniem graficznego narzędzia do przeglądania plików i katalogów. Należy wiedzieć jak wyszukiwać pliki i katalogi, przechodzić pomiędzy katalogami, tworzyć, edytować i usuwać pliki. Do czego taka wiedza? Np. pakiety w języku Java, to katalogi, a klasy, to pliki. Jeżeli będziemy mieli niestandardowy błąd z plikiem, to musimy wiedzieć jak go odnaleźć i naprawić błąd. Niestandardowe problemu występują zadziwiająco często. Większość narzędzi dla programistów można zainstalować z kreatora bądź też po prostu rozpakować w wybranej przez nas lokalizacji. Preferuję rozpakowanie narzędzi i uruchamianie ich ręcznie z wiersza poleceń. Należy wiedzieć, gdzie dane narzędzie zostało zainstalowane, aby móc je uruchomić i/lub znaleźć pliki konfiguracyjne, które należy samemu zmienić. Będąc przy tym temacie, to rekomenduję instalacje/rozpakowanie narzędzi w jednym katalogu np. dev na głównym dysku, odradzam umieszczania wszystkiego na pulpicie. Moja struktura katalogów to:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>~/dev - główny katalog dla development'u, </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>~/dev/install - wersje instalacyjne narzędzi - offline, </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>~/dev/docs - dokumentacja, książki - offline.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Zmienne środowiskowe</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">W telegraficznym skrócie, to informacje o położeniu zainstalowanych narzędzi. Na przykładzie narzędzia IntellJ przedstawię jak wiele zmiennych musielibyśmy samemu utworzyć, gdyby nie paczka z IntelliJ. Zapytasz zapewne, to po co mi wiedza o zmiennych środowiskowych? Potrzebna jest do niestandardowej konfiguracji wersji różnych narzędzi, a taka konfiguracja jest bardzo częsta. Sam IntelliJ zawiera wbudowaną wirtualną maszynę Java (JVM), narzędzia Maven i Gradle, gdyby ich nie było, to bez dodatkowej instalacji niemożliwe było by programowanie i budowanie projektów opartych o język Java. Bez tego programista musiałby samemu ręcznie ustawić zmienne środowiskowe dla Java (JAVA_HOME), Maven (np. MAVEN_HOME), Gradle (np. GRADLE_HOME). Do tego dochodzi np. Spring Boot, gdzie mamy wbudowany serwer Tomcat, bez tego trzeba ustawić TOMCAT_HOME. Przykład zmiennych środowiskowych:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>JAVA_HOME=~/dev/java/jdk/11.0.9-zulu</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>MAVEN_HOME=~/dev/tools/maven/3.6.1</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Znajomość podstawowych skrótów klawiszowych</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Praca bez skrótów klawiszowych jest możliwa, ale bardzo uciążliwa. Narzędzie IntelliJ kładzie ogromny nacisk na używanie skrótów klawiszowych w IntelliJ prawie wszystko można wykonać bez używania myszki tylko korzystając ze skrótów klawiszowych. W tym miejscu piszę o tak podstawowych skrótach jak CTRL+C - kopiowanie plików i/lub tekstu, CTRL+F - wyszukiwanie plików i/lub tekstu. Czasem zdarza się, że nie można użyć myszki, a trzeba skopiować jakiś tekst lub plik, wtedy pomocne są skróty. W IntelliJ przydatnym skrótem jest ""Double Shift"" - wyszukaj wszędzie lub ALT+Insert - wygeneruj kod. Każdy przyszły młodszy programista Java musi znać skróty z ""edytora tekstu/pakietu office"". </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading""><em>Przydatne skróty klawiszowe</em></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Windows - <a rel=""noreferrer noopener"" href=""https://support.microsoft.com/en-us/windows/keyboard-shortcuts-in-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec"" target=""_blank"">https://support.microsoft.com/en-us/windows/keyboard-shortcuts-in-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">MacOS - <a rel=""noreferrer noopener"" href=""https://support.apple.com/en-us/HT201236"" target=""_blank"">https://support.apple.com/en-us/HT201236</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Linux:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Terminal - <a rel=""noreferrer noopener"" href=""https://www.redhat.com/sysadmin/top-10-shortcuts"" target=""_blank"">https://www.redhat.com/sysadmin/top-10-shortcuts</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Gnome - <a rel=""noreferrer noopener"" href=""https://help.gnome.org/users/evince/stable/shortcuts.html.en"" target=""_blank"">https://help.gnome.org/users/evince/stable/shortcuts.html.en</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>KDE - <a rel=""noreferrer noopener"" href=""https://docs.kde.org/trunk5/en/applications/fundamentals/kbd.html"" target=""_blank"">https://docs.kde.org/trunk5/en/applications/fundamentals/kbd.html</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">IntelliJ - <a rel=""noreferrer noopener"" href=""https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf"" target=""_blank"">https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przeglądarki internetowe - <a rel=""noreferrer noopener"" href=""https://www.howtogeek.com/114518/47-keyboard-shortcuts-that-work-in-all-web-browsers/"" target=""_blank"">https://www.howtogeek.com/114518/47-keyboard-shortcuts-that-work-in-all-web-browsers/</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Pakiet biurowy - Open Office - <a href=""https://wiki.openoffice.org/wiki/Documentation/OOoAuthors_User_Manual/Writer_Guide/Shortcut_keys_for_OpenOffice.org_Writer"" target=""_blank"" rel=""noreferrer noopener"">https://wiki.openoffice.org/wiki/Documentation/OOoAuthors_User_Manual/Writer_Guide/Shortcut_keys_for_OpenOffice.org_Writer</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Strach przed używaniem terminala/konsoli/wiersza poleceń</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na samym początku nadmienię, że nie wyobrażam sobie pracy bez wiersza poleceń. Większości konfiguracji dla zainstalowanych narzędzi programistycznych można wykonać tylko i wyłącznie za pomocą terminala/konsoli/wiersza poleceń. Przyszły młodszy programista Java powinien jak najszybciej oswajać się i zaznajomić z wierszem poleceń, bo będzie on towarzyszyć przez większość jego pracy. Do czego będzie potrzebny terminal? Do uruchomienia aplikacji napisanej w języku Java, do uruchomienia serwera aplikacyjnego w wybranym przez nas trybie i konfiguracji. Przykładem może być aplikacja napisana w Spring Boot, będzie można ją uruchomić z poziomu IntelliJ, ale często jest potrzebna ""większa kontrola i/lub niestandardowe uruchomienie"", wtedy skorzystamy z wiersza poleceń. Większość baz danych będzie uruchamiana z terminala. Ja, pracując z np. aplikacją trójwarstwową napisaną w Java za pomocą wiersza poleceń uruchamiam serwer aplikacyjny Tomcat, bazę danych PostgreSQL i narzędzie Gradle, które umieszcza aplikację na serwerze Tomcat. Często, żeby dodać nową funkcję do istniejącej aplikacji musimy uruchomić kilka modułów, bazę danych, serwer aplikacyjny itd.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując, pracując jako programista, który tworzy aplikacje/systemy będziemy musieli znać bardzo dobrze swoje środowisko pracy (system operacyjny, skróty klawiszowe, wiersz poleceń), nie tylko od strony użytkownika np. systemu operacyjnego, ale również używać wiersza poleceń do konfiguracji różnych elementów własnej aplikacji jak i również narzędzi programistycznych. Wyżej opisane elementy są niezbędną podstawą. Idąc głębiej w temat zmierzamy w kierunku programisty jako tzw. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/DevOps"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/DevOps"" target=""_blank"">DevOps</a>, który zajmuje się nie tylko wytwarzaniem oprogramowania, kodowaniem, ale również wie jak uruchomić serwer, skonfigurować środowisko pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2273"">Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/brown-monkey-321552/"">Oleksandr Pidvalnyi</a> z <a href=""https://www.pexels.com/pl-pl/"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2021-03-08
1391,"Gdzie, co użyć w kodzie? Pułapka metody main() - Junior Java Developer","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapewne zastanawiasz się jak wykorzystać teoretyczną wiedzę zdobytą czy, to na kursie online czy na Bootcamp. W tym artykule postaram się wyjaśnić jak w praktyce wykorzystać tę wiedzę z języka Java, którą przyswoiliście sobie w trakcie nauki. Pokażę również jak uniknąć pułapki, którą sami na siebie ustawiamy, tą pułapką jest tworzenie całego kodu w jednej klasie z metodą main().</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">O tym, że sam język Java nie wystarczy już pisałem - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" target=""_blank"">Czy sam język Java wystarczy?</a>. Teraz pokażę na przykładzie jak przekuć zdobytą wiedzę na działający program w języku Java. Na początek użyję analogii, tak samo jak w przypadku matematyki sama znajomość wzorów i twierdzeń matematycznych nie czyni z nas matematyków-praktyków, którzy wiedzą jak zastosować np. twierdzenie Pitagorasa do wyznaczania odległości między dwoma punktami na osi współrzędnych. To samo tyczy się programowania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Cztery kluczowe elementy, z których należy zdać sobie sprawę</h2>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Nie umieszczamy całego kodu w metodzie main().</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Jedna klasa z metodą main(), to za mało.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wypiszmy w konsoli działanie aplikacji.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dobry program, aplikacja powinna mieć wiele klas i pakietów.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na przykładzie prostej implementacji kalkulatora pokaże proces przejścia z ""całego kodu w metodzie main()"" do kilku klas, które są łatwiejsze w czytaniu i utrzymaniu. Każdy z kroków omówię szczegółowo poniżej. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Kroki umożliwiające przejście z all-in-one do S.O.L.I.D.nego kodu aplikacji</h2>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przeniesienie logiki, obliczeń, algorytmów do oddzielnej klasy - CalculatorPhaseX.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Utworzenie klasy przechowującej, przenoszącej dane - CalculatorInputData.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Stworzenie klasy przechowującej zwracane wyniki - CalculatorResultData.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {""language"":""java"",""highlight"":""16-19""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight=""16-19"" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import java.util.Scanner;

public class MainCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println(""Podaj pierwszą liczbę:"");
        int a = scanner.nextInt();
        System.out.println(""Podaj drugą liczbę:"");
        int b = scanner.nextInt();

        System.out.println(""Jakie działanie wykonać?"");
        System.out.println(""1. Dodawanie"");
        int operation = scanner.nextInt();

        int result = 0;
        if (operation == 1) {
            result = a + b;
        }
        System.out.println(""Wynik działania: "" + result);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższy kod pokazuje program, aplikację, która działa jak kalkulator. Użytkownik jest proszony o podanie dwóch liczb <strong>scanner.nextInt()</strong> oraz działania <strong>scanner.nextInt()</strong>, które chce wykonać na wprowadzonych liczbach. Dla uproszczenia prezentowany kalkulator wykonuje tylko dodawanie <strong>result = a + b;</strong>, analogicznie można napisać metody dla innych działań matematycznych np. odejmowanie, mnożenie itp.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1430,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_00.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_00-1024x558.png"" alt=""Wynik działania CalculatorMain - pułapka metody main()"" class=""wp-image-1430""/></a><figcaption class=""wp-element-caption"">Wynik dzialania CalculatorMain - pulpka metody main()</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Krok 1. Przeniesienie logiki, obliczeń, algorytmów do oddzielnej klasy</h3>
<!-- /wp:heading -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">CalculatorPhaseOne</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z racji tego, że metoda main() zaczyna ""rosnąć"" trzeba zastanowić się nad wydzieleniem kodu do innej klasy. Można przyjąć, że metoda powinna mieć maksymalnie 5-6 linijek - według Uncle Bob Robert C. Martin (<a rel=""noreferrer noopener"" href=""https://helion.pl/ksiazki/czysty-kod-podrecznik-dobrego-programisty-robert-c-martin,czykov.htm"" data-type=""URL"" data-id=""https://helion.pl/ksiazki/czysty-kod-podrecznik-dobrego-programisty-robert-c-martin,czykov.htm"" target=""_blank"">Czysty kod. Podręcznik dobrego programisty</a>, <a rel=""noreferrer noopener"" href=""https://codingsans.com/blog/clean-code"" data-type=""URL"" data-id=""https://codingsans.com/blog/clean-code"" target=""_blank"">Clean Code</a>). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W takim razie zabieramy się za stworzenie nowej klasy z dedykowaną metodą dla operacji kalkulatora.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java"",""highlight"":""2""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight=""2"" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CalculatorPhaseOne {
    public static int sum(int a, int b) {
        System.out.println(""sum("" + a + "", "" + b + "")"");
        int sum = a + b;
        System.out.println(""sum="" + sum);
        return sum;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższy kod klasy <strong>CalculatorPhaseOne</strong> zawiera statyczną metodę <strong>sum(int a, int b)</strong>. Dlaczego metoda statyczna? Po to, aby nie trzeba było tworzyć obiektu, a następnie wywoływać metody <strong>CalculatorPhaseOne calculator = new CalculatorPhaseOne(); calculator.sum(1, 2);</strong>. Dzięki metodzie statycznej możemy od razu wywołać metodę na rzecz klasy <strong>CalculatorPhaseOne.sum(1, 2);</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">result = a + b;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">result = CalculatorPhaseOne.sum(a, b);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""wide"",""id"":1434,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_01-1024x558.png"" alt=""Wynik działania CalculatorMain - przeniesienie logiki, obliczeń, algorytmów do oddzielnej klasy"" class=""wp-image-1434""/></a><figcaption class=""wp-element-caption"">Wynik dzialania CalculatorMain - przeniesienie logiki, obliczen, algorytmow do oddzielnej klasy</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Krok 2. Utworzenie klasy przechowującej, przenoszącej dane</h3>
<!-- /wp:heading -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">CalculatorInputData</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przyjęło się, że metody, konstruktory, które mają więcej niż pięć parametrów są oznaką złego kodu. Dla takich metod i konstruktorów tworzy się parametry, które są własnymi klasami przechowującymi dane. Warto zastanowić się nad stosowaniem tej reguły dla dwóch i więcej parametrów. Poniższa klasa <strong>CalculatorInputData</strong> zawiera dane, które wcześniej były oddzielnie przesyłane do metody <strong>public static int sum(int a, int b)</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co daje utworzenie oddzielnej klasy jako typu parametru metody? Po pierwsze mamy porządek w parametrach metody, po drugie bez zmieniania parametrów metody możemy w łatwy sposób dodać lub usunąć dowolny element do klasy, czyli nasza metoda jest bardziej ""elastyczna"", a tym samym odporna na zmiany.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CalculatorInputData {
    private int a;
    private int b;

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public int getB() {
        return b;
    }

    public void setB(int b) {
        this.b = b;
    }

    @Override
    public String toString() {
        return ""CalculatorInputData{"" +
                ""a="" + a +
                "", b="" + b +
                '}';
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java"",""highlight"":""4""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight=""4"" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CalculatorPhaseTwo {
    public static int sum(CalculatorInputData inputData) {
        System.out.println(""sum("" + inputData + "")"");
        int sum = inputData.getA() + inputData.getB();
        System.out.println(""sum="" + sum);
        return sum;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">CalculatorInputData inputData = new CalculatorInputData();
inputData.setA(a);
inputData.setB(b);

result = CalculatorPhaseTwo.sum(inputData);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""wide"",""id"":1438,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_02.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_02-1024x558.png"" alt=""Wynik działania CalculatorMain - utworzenie klasy przechowującej, przenoszącej dane"" class=""wp-image-1438""/></a><figcaption class=""wp-element-caption"">Wynik dzialania CalculatorMain - utworzenie klasy przechowujacej, przenoszacej dane</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Krok 3. Stworzenie klasy przechowującej zwracane wyniki</h3>
<!-- /wp:heading -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">CalculatorResultData</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Skoro metody jako typ parametrów wykorzystują własne klasy, to czemu nie stworzyć własnego typu dla wartości zwracanej z metody? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co daje utworzenie oddzielnej klasy dla wartości zwracanej z metody? Po pierwsze mamy porządek w metodzie, po drugie bez zmieniania typu zwracanego metody możemy w łatwy sposób dodać lub usunąć dowolny pola w klasie zwracanej, czyli nasza metoda jest bardziej ""elastyczna"", a tym samym odporna na zmiany.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class CalculatorResultData {
    private int result;

    public int getResult() {
        return result;
    }

    public void setResult(int result) {
        this.result = result;
    }

    @Override
    public String toString() {
        return ""CalculatorResultData{"" +
                ""result="" + result +
                '}';
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">result = CalculatorPhaseTwo.sum(inputData);
CalculatorResultData resultData = new CalculatorResultData();
resultData.setResult(result);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""wide"",""id"":1440,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_03.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_03-1024x559.png"" alt=""Wynik działania CalculatorMain - stworzenie klasy przechowującej zwracane wyniki"" class=""wp-image-1440""/></a><figcaption class=""wp-element-caption"">Wynik dzialania CalculatorMain - stworzenie klasy przechowujacej zwracane wyniki</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dodatkowo na każdym, etapie nasza aplikacja powinna ""informować nas, co robi"", czyli wypisywać, logować na konsoli i/lub do pliku swoje działanie. Zalecam wypisywanie, logowanie wejścia i wyjścia dla każdej metody publicznej w klasach. Dla uproszczenia logowanie odbywa się na konsolę za pomocą <strong>System.out.println(""sum("" + a + "", "" + b + "")"");</strong>, docelowo System.out trzeba będzie zastąpić wyspecjalizowaną klasą <strong>Logger</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java"",""highlight"":""2,6""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight=""2,6"" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">    public static CalculatorResultData sum(CalculatorInputData inputData) {
        System.out.println(""sum("" + inputData + "")"");
        int sum = inputData.getA() + inputData.getB();
        CalculatorResultData resultData = new CalculatorResultData();
        resultData.setResult(sum);
        System.out.println(""resultData="" + resultData);
        return resultData;
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {""align"":""wide"",""id"":1442,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_04.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/gdzie-co-uzyc-w-kodzie-pulapka-metody-main_04-1024x558.png"" alt=""Wynik działania CalculatorPhaseThree - wypisywanie, logowanie wejścia i wyjścia dla metody publicznej"" class=""wp-image-1442""/></a><figcaption class=""wp-element-caption"">Wynik dzialania CalculatorPhaseThree - wypisywanie, logowanie wejscia i wyjscia dla metody publicznej</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Podsumowanie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższy przykład pokazuje jak w prosty sposób wyjść z pułapki metody main(). Oczywiście powyższy schemat można zastosować do większych aplikacji pisanych w Java. Dla przypomnienia najważniejsze, to stworzyć więcej niż jedną klasę w aplikacji i działać zgodnie z SOLID. </p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol id=""block-47a233b5-276b-42e9-ac10-2842e875fe4c""><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przeniesienie logiki, obliczeń, algorytmów do oddzielnej klasy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Utworzenie klasy przechowującej, przenoszącej dane.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Stworzenie klasy przechowującej zwracane wyniki.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Całość kodu można znaleźć na: <a rel=""noreferrer noopener"" href=""https://github.com/juniorjavadeveloper-pl/java-what-where-in-the-code"" target=""_blank"">https://github.com/juniorjavadeveloper-pl/java-what-where-in-the-code</a></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2021-03-01
1419,"Komunikacja front-end www z back-end Java - Junior Java Developer - geek.justjoin.it","<!-- wp:paragraph -->
<p>W tym artykule postaram się wyjaśnić jak wygląda komunikacja warstwy prezentacji, np. strony www z warstwą logiki biznesowej, np. service CRUD w języku Java. Komunikacja za pomocą protokołu HTTP i metod tego protokołu (GET i POST). Przedstawię i wyjaśnię pojęcia: klient-serwer, żądanie, odpowiedź, EL (Expression Language).&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center""} -->
<div class=""wp-block-columns are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2728,""width"":320,""height"":214,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-full is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/polaromagnet-PIrouQ_A8j0-unsplash.jpg"" alt=""Komunikacja frontend www z backend w Javie - geek.justjoin.it - Mentor Junior Java Developer"" class=""wp-image-2728"" width=""320"" height=""214""/><figcaption class=""wp-element-caption"">Photo by <a href=""https://unsplash.com/@polaromagnet?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"">PolaroMagnet</a> on <a href=""https://unsplash.com/photos/PIrouQ_A8j0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"">Unsplash</a>.</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Link do całego artykułu na geek.justjoin.it - <br><a rel=""noreferrer noopener"" href=""https://geek.justjoin.it/komunikacja-frontend-www-z-backend-w-javie"" target=""_blank"">https://geek.justjoin.it/komunikacja-frontend-www-z-backend-w-javie</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Zapraszam do lektury artykułu ""Komunikacja frontend www z backend w Javie"", który napisałem dla&nbsp;<a href=""https://www.linkedin.com/company/just-join-it/"">Just Join IT</a>&nbsp;pod czujnym okiem&nbsp;<a href=""https://www.linkedin.com/in/ACoAAA0GAiMBUtDn0bnlFhYlU8qdetjGcdZmreg"">Adam Łopusiewicz</a>&nbsp;;)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Będę korzystał ze <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/reference/html/web.html"" data-type=""URL"" data-id=""https://docs.spring.io/spring-framework/docs/current/reference/html/web.html"" target=""_blank"">Spring MVC</a> i <a rel=""noreferrer noopener"" href=""https://www.thymeleaf.org"" data-type=""URL"" data-id=""https://www.thymeleaf.org"" target=""_blank"">Thymeleaf</a>, ale gruntowna wiedza nie jest wymagana dla tych technologii. Na temat warstw aplikacji pisałem w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" target=""_blank"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a>, a na temat klasy jako service CRUD pisałem w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przedstawione elementy:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Podstawy obsługi żądań protokołu HTTP - bez framework, czysty HTML.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Komunikacja klient strona www - front-end - z serwerem aplikacja Java - back-end.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Omówienie pojęć związanych z komunikacją klient-serwer - HTTP, Request, URL itp.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>Implementacja aplikacji w Spring MVC do komunikacji klient-serwer, back-end i front-end</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Narzędzia do weryfikacji komunikacji front-end z back-end.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na&nbsp;<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2021-04-22
1586,"Komunikacja front-end www z back-end Java - Junior Java Developer - JustGeek.IT - ACCEPTED","<!-- wp:paragraph -->
<p>W tym artykule postaram się wyjaśnić jak wygląda komunikacja warstwy prezentacji, np. strony www z warstwą logiki biznesowej, np. service CRUD w języku Java. Komunikacja za pomocą protokołu HTTP i metod tego protokołu (GET i POST). Przedstawię i wyjaśnię pojęcia: klient-serwer, żądanie, odpowiedź, EL (Expression Language). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Będę korzystał ze <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/reference/html/web.html"" data-type=""URL"" data-id=""https://docs.spring.io/spring-framework/docs/current/reference/html/web.html"" target=""_blank"">Spring MVC</a> i <a rel=""noreferrer noopener"" href=""https://www.thymeleaf.org"" data-type=""URL"" data-id=""https://www.thymeleaf.org"" target=""_blank"">Thymeleaf</a>, ale gruntowna wiedza nie jest wymagana dla tych technologii. Na temat warstw aplikacji pisałem w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" target=""_blank"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a>, a na temat klasy jako service CRUD pisałem w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przedstawione elementy:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Podstawy obsługi żądań protokołu HTTP - bez framework, czysty HTML.</li><li>Komunikacja klient strona www - front-end - z serwerem aplikacja Java - back-end.</li><li>Omówienie pojęć związanych z komunikacją klient-serwer - HTTP, Request, URL itp.</li><li><strong>Implementacja aplikacji w Spring MVC do komunikacji klient-serwer, back-end i front-end</strong>.</li><li>Narzędzia do weryfikacji komunikacji front-end z back-end.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>W przykładzie stworzę <a href=""https://en.wikipedia.org/wiki/Dynamic_web_page"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Dynamic_web_page"" target=""_blank"" rel=""noreferrer noopener"">dynamiczną stronę www</a>, dla której wykorzystam formularz, umożliwiający utworzenie notatki oraz wyświetlenie listy utworzonych notatek. Przykład jest bardzo prosty, ale w zupełności wystarczy do zaprezentowania komunikacji klient-serwer dla front-end i back-end.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;html>
&lt;head>
&lt;/head>
&lt;body>
&lt;h1>Create note&lt;/h1>
&lt;form action=""index.html"" method=""get"">
    &lt;input type=""text"" name=""title"">
    &lt;input type=""text"" name=""content"">
    &lt;button type=""submit"">Save&lt;/button>
&lt;/form>
&lt;/body>
&lt;/html></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia formularz www umożliwiający pobranie i przesłanie wpisanych danych - czysty kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1520,""width"":462,""height"":253,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_create-note-html.png"" alt=""Aplikacja Spring MVC - formularz www umożliwiający tworzenie nowej notatki"" class=""wp-image-1520"" width=""462"" height=""253""/><figcaption>Formularz www umozliwiajacy pobranie i przeslanie wpisanych danych - strona www.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Powyższy kod HTML pokazuje jak niewiele wystarczy, żeby wysłać dane ze strony www, oczywiście w tym momencie dane nigdzie nie trafiają, są tracone. Wysłanie wpisanych przez użytkownika danych następuje po wciśnięciu przycisku <strong>Save</strong>. Żeby wysłane dane zostały odebrane i przetworzone przez aplikację potrzebujemy po pierwsze serwera www np. <a href=""https://en.wikipedia.org/wiki/Apache_Tomcat"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Apache_Tomcat"" target=""_blank"" rel=""noreferrer noopener"">Apache Tomcat</a>, a po drugie nasza aplikacja musi posiadać implementację, kod np. Spring MVC odczytujący dane wysłane z przeglądarki.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1570,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/Zrzut-ekranu-z-2021-03-08-11-24-52-1.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/Zrzut-ekranu-z-2021-03-08-11-24-52-1-1024x431.png"" alt=""Czysty formularz HTML - wysłanie danych z front-end do back-end - Junior Java Developer"" class=""wp-image-1570""/></a><figcaption>Czysty formularz HTML - wyslanie danych z front-end do back-end - Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Należy zwrócić uwagę na adres URL strony i parametry żądania: <strong>java-frontend-backend/index.html?title=Note+title&amp;content=Note+content</strong> Dodatkowo w tym przypadku nie był potrzebny serwer www, plik <strong>index.html</strong> był po prostu zapisany lokalnie na dysku, a do jego wyświetlenia użyłem przeglądarki internetowej. W tej sytuacji mówimy o statycznej stronie, która jest wyświetlana tak jak została zakodowana w pliku HTML. Wykorzystanie Javascript do dodania dynamicznych treści, to nie to samo (<a rel=""noreferrer noopener"" href=""https://nodejs.org/en/"" data-type=""URL"" data-id=""https://nodejs.org/en/"" target=""_blank"">wyjątek stanowi Node.js</a>), co połączenie Java back-end z www front-end. W dalszej części pokażę jak zamienić statyczną stronę na dynamiczną z użyciem wspomnianego back-end napisanego w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Żeby korzystać z dynamicznych stron www potrzebujemy back-end, który będzie przyjmował żądania i wysyłał odpowiedzi użytkownika/klienta. W tym momencie zaczynamy działać w konfiguracji klient-serwer (client-server). Kod back-end'u musi być umieszczony na serwerze www np. Apache Tomcat. Serwer www na czas development'u będzie zainstalowany lokalnie na komputerze programisty, dodatkowo, jeżeli chcemy udostępnić naszą aplikację innym użytkownikom internetu potrzebujemy zewnętrznego serwera np. <a rel=""noreferrer noopener"" href=""http://www.heroku.com"" data-type=""URL"" data-id=""www.heroku.com"" target=""_blank"">Heroku.com</a>. Przyjęło się, że lokalne serwery www mają adres <a href=""http://localhost:8080"" target=""_blank"" rel=""noreferrer noopener"">http://localhost:8080</a>, gdzie http to protokół, localhost to nazwa serwera, 8080 to port serwera. Aplikację z back-end należy umieścić na serwerze, czyli wykonać deploy na serwer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Szablon aplikacji zawierającej back-end w Java z wykorzystaniem Spring Framework oraz Spring Boot generujemy na stronie <a rel=""noreferrer noopener"" href=""https://start.spring.io"" target=""_blank"">https://start.spring.io</a>. Poniżej zrzut ekranu prezentujący pola, które należy wypełnić oraz zależności ""Dependencies"", które należy wybrać.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1501,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/spring-boot-initializer_template-project.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/spring-boot-initializer_template-project-1024x576.png"" alt=""Szablon aplikacji w Java z wykorzystaniem Spring Framework oraz Spring Boot - generator https://start.spring.io"" class=""wp-image-1501""/></a><figcaption>Szablon aplikacji w Java z wykorzystaniem Spring Framework oraz Spring Boot - generator https://start.spring.io</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Project - Maven Project</li><li>Language - Java</li><li>Spring Boot - 2.4.3</li><li>Project Metadata:<ul><li>Group - np. pl.nazwisko.imie.java.medicalcenter (odwrotna nazwa domenowa),</li><li>Artifact - np. medical-center (nazwa aplikacji, pliku jar),</li><li>Name - nazwa aplikacji,</li><li>Description - opis aplikacji,</li><li>Package name - np. pl.nazwisko.imie.java.medicalcenter (pakiety w projekcie),</li><li>Packaging - Jar,</li><li>Java - 11.</li></ul></li><li>Dependencies:<ul><li>Spring Web - moduł Spring dla aplikacji webowych.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Teraz statyczną stronę index.html zamienimy na dynamiczną, która będzie dostępna pod adresem <a rel=""noreferrer noopener"" href=""http://localhost:8080/notes"" target=""_blank"">http://localhost:8080/notes</a> w odróżnieniu od poprzedniej wersji, która była po prostu wskazaniem pliku na dysku <span style=""text-decoration: underline;"">file:///home/user/dev/juniorjavadeveloper.pl/java-frontend-backend/index.html</span>. Korzystając z metod (GET, POST) protokołu HTTP oraz stosując REST dla tego samego adresu URL będziemy mogli wysłać na serwer dane formularza oraz pobrać dane z serwera. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dane z front-end do back-end wysyłane są w postaci tekstu:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul id=""block-b28087b2-f2fd-40a0-8092-09bf892e9b7a""><li>dla metody GET dane w postaci <a rel=""noreferrer noopener"" href=""https://www.w3schools.com/tags/ref_httpmethods.asp"" target=""_blank"">nazwa/wartość (klucz/wartość)</a> np. title=Note</li><li>dla metody POST dane w postaci <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/JSON"" target=""_blank"">JSON</a> np. {""title"":""Note""}</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Moduł Spring MVC ułatwia nam pracę przy tworzeniu aplikacji web, nie musimy już tworzyć dużej ilości kodu jak w przypadku J<a href=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" target=""_blank"" rel=""noreferrer noopener"">ava Servlets</a>. Wykorzystamy wzorzec projektowy MVC (Model View Controller), który jest domyślnie wspierany przez Spring, nawet sam moduł dla aplikacji web'owych w Spring nosi nazwę Spring MVC.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zaczniemy od stworzenia poszczególnych elementów MVC, w naszym przypadku:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Model - klasa przechowująca dane wprowadzone w formularzu przez użytkownika,</li><li>View - dynamiczna strona HTML pobierająca i wyświetlająca dane,</li><li>Controller - klasa obsługująca różne żądania protokołu HTTP (np. GET, POST).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Kolejność tworzenia wyżej wymienionych elementów nie ma znaczenia, ale ja przyjąłem, że najpierw tworzę Model, później Controller, a na końcu View. Poniżej zaprezentuję kod poszczególnych elementów oraz zrzuty ekranu z aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NoteModel {
    private String title;
    private String content;

    public NoteModel(String title, String content) {
        this.title = title;
        this.content = content;
    }
    
    // getters, setters
    // toString()
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod Java reprezentujący Model danych notatki w aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@Controller
@RequestMapping(value = ""/notes"")
public class NoteController {
    public static final Logger LOGGER = Logger.getLogger(NoteController.class.getName());
    private List&lt;NoteModel> notes = new ArrayList&lt;>();

    @GetMapping
    public String list() {
        LOGGER.info(""list() = "" + notes);
        return ""notes/notes"";
    }

    @GetMapping(value = ""/create"")
    public String createView() {
        return ""notes/create-note"";
    }

    @PostMapping
    public String create(NoteModel note) {
        LOGGER.info(""create("" + note + "")"");
        notes.add(note);
        return ""redirect:/notes"";
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod Java reprezentuje Controller do obsługi żądań protokołu HTTP.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1514,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod-Model-Controller_struktura-projektu-2.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod-Model-Controller_struktura-projektu-2-1024x558.png"" alt=""Aplikacja Spring MVC - kod Model i Controller + struktura projektu"" class=""wp-image-1514""/></a><figcaption>Aplikacja Spring MVC - kod Model i Controller + struktura projektu</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>W aplikacji web operacje związane z formularzem, czyli przesłaniem danych z front-end do back-end można podzielić na trzy części:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Żądanie, wyświetlenie strony z formularzem - <strong>metoda createView()</strong>.</li><li>Walidacja, sprawdzenie poprawności danych - <strong>@Valid + @NotBlank</strong>.</li><li>Submit, przesłanie danych do back-end - <strong>metoda create()</strong>.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Powyżej opisane metody createView() i create() odnoszą się bezpośrednio do metod CRUD, w tym przypadku C - create, metoda createView() odnosi się do widoku umożliwiającego wyświetlenie formularza. Analogicznie dla całego CRUD:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>C - create</strong>, metody: createView() i create(),</li><li><strong>R - read</strong>, metody: readView() i read(),</li><li><strong>U - update</strong>, metody: updateView() i update(),</li><li><strong>D - delete</strong>, metody: deleteView() i delete().</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Ad. 1. Żądanie, wyświetlenie strony z formularzem - metoda createView().</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;a href=""/notes/create"">Add Note&lt;/a></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia link ""Add Note"" umożliwiający wyświetlenie strony z formularzem www.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1519,""width"":415,""height"":263,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_notes-html.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_notes-html.png"" alt=""Aplikacja Spring MVC - link do strony umożliwiającej tworzenie nowej notatki"" class=""wp-image-1519"" width=""415"" height=""263""/></a><figcaption>Aplikacja Spring MVC - link do strony umozliwiajacej tworzenie nowej notatki</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Powyżej jeden ze sposobów na wyświetlenie strony z formularzem, w tym przypadku zrealizowane za pomocą linku, który kieruje na odpowiednią stronę. Ta część realizowana jest przez front-end.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@GetMapping(value = ""/create"")
public String createView() {
    return ""notes/create-note"";
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Powyższy kod odpowiada za obsługę żądań protokołu HTTP z wykorzystaniem Spring MVC oraz szablonów stron HTML z wykorzystaniem Thymeleaf. W telegraficznym skrócie, jeżeli chcemy dodać komunikację front-end z back-end dla www musimy obsługiwać żądania protokołu HTTP.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>@GetMapping(value = ""/create"")</strong> - obsługa metody GET, dla URI /create, cały adres będzie wyglądał http://localhost:8080/create - Spring MVC.</li><li><strong>return ""notes/create-note"";</strong> - wynikiem metody create() będzie strona HTML create-note zawierająca formularz www - Thymeleaf.</li></ul>
<!-- /wp:list -->

<!-- wp:image {""align"":""center"",""id"":1520,""width"":462,""height"":253,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_create-note-html.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_create-note-html.png"" alt=""Aplikacja Spring MVC - formularz www umożliwiający tworzenie nowej notatki"" class=""wp-image-1520"" width=""462"" height=""253""/></a><figcaption>Aplikacja Spring MVC - formularz www umozliwiajacy tworzenie nowej notatki</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Ad. 2. Walidacja, sprawdzenie poprawności danych - @Valid + @NotBlank.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;form action=""#"" th:action=""@{/notes}"" th:object=""${note}"" method=""post"">
    &lt;input type=""text"" th:field=""${note.title}"">
    &lt;p th:if=""${#fields.hasErrors('title')}"" th:errors=""*{title}"">&lt;/p>
    &lt;input type=""text"" th:field=""${note.content}"">
    &lt;p th:if=""${#fields.hasErrors('content')}"" th:errors=""*{content}"">&lt;/p>
    &lt;button type=""submit"">Save&lt;/button>
&lt;/form></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia formularz HTML z elementami odpowiedzialnymi za wyświetlanie wyników walidacji w Thymeleaf - kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">    @PostMapping
    public String create(@Valid @ModelAttribute(name = ""note"") NoteModel note,
                         BindingResult bindingResult) {
        LOGGER.info(""create("" + note + "")"");

        if (bindingResult.hasErrors()) {
            LOGGER.info(""validation errors in Model: "" + note);
            LOGGER.info(""validation errors: "" + bindingResult.getAllErrors());
            return ""notes/create-note"";
        }

        notes.add(note);
        return ""redirect:/notes"";
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia obsługę żądania HTML POST wraz z walidacją - @Valid - przesyłanych danych w Spring MVC - kod Java.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class NoteModel {
    @NotBlank(message = ""Title must not be blank"")
    private String title;
    @NotBlank(message = ""Content must not be blank"")
    private String content;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia Model z regułami walidacji - @NotBlank - po stronie back-end w Spring MVC - kod Java.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1546,""width"":521,""height"":318,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/aplikacja-Spring-MVC-kod_create-note-validation-errors.png"" alt=""Aplikacja Spring MVC - błędy wlidacji formularza www umozliwiajacego tworzenie nowej notatki"" class=""wp-image-1546"" width=""521"" height=""318""/><figcaption>Aplikacja Spring MVC - bledy wlidacji formularza www umozliwiajacego tworzenie nowej notatki</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Ad. 3. Submit, przesłanie danych do back-end - metoda create().</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;form action=""/notes"" method=""post"">
[...]
&lt;button type=""submit"">Save&lt;/button></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia fragmenty formularza HTML odpowiedzialne za przesłanie żądania HTTP POST z front-end do back-end - kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@PostMapping
public String create(@Valid NoteModel note) {
    LOGGER.info(""create("" + note + "")"");
    notes.add(note);
    return ""redirect:/notes"";
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia obsługę żądania HTML POST wraz z walidacją - @Valid - przesyłanych danych w Spring MVC - kod Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tworząc aplikację web'ową z dynamicznymi stronami www trzeba się przyzwyczaić do faktu, że kod HTML programisty dla tworzonych stron www będzie różnił się od tego, co zobaczy użytkownik końcowy wyświetlający stronę www. Dlaczego tak się dzieje opisałem poniżej w artykule. Trzy różne wersje kodu HTML dla tej samej strony www:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>HTML bez Thymeleaf - statyczna strona www,</li><li>HTML z Thymeleaf - dynamiczna strona www,</li><li>HTML wygenerowany - przetworzona, sparsowana strona www.</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;!DOCTYPE html>
&lt;html lang=""en"">
&lt;head>
    &lt;meta charset=""UTF-8"">
    &lt;title>Create Note&lt;/title>
&lt;/head>
&lt;body>
&lt;h1>Create note&lt;/h1>
&lt;form action=""/notes"" method=""post"">
    &lt;input type=""text"" name=""title"">
    &lt;input type=""text"" name=""content"">
    &lt;button type=""submit"">Save&lt;/button>
&lt;/form>
&lt;/body>
&lt;/html></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod  przedstawia HTML bez Thymeleaf - kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;!DOCTYPE html>
&lt;html lang=""en"" xmlns:th=""http://www.thymeleaf.org"">
&lt;head>
    &lt;meta charset=""UTF-8"">
    &lt;title>Create Note&lt;/title>
&lt;/head>
&lt;body>
&lt;h1>Create note&lt;/h1>
&lt;form action=""#"" th:action=""@{/notes}"" th:object=""${note}"" method=""post"">
    &lt;input type=""text"" th:field=""${note.title}"">
    &lt;input type=""text"" th:field=""${note.content}"">
    &lt;button type=""submit"">Save&lt;/button>
&lt;/form>
&lt;/body>
&lt;/html></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia HTML z Thymeleaf - kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""html""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""html"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;html lang=""en"">
&lt;head>
    &lt;meta charset=""UTF-8"">
    &lt;title>Create Note&lt;/title>
&lt;/head>
&lt;body>
&lt;h1>Create note&lt;/h1>
&lt;form action=""/notes"" method=""post"">
    &lt;input type=""text"" id=""title"" name=""title"" value="""">
    &lt;input type=""text"" id=""content"" name=""content"" value="""">
    &lt;button type=""submit"">Save&lt;/button>
&lt;/form>
&lt;/body>
&lt;/html></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""small""} -->
<p class=""has-text-align-center has-small-font-size"">Powyższy kod przedstawia wygenerowany HTML - kod HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W kodzie HTML wygenerowanym przez back-end i przesłanym do front-end nie ma żadnych elementów Thymeleaf. Dzieje się tak dlatego, że back-end przetwarza, parsuje stronę zawierającą HTML i podmienia wystąpienia elementów Thymeleaf np.:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Thymeleaf:</strong> &lt;input type=""text"" th:field=""${note.title}""&gt; na <strong>HTML:</strong> &lt;input type=""text"" id=""title"" name=""title"" value=""""&gt;</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Tak działa większość <a rel=""noreferrer noopener"" href=""https://hackernoon.com/java-template-engines-ef84cb1025a4"" data-type=""URL"" data-id=""https://hackernoon.com/java-template-engines-ef84cb1025a4"" target=""_blank"">silników szablonów html</a> (template engine) wspieranych przez framework do tworzenia aplikacji www. Silnik szablonów i framework, to dwie oddzielne rzeczy, np. <a rel=""noreferrer noopener"" href=""https://www.baeldung.com/spring-template-engines"" data-type=""URL"" data-id=""https://www.baeldung.com/spring-template-engines"" target=""_blank"">Spring MVC wspiera więcej niż jeden silnik szablonów</a>, Thymeleaf jest jednym z nich.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""align"":""full""} -->
<figure class=""wp-block-table alignfull""><table><thead><tr><th>HTML bez Thymeleaf</th><th>HTML z Thymeleaf</th></tr></thead><tbody><tr><td><code>&lt;html lang=""en""&gt;</code></td><td><code>&lt;html lang=""en"" xmlns:th=""'http://www.thymeleaf.org""&gt;</code></td></tr><tr><td></td><td>- <strong>xmls:th</strong> - utworzenie przestrzeni nazw dla Thymeleaf, można porównać, to do Java import (xmlns) i zmiennej (th).</td></tr><tr><td><code>&lt;form action=""/notes"" method=""post""&gt;</code></td><td><code>&lt;form action=""#"" th:action=""@{/notes}"" th:object=""${note}"" method=""post""&gt;</code></td></tr><tr><td></td><td>- <strong>th:action</strong> - obsługa adresu URL żądania za pomocą Thymeleaf<br>- <strong>th:object</strong> - utworzenie lokalnej zmiennej, która będzie pomostem pomiędzy front-end, a back-end</td></tr><tr><td><code>&lt;input type=""text"" name=""title""&gt;</code></td><td><code>&lt;input type=""text"" th:field=""${note.title}""&gt;</code></td></tr><tr><td></td><td>- <strong>th:field</strong> - służy do wiązania danych z formularza po stronie front-end z polami w klasie po stronie back-end</td></tr></tbody></table><figcaption>Tabela porównująca kod HTML bez Thymeleaf (statyczna strona) oraz kod HTML z Thymeleaf (dynamiczna strona).</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Spring MVC w połączeniu z <a rel=""noreferrer noopener"" href=""https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html"" data-type=""URL"" data-id=""https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html"" target=""_blank"">Thymeleaf wykorzystuje EL (Expression Language)</a>, EL pozwala połączyć dane przesyłane z front-end HTML do back-end w Java. Dane z front-end do back-end wysyłane są w postaci tekstu np.:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>dla metody GET dane w postaci <a rel=""noreferrer noopener"" href=""https://www.w3schools.com/tags/ref_httpmethods.asp"" data-type=""URL"" data-id=""https://www.w3schools.com/tags/ref_httpmethods.asp"" target=""_blank"">nazwa/wartość (klucz/wartość)</a> np. title=Note - request/query parameters (parametry żądania),</li><li>dla metody POST dane w postaci <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/JSON"" target=""_blank"">JSON</a> np. {""title"":""Note""} - payload/request body (ciało żądania).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Spring MVC parsuje parametry żądania (request/query parameters) metody GET lub ciało żądania (payload/request body) metody POST i zamienia na obiekty klas języka Java.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""align"":""wide""} -->
<figure class=""wp-block-table alignwide""><table><tbody><tr><td class=""has-text-align-left"" data-align=""left""><code>&lt;form action=""#"" th:action=""@{/notes}"" th:object=""${note}"" method=""post""&gt;<br>&lt;input type=""text"" th:field=""${note.title}""&gt;<br>&lt;input type=""text"" th:field=""${note.content}""&gt;<br>&lt;button type=""submit""&gt;Save&lt;/button&gt;<br>&lt;/form&gt;</code></td></tr><tr><td class=""has-text-align-left"" data-align=""left"">Powyższe pola <strong>&lt;input&gt;</strong> zostaną zamienione na parametry żądania po stronie front-end, a następnie zostaną przesłane w postaci tekstu do back-end.</td></tr><tr><td class=""has-text-align-left"" data-align=""left""><code>@PostMapping<br>public String create(@Valid @ModelAttribute(name = ""note"") NoteModel note,<br>BindingResult bindingResult) {<br>//...<br>}</code></td></tr><tr><td class=""has-text-align-left"" data-align=""left"">Spring MVC zamieni parametry żądania z front-end na obiekt <strong>note</strong> klasy <strong>NoteModel</strong> po stronie back-end.</td></tr></tbody></table><figcaption>Tabela przedstawia zamianę, parsowanie parametrów żądania front-end na obiekt klasy Java po stronie back-end.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>    </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej zaprezentuję niezbędne narzędzia do weryfikacji komunikacji front-end z back-end bez, których moim zdaniem praca na linii front-end z back-end jest niemożliwa.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Aplikacja <a href=""https://www.postman.com"" data-type=""URL"" data-id=""https://www.postman.com"" target=""_blank"" rel=""noreferrer noopener"">Postman</a> - weryfikacja komunikacji front-end z back-end, żądania protokołu HTTP,</li><li>Web Developer Tools - wbudowane w każdą przeglądarkę internetową (F12 włącza) - weryfikacja strony www w kwestii kodu HTML, Javascript oraz strony wizualnej, jak również żądania protokołu HTTP,</li><li>Logi aplikacji back-end - informacje o tym, co dzieje się po stronie back-end.</li></ul>
<!-- /wp:list -->

<!-- wp:image {""align"":""wide"",""id"":1544,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/weryfikacja-komunikacji_narzedzie-Postman_HTTP-GET-Request.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/weryfikacja-komunikacji_narzedzie-Postman_HTTP-GET-Request-1024x558.png"" alt=""Weryfikacja komunikacji front-end z back-end za pomocą aplikacji Postman - żądanie GET protokołu HTTP"" class=""wp-image-1544""/></a><figcaption>Weryfikacja komunikacji front-end z back-end za pomoca aplikacji Postman - zadanie GET protokolu HTTP</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1545,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<figure class=""wp-block-image alignwide size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/weryfikacja-komunikacji_narzedzie-Postman_HTTP-POST-Request-1024x558.png"" alt=""Weryfikacja komunikacji front-end z back-end za pomocą aplikacji Postman - żądanie POST protokołu HTTP"" class=""wp-image-1545""/><figcaption>Weryfikacja komunikacji front-end z back-end za pomoca aplikacji Postman - zadanie POST protokolu HTTP</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1580,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/Zrzut-ekranu-z-2021-03-28-08-48-18.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/03/Zrzut-ekranu-z-2021-03-28-08-48-18-1024x558.png"" alt=""Logi aplikacji back-end - informacje o tym, co dzieje się po stronie back-end"" class=""wp-image-1580""/></a><figcaption>Logi aplikacji back-end - informacje o tym, co dzieje sie po stronie back-end</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Całość kodu można znaleźć na: <a rel=""noreferrer noopener"" href=""https://github.com/juniorjavadeveloper-pl/java-frontend-backend.git"" target=""_blank"">https://github.com/juniorjavadeveloper-pl/java-frontend-backend.git</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wyjaśnienie pojęć (w telegraficznym skrócie):</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Hypertext_Transfer_Protocol"" target=""_blank""><strong>Protokół HTTP</strong></a> (ang. Hypertext Transfer Protocol) - protokół przesyłania dokumentów hipertekstowych, to protokół sieci WWW (ang. World Wide Web). <a rel=""noreferrer noopener"" href=""https://sjp.pwn.pl/slowniki/hipertekstowy.html"" target=""_blank"">Hipertekstowy</a> - sposób organizacji informacji w tekście komputerowym, polegający na zastosowaniu wyróżnionych odsyłaczy, które automatycznie przenoszą użytkownika do innych informacji. <em>W skrócie, to strony www z linkami do innych elementów/stron www.</em></li><li><a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Uniform_Resource_Locator"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Uniform_Resource_Locator"" target=""_blank""><strong>URL</strong></a> (ang. Uniform Resource Locator) - oznacza ujednolicony format adresowania (określania lokalizacji) zasobów (informacji, danych, usług) stosowany w Internecie i w sieciach lokalnych. Tak zwany adres URL najczęściej kojarzony jest z adresami stron WWW, ale ten format adresowania służy do określania lokalizacji wszelkich zasobów dostępnych w Internecie.</li><li><strong>Parametry żądania</strong> (ang. request/query parameters) - dokładnie query string, dodawane są do adresu URL, stanową jego część, w której parametrom przypisywane są wartości. W tym przykładzie mają postać java-frontend-backend/index.html?title=Note+title&amp;content=Note+content <em>W skrócie, to elementy adresu, które są podawane po znaku zapytania ""?""</em>.</li><li><strong>GET</strong> - metoda protokołu HTTP, służy do pobierania wskazanego zasobu np. strony www, może służyć do przekazywania danych pomiędzy kolejnymi stronami, dane przesyłane w adresie URL.</li><li><strong>POST</strong> - metoda protokołu HTTP, służy do przekazywania danych do serwera w ciele żądania, najczęściej dane wysyłane z formularza na stronie www lub żądanie REST.</li><li><strong>Żądanie</strong> - dane wysyłane na serwer www przez użytkownika/klienta za pomocą np. przeglądarki www.</li><li><strong>Odpowiedź</strong> - dane wysyłane do użytkownika/klienta przez back-end i serwer www.</li><li><strong><a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Klient-serwer"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Klient-serwer"" target=""_blank"">Komunikacja klient-serwer</a></strong> - ogólne pojęcie opisujące model komunikacji sieciowej między klientem np. aplikacja www, desktop, mobilną, która korzysta z zasobów, usług udostępnionych przez serwer np. pliki, przelewy bankowe.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Dodatkowo zachęcam do uzupełnienia wiedzy o takie elementy jak:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Representational state transfer - architektura <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Representational_state_transfer"" target=""_blank"">REST</a>.</li><li>Application programming interface - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/API"" target=""_blank"">API</a>.</li><li>Usługi sieciowe – <a href=""https://en.wikipedia.org/wiki/Web_service"">WebService</a>.</li><li>Aplikacja po stronie serwera - <a href=""https://en.wikipedia.org/wiki/Web_application"">Web Application</a>.</li><li>Jak napisać aplikacje web z użyciem <a rel=""noreferrer noopener"" href=""https://spring.io/guides/gs/serving-web-content/"" target=""_blank"">Spring MVC</a>.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na&nbsp;<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2021-04-12
1593,"Wprowadzenie do git z wykorzystaniem IntelliJ IDEA – realny przypadek użycia – Junior Java Developer – JustGeek.IT - ACCEPTED","<!-- wp:paragraph -->
<p>W tym artykule przedstawię praktyczne wykorzystanie systemu git bez konieczności znajomości konsolowych poleceń tak, aby maksymalnie wykorzystać system git oraz produktywność przy pracy z tym systemem, którą dostarcza IntelliJ IDEA z graficznym interfejsem dla git’a. Prezentowane zagadnienia będą zarówno od strony teoretycznej jak i praktycznej. To nie jest kolejny kurs git, ale realny przypadek użycia git w dowolnym projekcie zarówno komercyjnym jak i projekcie do portfolio.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W artykule zostaną przedstawione poniższe elementy związane z systemem git, każdy punkt będzie zawierał również informacje o tym jakie zastosowanie mają te polecenia dla projektu jako całości jak również dla samego developer'a.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Pobranie zdalnego repozytorium – git clone.</li><li>Utworzenie lokalnego branch’a – git branch.</li><li>Umieszczenie zmian w lokalnym repozytorium – git commit.</li><li>Umieszczenie zmian w zdalnym repozytorium – git push.</li><li>Przekazanie kodu do review – Pull/Merge Request.</li><li>Pobranie zmian ze zdalnego repozytorium – git pull.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Na wstępie przedstawię zarys historyczny oraz garść informacji. Obecnie zespoły pracujące nad kodem aplikacji, systemu składają się z więcej niż jednej osoby, często te osoby pracują z różnych lokalizacji, a obecnie większość osób pracuje zdalnie. W takim środowisku współdzielenie kodu jest czymś naturalnym. Minęły już czasy, kiedy kod wymieniano za pomocą płyt CD lub wysyłano za pomocą wiadomości email. Członkowie zespołu współdzielą, czyli wymieniają się kodem za pomocą systemu kontroli wersji np. git, mogą, to być np.: developerzy (nowe funkcje systemu) jak również testerzy (testy automatyczne). Istnieje kilka innych systemów kontroli wersji, takich jak np.: SVN, CVS, Mercurial. Git stał się bardzo popularny, bo jest rozproszonym systemem kontroli wersji. Został napisany przez Linus'a Torvalds'a, twórcy jądra (kernel) Linux'a, czyli developer napisał narzędzie dla samego siebie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zanim przystąpię do omawiania punktów przedstawionych na początku artykułu, to przedstawię mój sposób pracy z git, który wypracowałem sobie przez lata pracy na stanowisku Java Developer'a.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Mój sposób pracy z git jako Java Developer</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Rano pobranie zmian ze zdalnego repozytorium - <strong>git pull</strong>.</li><li>W trakcie pracy dla każdej funkcjonalności tworzę branch - <strong>git branch</strong>.</li><li>Przed wyjściem z pracy przesłanie zmian do zdalnego repozytorium - <strong>git push</strong>.</li><li>Review kodu, czyli <strong>git push</strong> w połączeniu z Pull/Merge Request.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Żeby można było korzystać z narzędzia git trzeba zainstalować odpowiednie oprogramowanie, dla Windows będzie, to <a rel=""noreferrer noopener"" href=""https://git-scm.com/downloads"" target=""_blank"">https://git-scm.com/downloads</a>, dla Linux git możemy zainstalować z terminala.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego git z poziomu IntelliJ IDEA? Proszę zerknąć na poniższy zrzut ekranu i opis pod nim.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1595,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict-1024x555.png"" alt=""Wprowadzenie do git z użyciem IntelliJ IDEA - merge conflict"" class=""wp-image-1595""/></a><figcaption>Wprowadzenie do git z uzyciem IntelliJ IDEA - merge conflict</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Często osoby, które zaczynają swoją przygodę z programowaniem nie znają jeszcze dobrze narzędzi takich jak terminal/konsola, które wymagają znajomości poleceń oraz ich parametrów, które wprowadza się za pomocą tekstu, nie da się wyklikać polecenia w okienku. Za pomocą terminala korzysta się z takiego narzędzia jak git. Na początku system git należy skonfigurować właśnie z konsoli za pomocą poleceń wpisywanych ręcznie. Brak konfiguracji git'a prowadzi do sytuacji, w której początkujący programista w terminalu widzi bliżej mu nieznany edytor tekstu bez wersji okienkowej, nie zna skrótów, a do tego jego kod wygląda jak na powyższym zrzucie ekranu. Tak wygląda kod w trakcie operacji scalania, git merge.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Z terminala za pomocą edytora tekstu należy ręcznie usunąć specjalne znaczniki git'a np.: &gt;&gt;&gt;&gt;&gt;&gt;&gt; i/lub ======= oraz wybrać właściwą wersję kodu. Dla sporej części osób jest, to sytuacja bez wyjścia, wtedy robią restart IntelliJ lub zamykają terminal w nadziei, że ""samo zniknie"". Niestety git niczego nie zapomina (git blame), a tym bardziej nie przerwie procesu scalania kogu (git merge) po restarcie IntelliJ lub terminala.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W IntelliJ sytuacja będzie wyglądała zupełnie inaczej, kod będziemy scalać w graficznym edytorze tekstu, a każdy etap scalania kodu (git merge) będzie w formie okienek i komunikatów oraz będzie wyglądał jak na poniższych zrzutach ekranu.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1599,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict-ide-01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict-ide-01-1024x555.png"" alt=""prowadzenie do git z użyciem IntelliJ IDEA - merge conflict GUI - lista konfliktów"" class=""wp-image-1599""/></a><figcaption>Wprowadzenie do git z uzyciem IntelliJ IDEA - merge conflict GUI - lista konfliktow</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1600,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict-ide-02.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_merge-conflict-ide-02-1024x555.png"" alt=""Wprowadzenie do git z użyciem IntelliJ IDEA - merge conflict GUI - rozwiązywanie konfliktów"" class=""wp-image-1600""/></a><figcaption>Wprowadzenie do git z uzyciem IntelliJ IDEA - merge conflict GUI - rozwiazywanie konfliktow</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Rozproszony system kontroli wersji jakim jest git umożliwia pracę nad własnym kodem lokalnie (lokalne repozytorium git) bez dostępu do internetu i do kodu innych osób. Umożliwia również pracę z kodem innych osób, czyli ze zdalnym repozytorium. W git pracujemy na gałęziach nawet na samym początku, główna gałąź lokalna, to master lub main, natomiast główna gałąź zdalna, to origin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przy pracy z git w IntelliJ należy wiedzieć, co oznaczają poszczególne kolory plików podczas pracy z git, polecam zapoznanie się z <a rel=""noreferrer noopener"" href=""https://www.jetbrains.com/help/idea/file-status-highlights.html"" target=""_blank"">https://www.jetbrains.com/help/idea/file-status-highlights.html</a>. Dodatkowo trzeba wiedzieć jaki status mają pliki w git, więcej informacji na <a rel=""noreferrer noopener"" href=""https://www.git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository"" target=""_blank"">https://www.git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository</a> oraz na <a rel=""noreferrer noopener"" href=""https://git-scm.com/docs/git-status"" target=""_blank"">https://git-scm.com/docs/git-status</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1597,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_branch-master-origin.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_branch-master-origin-1024x555.png"" alt=""Wprowadzenie do git z użyciem IntelliJ IDEA - główny branch lokalny master i zdalny origin"" class=""wp-image-1597""/></a><figcaption>Wprowadzenie do git z uzyciem IntelliJ IDEA - glowny branch lokalny master i zdalny origin</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Ad. 1. </strong><strong>Pobranie zdalnego repozytorium – git clone.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Jeżeli już mamy narzędzia do obsługi git, to teraz musimy pobrać kod, w większości sytuacji będzie, to kod ze zdalnego repozytorium, będziemy potrzebowali URL zdalnego repozytorium np.: <a href=""https://github.com/juniorjavadeveloper-pl/git-training-01.git"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/juniorjavadeveloper-pl/git-training-01.git</a> Pierwsze pobranie kodu z repozytorium nazywa się klonowaniem, polecenie <strong>git clone</strong>, możemy tę operację wykonać z poziomu wiersza poleceń lub IDE IntelliJ IDEA. Więcej szczegółów można znaleźć na <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone"" target=""_blank"">https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong><br>Poniższe zrzuty ekranów prezentują praktyczny przykład klonowania zdalnego repozytorium z GitHub do IntelliJ.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1606,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-github_clone-repository_.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-github_clone-repository_-1024x503.png"" alt=""Pobranie adresu URL repozytorium - Klonowanie repozytorium z GitHub"" class=""wp-image-1606""/></a><figcaption>Pobranie adresu URL repozytorium - Klonowanie repozytorium z GitHub</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1607,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_github_clone-repository-01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/05/git-intellij_github_clone-repository-01-1024x555.png"" alt=""Utworzenie nowego projektu w IntelliJ - Klonowanie repozytorium z GitHub"" class=""wp-image-1607""/></a><figcaption>Utworzenie nowego projektu w IntelliJ - Klonowanie repozytorium z GitHub</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1610,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_github_clone-repository-02_.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_github_clone-repository-02_-1024x554.png"" alt=""Utworzenie nowego projektu w IntelliJ - Klonowanie repozytorium z GitHub"" class=""wp-image-1610""/></a><figcaption>Utworzenie nowego projektu w IntelliJ - Klonowanie repozytorium z GitHub</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>W większości przypadków będziemy korzystać z istniejącego repozytorium, dlatego tak ważny jest URL. Adres zdalnego repozytorium będziemy musieli uzyskać od kogoś, w pracy może, to być nasz przełożony lub kolega z zespołu. Jeżeli posiadamy URL repozytorium i zrobiliśmy klon repozytorium (<strong>git clone</strong>), to nie koniecznie będziemy mogli wysłać nasze zmiany (<strong>git push</strong>) na zdalną gałąź origin, będziemy potrzebowali uprawnień do takiej operacji, ktoś będzie musiał nadać nam niezbędne uprawnienia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 2. Utworzenie lokalnego branch’a – git branch.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Branch, to kopia kodu, plików aplikacji, którą można równolegle rozwijać, a następnie scalić, połączyć z inną gałęzią np. master. Równoległy rozwój kodu pozwala uniknąć ""omyłkowego"" nadpisania, usunięcia kodu, plików oraz umożliwia powrót do właściwej wersji kodu, plików aplikacji. Więcej szczegółów można znaleźć na <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/using-branches"" target=""_blank"">https://www.atlassian.com/git/tutorials/using-branches</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong><br>Poniższe zrzuty ekranów prezentują praktyczny przykład tworzenia nowego branch w IntelliJ.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1618,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_01-1.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_01-1-1024x576.png"" alt=""Tworzenie nowego branch'a w IntelliJ - Git -&gt; Branches..."" class=""wp-image-1618""/></a><figcaption>Tworzenie nowego branch'a w IntelliJ - Git -&gt; Branches...</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1619,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_02.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_02-1024x576.png"" alt=""Tworzenie nowego branch'a w IntelliJ - Git Branches + New Branch"" class=""wp-image-1619""/></a><figcaption>Tworzenie nowego branch'a w IntelliJ - Git Branches + New Branch</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1620,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_03.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_03-1024x576.png"" alt=""Tworzenie nowego branch'a w IntelliJ - New branch name:"" class=""wp-image-1620""/></a><figcaption>Tworzenie nowego branch'a w IntelliJ - New branch name:</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1621,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_04.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_create-new-branch_04-1024x576.png"" alt=""Tworzenie nowego branch'a w IntelliJ - Git Branches in ..."" class=""wp-image-1621""/></a><figcaption>Tworzenie nowego branch'a w IntelliJ - Git Branches in ...</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>Tworzenie nowych, oddzielnych gałęzi, branch dla funkcjonalności np. przelewy międzynarodowe pozwala uniknąć problemów przy scalaniu naszych zmian z kodem innych członków zespołu. Pozwala również na przesłanie skończonego kodu do rewiev oraz nie blokuje naszej pracy nad innymi funkcjonalnościami w systemie np. potwierdzenia wykonania przelewu. Możemy również uniknąć przesłania naszego źle działającego kodu do gałęzi produkcyjnej np. master, z której zostanie zbudowana aplikacja dostępna dla wszystkich klientów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 3. Umieszczenie zmian w lokalnym repozytorium – git commit.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Commit pozwala ""zapisać"" bieżącą wersję kodu do lokalnego repozytorium. Pozwala, to na śledzenie zmian w plikach aplikacji w dużym uproszczeniu jest, to historia zmian plików zarządzana przez system git. Każdy commit zawiera szczegółowe informacje pozwalające zidentyfikować wprowadzone zmiany jak również informacje o osobie, która dokonała zmian (<strong>git blame</strong>). Więcej szczegółów można znaleźć na <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/saving-changes/git-commit"" target=""_blank"">https://www.atlassian.com/git/tutorials/saving-changes/git-commit</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong></p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002218\u0022 gal_title=\u0022git commit w IntelliJ\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""18"" gal_title=""git commit w IntelliJ""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>Bardzo ważne jest, żeby robić commit z komentarzem (commit message). Powinien, to być nie za długi opis biznesowy, nie ma sensu umieszczanie informacji o plikach, które zmieniliśmy, to i tak będzie widoczne w systemie git, tzw. git blame. Osoba przeglądająca historię zmian, commit'ów czyta komentarz, aby znaleźć interesującą ją zmianę, a dopiero potem przegląda listę plików, które zostały zmienione.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 4. Umieszczenie zmian w zdalnym repozytorium – git push.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Pracę z kodem w git rozpoczynamy na naszym lokalnym repozytorium. Wykonując wyżej opisany git commit umieszczamy zmiany w lokalnym repozytorium. Na pewnym etapie prac trzeba umieścić nasz kod w zdalnym repozytorium... Więcej szczegółów można znaleźć na <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/syncing/git-push"" target=""_blank"">https://www.atlassian.com/git/tutorials/syncing/git-push</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong></p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1644,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-01-1024x576.png"" alt=""Commit (Add new file...) bez etykiety, label 'origin' przed 'git push' - IntelliJ"" class=""wp-image-1644""/></a><figcaption>Commit (Add new file...) bez etykiety, label 'origin' przed 'git push' - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1645,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-02.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-02-1024x576.png"" alt=""Przygotowanie push, opcja menu 'Git -&gt; Push...' - IntelliJ"" class=""wp-image-1645""/></a><figcaption>Przygotowanie push, opcja menu 'Git -&gt; Push...' - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1646,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-03.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-03-1024x576.png"" alt=""Lista commit'ów do wysłania, push do zdalnego repozytorium - IntelliJ"" class=""wp-image-1646""/></a><figcaption>Lista commit'ow do wyslania, push do zdalnego repozytorium - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1647,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-04.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_push-04-1024x576.png"" alt=""Commit z etykietą, label 'origin' jest w zdalnym repozytorium - IntelliJ"" class=""wp-image-1647""/></a><figcaption>Commit z etykieta, label 'origin' jest w zdalnym repozytorium - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>Na koniec dnia przesyłamy nasz kod do zdalnego repozytorium pozwoli, to uniknąć sytuacji, w której z przyczyn losowych np.: awaria komputera, choroba, nie będziemy w stanie kontynuować pracy. Kiedy kod jest w zdalnym repozytorium, to w łatwy sposób można kontynuować pracę z nim.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 5. Przekazanie kodu do review – Pull/Merge Request.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Pull Request lub Merge Request jest niezależne od systemu git, zostało stworzone przez platformy wspierające proces wytwarzania oprogramowania, które korzystają z systemu git, oferowane przez np. <a rel=""noreferrer noopener"" href=""https://github.com"" data-type=""URL"" data-id=""https://github.com"" target=""_blank"">GitHub</a>, <a rel=""noreferrer noopener"" href=""https://gitlab.com"" target=""_blank"" data-type=""URL"" data-id=""https://gitlab.com"">GitLab</a>, <a rel=""noreferrer noopener"" href=""https://bitbucket.org/"" target=""_blank"" data-type=""URL"" data-id=""https://bitbucket.org/"">Bitbucket</a>. Dodają one dodatkowe funkcje i możliwości do systemu git, które są wykorzystywane w trakcie procesu wytwarzania oprogramowania. Technicznie ""na końcu"" Pull Request wykonywane jest polecenie <strong>git merge</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Więcej szczegółów można znaleźć na:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel=""noreferrer noopener"" href=""https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"" target=""_blank"">https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests</a> - dla GitHub,</li><li><a rel=""noreferrer noopener"" href=""https://docs.gitlab.com/ee/user/project/merge_requests/getting_started.html"" target=""_blank"">https://docs.gitlab.com/ee/user/project/merge_requests/getting_started.html</a> dla GitLab, </li><li><a href=""https://support.atlassian.com/bitbucket-cloud/docs/tutorial-learn-about-bitbucket-pull-requests"" target=""_blank"" rel=""noreferrer noopener"">https://support.atlassian.com/bitbucket-cloud/docs/tutorial-learn-about-bitbucket-pull-requests</a> dla Bitbucket.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong></p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002220\u0022 gal_title=\u0022Pull Request na GitHub\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""20"" gal_title=""Pull Request na GitHub""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>Ostatnim ważnym elementem w pracy z git i kodem źródłowym jest przesłanie kodu do review. Sam git nie posiada opcji Pull/Merge request, są to dodatki do takich serwisów jak GitHub.com, GitLab.com lub Bitbucket.org. Dlaczego code review jest tak ważny? Kod, który piszemy dla nas samych jest idealny, ale warto, aby przejrzały go osoby bardziej doświadczone w naszym zespole. Dodatkowo osoby, które będą bezpośrednio korzystały z naszego kodu np.: poprzez API, będą miały możliwość zapoznania się z API i/lub zgłoszenia zmian, które pozwolą na poprawne połączenie np.: dwóch modułów systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Ad. 6. Pobranie zmian ze zdalnego repozytorium – git pull.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TEORIA</strong><br>Pull pozwala pobrać zmiany w kodzie umieszczone w zdalnym repozytorium przez innych członków zespołu pracujących przy tej samej aplikacji. Za pomocą git pull możemy również pobrać nasze własne zmiany scalone po wykonaniu Pull/Merge Request. Polecenie <strong>git pull</strong> pobiera zmiany i jednocześnie scala <strong>git merge</strong> nasze zmiany w lokalnym repozytorium z tymi pobieranymi ze zdalnego repozytorium. Więcej szczegółów można znaleźć na <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/syncing/git-pull"" target=""_blank"">https://www.atlassian.com/git/tutorials/syncing/git-pull</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>PRAKTYKA</strong></p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""wide"",""id"":1659,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-01-1024x576.png"" alt=""Status repozytorium git przed wykonaniem 'git pull' - IntelliJ"" class=""wp-image-1659""/></a><figcaption>Status repozytorium git przed wykonaniem 'git pull' - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1660,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-02.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-02-1024x576.png"" alt=""Przygotowanie do pobrania zmian ze zdalnego repozytorium, opcja menu 'Git -&gt; Pull...' - IntelliJ"" class=""wp-image-1660""/></a><figcaption>Przygotowanie do pobrania zmian ze zdalnego repozytorium, opcja menu 'Git -&gt; Pull...' - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1661,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-03.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-03-1024x576.png"" alt=""Wybór 'branch' do pobrania zmian ze zdalnego repozytorium - IntelliJ"" class=""wp-image-1661""/></a><figcaption>Wybor 'branch' do pobrania zmian ze zdalnego repozytorium - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""wide"",""id"":1662,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image alignwide size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-04.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/06/git-intellij_pull-04-1024x576.png"" alt=""Status repozytorium git po wykonaniu 'git pull', pobrane zmiany - IntelliJ"" class=""wp-image-1662""/></a><figcaption>Status repozytorium git po wykonaniu 'git pull', pobrane zmiany - IntelliJ</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>PRZYPADEK UŻYCIA</strong><br>Zawsze powtarzam, że przy pracy z git najważniejsza jest rano kawa, a potem <strong>git pull</strong>, czyli pobranie zmian ze zdalnego repozytorium. Dlaczego tak ważna jest kawa? Po zrobieniu <strong>git pull</strong> możemy spodziewać się konfliktów w naszym kodzie. Pracując w międzynarodowym zespole, nasi serdeczni koledzy/koleżanki ze USA lub Indii, kiedy my spaliśmy mogli dodać zmiany do głównej gałęzi, a zależy nam na tym, żeby zawsze mieć aktualną główną gałąź main/master. Dla aktualnej wersji gałęzi głównej będziemy mogli zrobić nasze własne branch’e z nowymi funkcjonalnościami.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując git jest niezbędny do pracy każdego programisty. Początkujący programiści mają trudności z opanowaniem systemu git z terminala/konsoli dlatego zalecam stosowanie narzędzi dostępnych w IntelliJ IDEA, które dostarczają niezbędne wsparcie dla początkujących programistów. Należy pamiętać, że git, to nie tylko wersjonowanie kodu, ale również cały proces wsparcia wytwarzania oprogramowania za pomocą np. git branch, Pull/Merge Request. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na&nbsp;<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2021-06-23
1669,"Adding an external library into a project, why use a build tool like Maven? - codility.com/blog","<!-- wp:paragraph -->
<p>In this article I will describe how to add an external library into a project. First I will start with the most common way, adding an external library manually but unfortunately this method is not the best one. Then I will move to build automation tool Maven, this method is the prefered one for automatically adding external libraries into a project. All presented in my favorite IDE which is IntelliJ IDEA.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When we learn Java basics there is no need to add any external library. But when moving forward, we want to add external libraries to help us to solve some common programming problems or just to speed up the development process, because someone else did it a long time ago. Maven is not the only tool that automates the process of adding external libraries into a project. I was working with tools like Ant and Gradle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First I will explain what is an external library or just library. It's a collection of classes packed into a single file called JAR (Java Archive). Even for the smallest Java project we don't share its single class instead we would like to share the whole project structure with packages, classes etc.. In a JAR file, Java classes are divided into packages which separates classes physically on computers hard drive and separates logically, e.g.: classes that operate on texts or numbers. JAR file may contains non source code files, e.g.: images, text files, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Where to look for a Java external library? If you know which library you want to use, you can search it on https://mvnrepository.com. But if you don't know the name of library, simply just search it on the internet using keywords e.g.: Java string utils, you will probably get the https://commons.apache.org/proper/commons-lang/ - ""Apache Commons is an Apache project focused on all aspects of reusable Java components."". The Apache Commons Software Foundation is a great place to find libraries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When talking about libraries, in the context of build automation tools e.g.: Maven, we use the term dependency which is simply the library in the JAR file. In this article I will not dive into Maven tool, more you can find on<a href=""https://maven.apache.org""> https://maven.apache.org</a> or<a href=""https://en.wikipedia.org/wiki/Apache_Maven""> https://en.wikipedia.org/wiki/Apache_Maven</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below table shows comparison adding external libraries, manual work vs automated with Maven.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""align"":""wide"",""className"":""is-style-regular"",""hasCustomCSS"":true} -->
<figure class=""wp-block-table alignwide is-style-regular""><table><thead><tr><th>Lp.</th><th><strong>Manual work</strong></th><th>Automated with Maven</th></tr></thead><tbody><tr><td>1.</td><td><strong>Create</strong> Java project</td><td><strong>Create</strong> Maven project</td></tr><tr><td>1. a)</td><td><strong>Create</strong> folder e.g.: lib</td><td>N/A</td></tr><tr><td>2.</td><td><strong>Find</strong> library in the Maven Repository</td><td><strong>Find</strong> library in the Maven Repository</td></tr><tr><td>3.</td><td><strong>Download</strong> JAR file</td><td><strong>Add</strong> Maven &lt;dependency&gt;</td></tr><tr><td>3. a)</td><td><strong>Place</strong> JAR file in the lib folder</td><td>N/A</td></tr><tr><td>3. b)</td><td><strong>Add</strong> library to the project</td><td>N/A</td></tr><tr><td>4.</td><td><strong>Start</strong> using the external library</td><td><strong>Build</strong> Maven project to start using the external library</td></tr></tbody></table><figcaption>Comparison adding external library, manual work vs automated with Maven</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>We can see that adding an external library consists of four steps. The first steps Create … we do only once when we create a project. Steps from 2. to 4. we repeat each time we add a new external library or we just want to change the version of the library (which is a common use case). The first approach, adding an external library manually requires two additional, time consuming steps, and they are tedious and error prone. Not mentioning maintaining version changes over time when we have, let's say about 10 external libraries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Even when looking at the below screenshots, with a practical step-by-step tutorial showing both approaches, we can see that the first one has twice as many screen shots as the second one. Adding an external library manually consists of around 16 screenshots where automated with Maven has around only 7 screenshots.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>First approach - adding external library manually</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now I can describe the first approach, which is <strong>adding an external library manually</strong>. Why do we even bother with manual work when now everything is automated? It's good to know how it works, and what exactly Maven automates, also we will see the work that needs to be done using this approach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below screenshots shows in great detail step-by-step how to add an external library, each screen shot has a description. There is no need to explain the whole process separately.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1679,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_01.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_01.png"" alt=""Create Java project - external library, manual work."" class=""wp-image-1679""/></a><figcaption>Create Java project - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1680,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_02.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_02-1024x576.png"" alt=""Created , empty Java project overview  - external library, manual work."" class=""wp-image-1680""/></a><figcaption>Created, empty Java project overview  - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1681,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_03.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_03-1024x576.png"" alt=""Add sample code with external class usage, error missing class  - external library, manual work."" class=""wp-image-1681""/></a><figcaption>Add sample code with external class usage, error missing class  - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1682,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_04.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_04-1024x576.png"" alt=""Add new folder  - external library, manual work."" class=""wp-image-1682""/></a><figcaption>Add a new folder  - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1683,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_05.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_05-1024x576.png"" alt=""Create folder e.g.: lib  - external library, manual work."" class=""wp-image-1683""/></a><figcaption>Create folder e.g.: lib  - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1684,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_06.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_06-1024x576.png"" alt=""Find library in the Maven Repository - external library, manual work."" class=""wp-image-1684""/></a><figcaption>Find library in the Maven Repository - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1686,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_07.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_07-1024x576.png"" alt=""Search 'commons-lang' library at www.mvnrepository.com  - external library, manual work."" class=""wp-image-1686""/></a><figcaption>Search 'commons-lang' library at www.mvnrepository.com  - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1687,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_08.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_08-1024x576.png"" alt=""Download JAR file - external library, manual work."" class=""wp-image-1687""/></a><figcaption>Download the JAR file - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1688,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_09.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_09-1024x576.png"" alt=""Place JAR file in the lib folder - external library, manual work."" class=""wp-image-1688""/></a><figcaption>Place JAR file in the lib folder - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1689,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_10.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_10-1024x576.png"" alt=""Java project with added external library - external library, manual work."" class=""wp-image-1689""/></a><figcaption>Java project with added external library - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1690,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_11.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_11-1024x576.png"" alt=""Add library, menu option &quot;Project Structure...&quot; - external library, manual work."" class=""wp-image-1690""/></a><figcaption>Add library, menu option ""Project Structure..."" - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1692,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_12.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_12-1024x576.png"" alt=""Add library, menu option &quot;+ New Project Library -&gt; Java&quot; - external library, manual work."" class=""wp-image-1692""/></a><figcaption>Add library, menu option ""+ New Project Library -&gt; Java"" - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1693,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_13.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_13-1024x576.png"" alt=""Add library, search for JAR file - external library, manual work."" class=""wp-image-1693""/></a><figcaption>Add library, search for JAR file - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1694,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_14.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_14-1024x576.png"" alt=""Add library, choose modules - external library, manual work."" class=""wp-image-1694""/></a><figcaption>Add library, choose modules - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1695,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_15.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_15-1024x576.png"" alt=""Added external library overview - external library, manual work."" class=""wp-image-1695""/></a><figcaption>Added external library overview - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1696,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_16.png""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_manual-work_16-1024x576.png"" alt=""External library class 'StrngUtils' usage overview - external library, manual work."" class=""wp-image-1696""/></a><figcaption>External library class 'StringUtils' usage overview - external library, manual work.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As we can see in the first approach, adding an external library manually isn't easy and time efficient. There is a room for improvement, and this was noticed by developers and they wrote some code that automates this process. When I started working with Java projects, manual work was not a big problem. I was sceptical about tools such as Maven, because it was something new that I had to learn, and I was so busy with manual work that I didn't have time for improvement. But finally I switched into build automation tools, and it was such a productivity booster!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>Second approach - adding an external library automatic with Maven tool</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's time to show the second approach which is <strong>adding an external library automatic with Maven</strong>. This process is fully automated, once we create a Maven project, the only thing we need to do is to add Maven dependency, and ""Load Maven Changes"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below screenshots shows in great detail step-by-step how to add an external library, each screen shot has a description. There is no need to explain the whole process separately.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":1716,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_01.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_01.png"" alt=""Create Maven project - external library, automated with Maven."" class=""wp-image-1716""/></a><figcaption>Create&nbsp;Maven project - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1717,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_02.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_02.png"" alt=""Creating Maven project, properties - external library, automated with Maven."" class=""wp-image-1717""/></a><figcaption>Creating Maven project, properties - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1718,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_03.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_03-1024x576.png"" alt=""Search 'commons-lang' library at www.mvnrepository.com - external library, automated with Maven."" class=""wp-image-1718""/></a><figcaption>Search 'commons-lang' library at www.mvnrepository.com - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1719,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_04.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_04-1024x576.png"" alt=""Copy 'dependency' for 'commons-lang' library for Maven use - external library, automated with Maven."" class=""wp-image-1719""/></a><figcaption>Copy 'dependency' for 'commons-lang' library for Maven use - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1720,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_05.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_05-1024x576.png"" alt=""External class usage, without added Maven 'dependency', error missing class - external library, automated with Maven."" class=""wp-image-1720""/></a><figcaption>External class usage, without added Maven 'dependency', error missing class - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1722,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_06.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_06-1024x576.png"" alt=""Add Maven 'dependency' and 'Load Maven Changes' to use library classes - external library, automated with Maven."" class=""wp-image-1722""/></a><figcaption>Add Maven 'dependency' and 'Load Maven Changes' to use library classes - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {""align"":""center"",""id"":1723,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<div class=""wp-block-image""><figure class=""aligncenter size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_07.png"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/java-add-external-library_automated-with-maven_07-1024x576.png"" alt=""External library class 'StrngUtils' usage with Maven 'dependency', overview - external library, automated with Maven."" class=""wp-image-1723""/></a><figcaption>External library class 'StringUtils' usage with Maven 'dependency', overview - external library, automated with Maven.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Developers should always follow the DRY (don't repeat yourself), a principle of software development, which in this case fits perfectly. In conclusion I can say that it's always good to ""work smart not hard"", but at the very beginning in Java programming, manual work is still perfectly fine. As Junior Java Developers we may use manal work, but later on, we definitely have to use automation build tools like Maven.</p>
<!-- /wp:paragraph -->",1970-01-01
1673,"Projekt Praktyczny - Java, Spring, Hibernate, zewnętrzne API, JUnit - Weatherman - Junior Java Developer","<!-- wp:paragraph -->
<p>W tym artykule zaprezentuję projekt praktyczny, który pozwala przyszłemu Junior Java Developer'owi zaprezentować swoje umiejętności praktyczne jednocześnie unikając <strong>Pułapki szablonu CRUD ...</strong> oraz pokazując pełen stos technologiczny języka Java uznawany obecnie za standard branżowy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Projekt zakłada stworzenie aplikacji, która pobiera dane od użytkownika, np.: przez www, na podstawie tych danych komunikuje się&nbsp;za pomocą API z zewnętrznym systemem wykorzystując protokuł HTTP, a zwrócony wynik po przetworzeniu jest zapisywany do bazy danych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Wiele osób zmaga się z realizacją podobnych projektów, zaprezentowany projekt może być realizowany:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Na własne potrzeby, np.: do portfolio.</strong></li><li><strong>Dla Bootcamp, np.: projekt grupowy.</strong></li><li><strong>Dla firmy, np.: weryfikacja wiedzy, umiejętności zdobytych na szkoleniu.</strong></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Przedstawię konkretną implementację aplikacji umożliwiającej zbieranie danych z serwisu pogodowego, stąd nazwa aplikacji Weatherman, czyli pogodynka. Zaprezentowana aplikacja jest na tyle uniwersalna, że może posłużyć jako szablon, który można zastosować do implementacji innych aplikacji korzystających z zewnętrznego API, np.: </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Dane z NASA - <a rel=""noreferrer noopener"" href=""https://api.nasa.gov/"" target=""_blank"">https://api.nasa.gov</a>.</li><li>Integracja z Trello - <a rel=""noreferrer noopener"" href=""http://www.trello.org/help.html"" target=""_blank"">http://www.trello.org/help.html</a>.</li><li>System wypożyczania samochodu w np.: Avis - <a rel=""noreferrer noopener"" href=""https://developer.avis.com"" target=""_blank"">https://developer.avis.com</a>.</li><li>Międzynarodowa stacja kosmiczna (ISS) - <a rel=""noreferrer noopener"" href=""http://open-notify.org/Open-Notify-API/ISS-Location-Now/"" target=""_blank"">http://open-notify.org/Open-Notify-API/ISS-Location-Now/</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Wykorzystane narzędzia i technologie:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Aplikacja trójwarstwowa (User Interface, Service, Repository, Database).</li><li>Spring, Hibernate, H2Database.</li><li>Testy jednostkowe w JUnit.</li><li>Automatyzacja procesu budowania - Maven.</li><li>Cały kod w git - branch, Pull Request.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>User enters/requests Location e.g. Warsaw, app retreives Weather Data from external API e.g. OpenWeatherApi and stores Location request along with collected weather data in database - technologies: Java, CLI, Hibernate, OkHttp3, JUnit 5, H2Database; architecture, three layers Java Monolith: Controller, Service, Mapper, Dao.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aplikacja zakłada wykorzystanie wiedzy zdobytej w poniższych artykułach (<strong>znajomość poniższych artykułów nie jest wymagana</strong>):</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" target=""_blank"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a>.</li><li><a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>.</li><li><a href=""https://www.juniorjavadeveloper.pl/2021/04/22/komunikacja-front-end-www-z-back-end-java-junior-java-developer/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2021/04/22/komunikacja-front-end-www-z-back-end-java-junior-java-developer/"">Komunikacja front-end www z back-end Java – Junior Java Developer</a>.</li><li><a href=""https://www.juniorjavadeveloper.pl/2021/07/03/wprowadzenie-do-git-z-wykorzystaniem-intellij-idea-realny-przypadek-uzycia/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2021/07/03/wprowadzenie-do-git-z-wykorzystaniem-intellij-idea-realny-przypadek-uzycia/"" target=""_blank"" rel=""noreferrer noopener"">Wprowadzenie do git z wykorzystaniem IntelliJ IDEA. Realny przypadek użycia</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Wymagania do aplikacji</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Każdy projekt zaczyna się od wymagań dotyczących funkcjonalności danej aplikacji, czyli tego, co dana aplikacja ma robić i jakie funkcje udostępnia. Takie wymagania można otrzymać od np.: klienta, przełożonego, kierownika projektu czy product owner'a. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":6} -->
<h6 class=""has-text-align-center"">Poniżej wymagania do tworzonej aplikacji Weatherman</h6>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na podstawie wprowadzonej przez użytkownika lokalizacji aplikacja pobiera aktualne dane pogodowe pochodzące z zewnętrznego serwisu pogodowego. Dane pogodowe zapisywane są do bazy danych w formie ""historii wyszukiwania"". Użytkownik ma możliwość wyświetlenia ""historii wyszukiwania"" oraz wyświetlenia zapisanych danych pogodowych z ""historii wyszukiwania"".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>STOP! Zanim zaczniesz kodować - Analiza, Projekt i Implementacja</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wiem, że to brzmi dziwnie, ale kodowanie odkładamy na sam koniec. W mojej ocenie kodowanie stanowi jedynie 30% z całego procesu wytwarzania oprogramowania, pozostałe 70%, to ustalanie, co tak na prawdę należy zaimplementować. Dawno już minęły czasy, gdy programista ""zamykał się w piwnicy"" i kodował, a po pół roku prezentował coś, czego klient, tak na prawdę nie zamawiał. Więcej o tym piszę w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" target=""_blank"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Oczywiście danych zebranych w poniższym procesie nie należy traktować jako ostatecznych tzw. wyroczni, ponieważ mogą one zmienić się w w czasie. Poniższy proces pozwala nam usystematyzować naszą wiedzę na temat tworzonej aplikacji. Zamiast chaotycznej zbieraniny myśli będziemy mieli punkt wsparcia w trakcie kodowania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>Analiza</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Proces analizy składa się kilku kroków, poniżej wykorzystam w praktyce każdy z nich.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1. Opis w formie tekstu spisanego np. w notatniku.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ten punkt mamy już opisany, zrealizowany w sekcji ""Wymagania do aplikacji"". Oczywiście wymagania mogłyby być uszczegóławiane i zmieniane w czasie, ale na potrzeby tego artykułu przyjmuję, że ""wymagania do aplikacji"" są kompletne.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Wybranie rzeczowników i czasowników z opisu.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Rzeczowniki (<strong>przyszłe klasy Java</strong>)</th><th><strong>Czasowniki (przyszłe metody w klasach Java)</strong></th></tr></thead><tbody><tr><td>Lokalizacja, Użytkownik, Dane pogodowe, Historia wyszukiwania</td><td><em>Wprowadzenie</em> (lokalizacji), <em>Pobranie</em> (danych pogodowych), <em>Wyświetlenie</em> (historii wyszukiwania)</td></tr></tbody></table><figcaption>Wybrane rzeczowniki i czasowniki z opisu wymagań do aplikacji</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p><br>3. Karty CRC – Class Responsibility Collaborators.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th>Class (Lokalizacja)</th><th></th></tr></thead><tbody><tr><td>Responsibility</td><td>Collaborators</td></tr><tr><td>Przechowuje dane. POJO - Plain Old Java Object.</td><td></td></tr></tbody></table><figcaption>Klasa Lokalizacja - karta CRC</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>W większości przypadków kod pisany w języku Java, czyli klasy, zmienne i metody będą piane w języku angielskim. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>Projekt</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Dla projektu również jest kilka kroków do wykonania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1. Podział aplikacji na warstwy</strong>.<strong>!!!</strong><br>2. Diagram klas w UML.<br>3. Makiety GUI.<br>4. Lista end-point’ów REST i/lub API.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>Implementacja</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>""Przyszedł czas na upragnioną implementację, zanim do tego przejdziemy, kilka słów wyjaśnienia.&nbsp;<em>Tak, tak znów odwlekamy implementację, ale im więcej czasu poświęcimy na analizę i projekt tym więcej błędów, nieporozumień unikniemy podczas implementacji.</em> [...] <strong>Zawsze powtarzam, że zanim przystąpimy do kodowania musimy zrozumieć, co tak na prawdę mamy do zakodowania. Żeby zrozumieć tworzony system musimy zapytać, uzgodnić szczegóły z osobą i/lub firmą, która zleca nam stworzenie systemu.</strong>&nbsp;Pozwoli, to nam uniknąć wielu nieporozumień, nieprzyjemnych sytuacji oraz wielu godzin refaktorowania i/lub przepisywania tworzonego systemu."" - źródło: <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" target=""_blank"" rel=""noreferrer noopener"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>TODO: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wywołanie API za pomocą Postman <a href=""https://openweathermap.org/current"">https://openweathermap.org/current</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>pokazać jak wygenerować POJO z JSON...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href=""https://openweathermap.org/current"">https://openweathermap.org/current</a></p>
<!-- /wp:paragraph -->",1970-01-01
1702,"Wprowadzenie do git z wykorzystaniem IntelliJ IDEA. Realny przypadek użycia - geek.justjoin.it","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule przedstawię praktyczne wykorzystanie systemu git bez konieczności znajomości konsolowych poleceń tak, aby maksymalnie wykorzystać system git oraz produktywność przy pracy z tym systemem, którą dostarcza IntelliJ IDEA z graficznym interfejsem dla git’a. Prezentowane zagadnienia będą zarówno od strony teoretycznej, jak i praktycznej. To nie jest kolejny kurs git, ale realny przypadek użycia git w dowolnym projekcie zarówno komercyjnym jak i projekcie do portfolio.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {""align"":""wide"",""mediaPosition"":""right"",""mediaId"":1707,""mediaLink"":""https://www.juniorjavadeveloper.pl/?attachment_id=1707"",""linkDestination"":""media"",""mediaType"":""image"",""mediaSizeSlug"":""full"",""verticalAlignment"":""center"",""imageFill"":true,""focalPoint"":{""x"":""0.33"",""y"":""0.51""},""extUtilities"":[]} -->
<div class=""wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center is-image-fill""><div class=""wp-block-media-text__content""><!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><a href=""https://geek.justjoin.it/wprowadzenie-do-git-z-wykorzystaniem-intellij-idea-realny-przypadek-uzycia"" target=""_blank"" rel=""noreferrer noopener"">https://geek.justjoin.it/wprowadzenie-do-git-z-wykorzystaniem-intellij-idea-realny-przypadek-uzycia</a></p>
<!-- /wp:paragraph --></div><figure class=""wp-block-media-text__media"" style=""background-image:url(https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/wprowadzenie-fo-gita-1100x585-1.jpg);background-position:33% 51%""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/wprowadzenie-fo-gita-1100x585-1.jpg""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/07/wprowadzenie-fo-gita-1100x585-1.jpg"" alt=""Wprowadzenie do git z wykorzystaniem IntelliJ IDEA. Realny przypadek użycia"" class=""wp-image-1707 size-full""/></a></figure></div>
<!-- /wp:media-text -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapraszam do lektury artykułu “Wprowadzenie do git z wykorzystaniem IntelliJ IDEA. Realny przypadek użycia”, który napisałem dla&nbsp;<a rel=""noreferrer noopener"" href=""https://www.linkedin.com/company/just-join-it/"" target=""_blank"">Just Join IT</a>&nbsp;pod czujnym okiem&nbsp;<a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/adam-%C5%82opusiewicz/"" target=""_blank"">Adam Łopusiewicz</a>&nbsp;😉</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Omówię poniższe zagadnienia związane z git:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Pobranie zdalnego repozytorium – git clone.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Utworzenie lokalnego branch’a – git branch.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Umieszczenie zmian w lokalnym repozytorium – git commit.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Umieszczenie zmian w zdalnym repozytorium – git push.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przekazanie kodu do review – Pull/Merge Request.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Pobranie zmian ze zdalnego repozytorium – git pull.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">przedstawię mój sposób pracy z git, który wypracowałem sobie przez lata pracy na stanowisku Java Developer’a.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Mój sposób pracy z git jako Java Developer</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Rano pobranie zmian ze zdalnego repozytorium –&nbsp;<strong>git pull</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">W trakcie pracy dla każdej funkcjonalności tworzę branch –&nbsp;<strong>git branch</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przed wyjściem z pracy przesłanie zmian do zdalnego repozytorium –&nbsp;<strong>git push</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Review kodu, czyli&nbsp;<strong>git push</strong>&nbsp;w połączeniu z Pull/Merge Request.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Aktualna oferta dostępna na&nbsp;<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->",2021-07-03
1754,"Adding an external library into a project, why use a build tool like Maven?","<!-- wp:paragraph -->
<p>I would like to invite you to read the article ""Adding an external library into a project, why use a build tool like Maven?"" that I wrote for <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/company/bulldogjob/"" target=""_blank"">Bulldogjob - The Space for IT People</a>. <strong>Check how to automate the process of adding an external library with several clicks.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:media-text {""mediaPosition"":""right"",""mediaId"":1756,""mediaLink"":""https://www.juniorjavadeveloper.pl/?attachment_id=1756"",""linkDestination"":""custom"",""mediaType"":""image"",""extUtilities"":[]} -->
<div class=""wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile""><div class=""wp-block-media-text__content""><!-- wp:paragraph {""align"":""left"",""placeholder"":""Treść..."",""fontSize"":""normal""} -->
<p class=""has-text-align-left has-normal-font-size"">In this article, I will describe how to add an external library to a project. First I will start with the most common way, adding an external library manually, but unfortunately, this method is not the best one. Then I will move to build automation tool Maven, this method is the preferred one for automatically adding external libraries into a project. All presented in my favorite IDE which is IntelliJ IDEA.</p>
<!-- /wp:paragraph --></div><figure class=""wp-block-media-text__media""><a href=""https://bulldogjob.pl/news/1861-adding-an-external-library-into-a-project-why-use-a-build-tool-like-maven"" target=""_blank"" rel=""noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2021/11/191121_Adding_External_Library_with_Maven.png"" alt=""Adding an external library into a project, why use a build tool like Maven?"" class=""wp-image-1756 size-full""/></a></figure></div>
<!-- /wp:media-text -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Link to the entire article: <a rel=""noreferrer noopener"" href=""https://bulldogjob.pl/news/1861-adding-an-external-library-into-a-project-why-use-a-build-tool-like-maven"" data-type=""URL"" data-id=""https://bulldogjob.pl/news/1861-adding-an-external-library-into-a-project-why-use-a-build-tool-like-maven"" target=""_blank"">https://bulldogjob.pl/news/1861-adding-an-external-library-into-a-project-why-use-a-build-tool-like-maven</a></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below table shows a comparison of adding external libraries, manual work vs automated with Maven.</p>
<!-- /wp:paragraph -->

<!-- wp:table {""align"":""wide"",""className"":""is-style-regular"",""extUtilities"":[]} -->
<figure class=""wp-block-table alignwide is-style-regular""><table><thead><tr><th>Lp.</th><th><strong>Manual work</strong></th><th>Automated with Maven</th></tr></thead><tbody><tr><td>1.</td><td><strong>Create</strong> Java project</td><td><strong>Create</strong> Maven project</td></tr><tr><td>1. a)</td><td><strong>Create</strong> folder e.g.: lib</td><td>N/A</td></tr><tr><td>2.</td><td><strong>Find</strong> a library in the Maven Repository</td><td><strong>Find</strong> a library in the Maven Repository</td></tr><tr><td>3.</td><td><strong>Download</strong> JAR file</td><td><strong>Add</strong> Maven &lt;dependency&gt;</td></tr><tr><td>3. a)</td><td><strong>Place</strong> JAR file in the lib folder</td><td>N/A</td></tr><tr><td>3. b)</td><td><strong>Add</strong> library to the project</td><td>N/A</td></tr><tr><td>4.</td><td><strong>Start</strong> using the external library</td><td><strong>Build</strong> Maven project to start using the external library</td></tr></tbody></table><figcaption class=""wp-element-caption"">Comparison adding an external library, manual work vs automated with Maven</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>For more articles visit my website <a href=""http://www.juniorjavadeveloper.pl"" target=""_blank"" rel=""noreferrer noopener"">www.juniorjavadeveloper.pl</a>. You can contact me by email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Current offer you can find at <a href=""https://www.juniorjavadeveloper.pl/oferta/"" target=""_blank"" rel=""noreferrer noopener"">https://www.juniorjavadeveloper.pl/oferta/</a>.</p>
<!-- /wp:paragraph -->",2021-11-22
1759,"From UML Class Diagram through Domain Model into Java classes","<!-- wp:paragraph -->
<p>Przykładowy model dziedziny dla ""aplikacji bankowej"":</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Bank</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Client</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Account</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Transfer</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Czym jest model dziedziny? W dużym uproszczeniu to słownik głównych pojęć używanych w aplikacji. Skąd akurat taki, a nie inny model dziedziny? Jak taki model dziedzint został ""wybrany"" dla ""aplikacji bankowej""? Wybrany on zostały w kolejnych krokach zgodnie z artykułem <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>. Model dziedziny zostanie zamieniony na klasy Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zastosowanie w praktyce wiedzy z artykułu ""Stop! Zanim zaczniesz..."":</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Opis w formie tekstu:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Aplikacja bankowa umożliwia klientom zakładanie kont bankowych. Klienci mogą posiadać więcej niż jedno konto w banku. Klient ma możliwość wykonywania przelewu między kontami.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Wybranie rzeczowników i czasowników z opisu:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Rzeczowniki: Aplikacja bankowa, klient, konto, przelew.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czasowniki: Zakładanie kont, wykonywanie przelewu. </li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Może się&nbsp;wydawać, że wybrane cztery klasy - Bank, Client, Account, Transfer - to mało, ale jak się później okaże, to całkiem spora ilość, która pozwoli na stworzenie głównego modułu w aplikacji bankowej. Cztery klasy pozwolą również na ""wygenerowanie"" sporej ilości kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W dalszej części artykułu umieszczę tabelę prezentującą jak z grubsza można oszacować ilość początkowego, szablonowego kodu, który będzie musiał powstać dla ""głównego modułu"" aplikacji bankowej. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej pokażę jak może wyglądać kod Java dla naszego głównego modelu dziedziny, czyli klas: Bank, Client, Account, Transfer. Jest to uproszczony model dziedziny bez dodatkowych złożonych ralacji, np. zamiast dodatkowej klasy Address dane przechowujemy w polu typu String, czyli private String address; zamiast private Address address;.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Bank
public class Bank {
    private String name;
    private String address;
    private List&lt;Client> clients;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Client
public class Client {
    private String firstName;
    private String lastName;
    private String address;
    private List&lt;Account> accounts;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Account
public class Account {
    private String number;
    private BigBecimal balance;
    private boolean active;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Transfer
public class Transfer {
    private Account accountFrom;
    private Account accountTo;
    private BigDecimal amount;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Ważnym elementem, który wiąże się z wybranymi klasami są relacje między tymi klasami - opisane w moim artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"" target=""_blank"">Stop! Zanim zaczniesz pisać kod ...</a>. Relacje możemy podzielić na dwie główne ""kategorie"": IS-A oraz HAS-A. W telegraficznym skrócie: <strong>Relacja IS-A (jest)</strong> – dziedziczenie (inheritance), np.: Car IS-A Vehicle – Samochód jest Pojazdem. <strong>Relacja HAS-A (ma)</strong> – kompozycja (composition), np.:  Car HAS-A Engine – Samochód ma Silnik. Dodatkowe informacje <a rel=""noreferrer noopener"" href=""https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php"" target=""_blank"">Inheritance (IS-A) vs. Composition (HAS-A) Relationship</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Założenia, co do elementów aplikacji:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1. Cztery warstwy: prezentacji, logiki biznesowej, dostępu do danych, mapper'ów - opisane w moim artykule - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" data-type=""post"" data-id=""746"" target=""_blank"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Każda z warstw jest CRUD'em + lista - opisane w moim artykule - <a href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" data-type=""post"" data-id=""617"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej opiszę jedną ścieżkę przejścia między poszczególnymi warstwami. Co mam na myśli pisząc scieżka przejścia? Chodzi o pokazanie relacji, zależności między klasami oraz metody, które są wywoływane dla poszczególnych zależności. Poszczególne warstwy będą zwykłymi klasami Java z nazwami modelu dziedziny (np. Account) plus sufiks (np. Controller) informujący o danej warstwie, co w połączeniu da nazwę klasy AccountController. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Często taką ścieżkę przejści nazywam happy-path, czyli działająca w idealnych warunkach jedna funkcja aplikacji. Przykładem happy-path może być wypłata środków z konta bankowego. Zakładam, że są dostępne środki na koncie, klient nie planuje wypłacić ujemnej kwoty (np. -100 PLN). Po powrocie na ""stronę główną"" z informacją o koncie klient widzi pomniejszone saldo dla swojego konta.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Warstwa prezentacji - klasy Controller.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Warstwa logiki biznesowej - klasy Service.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Warstwa dostępu do danych - klasy Repository.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Warstwa mapper'ów - klasy Mapper.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Dla powyższych warst będziemy mieli następujące klasy dla modelu Account:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>AccountController - warstwa prezentacji.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>AccountService - warstwa logiki biznesowej.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>AccountRepository - warstwa dostępu do danych.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>AccountMapper - warstwa mapper'ów.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Warstwa prezentacji
public class AccountController {
    // zależność do kolejnej warstwy - logika biznesowa
    private AccountService accountService;

    // C - create
    public void create() {
    }
    // R - read
    public void read() {
    }
    // U - update
    public void update() {
    }
    // D - delete
    public void delete() {
    }
    // L - list
    public void list() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Warstwa logiki biznesowej
public class AccountService {
    // zależność do kolejnej warstwy - dostęp do danych
    private AccountRepository accountRepository;

    // C - create
    public void create() {
    }
    // R - read
    public void read() {
    }
    // U - update
    public void update() {
    }
    // D - delete
    public void delete() {
    }
    // L - list
    public void list() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Warstwa dostępu do danych
public class AccountRepository {
    // zależność do Hibernate, który zapisuje do bazy danych
    private SessionFactory sessionFactory;

    // C - create
    public void create() {
    }
    // R - read
    public void read() {
    }
    // U - update
    public void update() {
    }
    // D - delete
    public void delete() {
    }
    // L - list
    public void list() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Warstwa mapper'ów
public class AccountMapper {
    // C - create
    public void create() {
    }
    // R - read
    public void read() {
    }
    // U - update
    public void update() {
    }
    // D - delete
    public void delete() {
    }
    // L - list
    public void list() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:table {""hasFixedLayout"":true,""align"":""full"",""className"":""is-style-regular"",""extUtilities"":[]} -->
<figure class=""wp-block-table alignfull is-style-regular""><table class=""has-fixed-layout""><tbody><tr><td class=""has-text-align-center"" data-align=""center""></td><td><strong>Bank</strong></td><td><strong>Client</strong></td><td><strong>Account</strong></td><td><strong>Transfer</strong></td><td>W sumie</td></tr><tr><td class=""has-text-align-center"" data-align=""center"">Prezentacja (CRUD+L)</td><td>5</td><td>5</td><td>5</td><td>5</td><td></td></tr><tr><td class=""has-text-align-center"" data-align=""center"">Logika biznesowa (CRUD+L)</td><td>5</td><td>5</td><td>5</td><td>5</td><td></td></tr><tr><td class=""has-text-align-center"" data-align=""center"">Dostęp do danych (CRUD+L)</td><td>5</td><td>5</td><td>5</td><td>5</td><td></td></tr><tr><td class=""has-text-align-center"" data-align=""center"">Mapper (4x from)</td><td>4</td><td>4</td><td>4</td><td>4</td><td></td></tr><tr><td class=""has-text-align-center"" data-align=""center"">Testy jednostkowe (3x CRUD+L)</td><td>15</td><td>15</td><td>15</td><td>15</td><td></td></tr><tr><td class=""has-text-align-center"" data-align=""center""></td><td>34</td><td>34</td><td>34</td><td>34</td><td>136</td></tr></tbody></table><figcaption class=""wp-element-caption"">Ilość metod dla poszczególnych elementów (warstwy, testy jednostkowe) dla głównego modelu dziedziny.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p> https://marekhudyma.com/code-style/2021/02/01/uncle-bob-about-functions.html</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zgodnie z rekomendacjami Uncle Bob, w książce <strong><a rel=""noreferrer noopener"" href=""https://helion.pl/ksiazki/czysty-kod-podrecznik-dobrego-programisty-robert-c-martin,czykov.htm"" data-type=""URL"" data-id=""https://helion.pl/ksiazki/czysty-kod-podrecznik-dobrego-programisty-robert-c-martin,czykov.htm"" target=""_blank"">Czysty kod. Podręcznik dobrego programisty</a></strong> Robert C. Martin - ""Uncle Bob"" napisał ""Functions should hardly ever be 20 lines long."" - rozdział ""Chapter 3: Functions"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mając na uwadze powyższe, sumaryczną ilość metod 136, dla ""głównego modułu"" aplikacji bankowej mnożymy przez 20 linii kodu, w sumie otrzymujemy 2720 linii kodu! A to dopiero początek implementacji aplikacji, na razie mamy podział na warstwy, testy jednostkowe, a to wszystko tylko dla zwykłego CRUD'a. Aplikacja będzie rozrastać się wraz z nowymi wymaganiami.</p>
<!-- /wp:paragraph -->",1970-01-01
1762,"Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić - jest w śród nich Spring Framework - Just Join IT - ACCEPTED","<!-- wp:paragraph -->
<p>W tym artykule przedstawie moją subiektywną listę błędów, które popełniają w pracy młodzi programiści oraz postaram się przedstawić sposoby radzenia sobie z takimi problemami. Ja również popełniałem podobne błędy. Zapraszam do lektury.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Większość młodych programistów popełnia te same błędy, które negatywnie wpływają na wizerunek danej osoby oraz wyniki pracy całego zespołu. Błędy te zapewne wynikają z braku doświadczenia jak również z chęci wykazania się osoby, która rozpoczęła pracę w projekcie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić</h3>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><li><strong>Błąd:</strong> Przywiązywanie się do własnego kodu.<ul><li><strong>Rozwiązanie:</strong> Nie przywiązujemy się do kodu, ale bierzemy za niego odpowiedzialność.</li></ul></li><li><strong>Błąd:</strong> Nie napisanie nawet linijki kodu.<ul><li><strong>Rozwiązanie:</strong> Robimy to, co możemy, to więcej niż nic nie zrobione.</li></ul></li><li><strong>Błąd:</strong> Popadanie w nieskończoną pętlę problemu.<ul><li><strong>Rozwiązanie:</strong> Nie boksujemy się z problemem, szukamy pomocy i/lub przełączamy się na inne zadanie.</li></ul></li><li><strong>Błąd:</strong> Nadmierne używanie framework'ów.<ul><li><strong>Rozwiązanie:</strong> Czysty kod, Spring nie jest remedium na wszystko.</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3>1. Przywiązywanie się do własnego kodu.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Chyba największym problemem młodych programistów jest przywiązywanie się do napisanego przez siebie kodu. Należy pamiętać, że jedyną stałą rzeczą w kodzie jest jego ciągła zmiana. Nad kodem aplikacji pracuje cały zespół, niejednokrotnie rozproszony, międzynarodowy zespół. Do zarządzania zmianami w kodzie wykorzystuje się rozproszony system kontroli wersji taki jak git. Zmiana, którą wprowadziliśmy w kodzie wieczorem przed wyjściem z pracy rano może zostać nadpisana przez osobę z zespołu, która pracuje w innej strefie czasowej. To samo może być w dowolnym momencie pracy nad kodem. Korzystając z git'a nie ma mowy, żeby powiedzieć, to nie moja zmiana, git śledzi każdą zmianę w kodzie oraz zapisuje informacje o autorze, który dokonał tej zmiany - <a rel=""noreferrer noopener"" href=""https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-blame"" data-type=""URL"" data-id=""https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-blame"" target=""_blank"">git blame</a>. <strong>Dla wspólnego dobra projektu, zamiast wypierać się własnego kodu, bo działa niepoprawnie lub przywiązywać się do niego, bo jest idealnym rozwiązaniem, poddajmy nasz kod zmianie.</strong> Należy pamiętać, że kod, który nie jest odporny na zmianę staje się trudny w utrzymaniu (poprawianiu błędów) i/lub w rozwoju (dodawanie nowych funkcjonalności). <em><strong>Pamiętajmy, nie przywiązujemy się do naszego kodu, ale bierzemy za niego odpowiedzialność!</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wiem jak mi samemu ciężko było modyfikować kod, który kosztował mnie tak wiele pracy i czasu, żeby go stworzyć. Na początku mojej pracy jako programista Java miałem za zadanie odwzorować model bazy danych w kodzie Java. Stworzyłem wiele klas i relacji między nimi, zajęło mi, to sporo czasu. Później dowiedziałem się, że model bazy danych nie jest najlepszy i należy go zmienić, mój kod również, przepisałem wszystko od nowa. Innym przykładem może być kod, który realizował funkcjonalność Anti-Money Laundering (AML) w systemie bankowym. Po napisaniu kodu zmieniły się przepisy i regulacje, oczywiście kod musiał się zmienić. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>2. Nie napisanie nawet linijki kodu.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Młodszy programista może nie zdawać sobie sprawy z tego, że jego nawet niewielki udział w kodzie jest bardzo pomocny dla całego zespołu, a nie napisanie nawet najmniejszego fragmentu kodu może generować opóźnienia w projekcie. Zadanie polegające na np. zapisaniu danych z zewnętrznego serwisu pogodowego, na początku może wydawać się bardzo trudne. Dlatego zadanie rozbijamy na mniejsze elementy np. stworzenie klas zawierających dane pogodowe, łączenie się z zewnętrznym API za pomocą protokołu HTTP, utrwalenie danych w bazie danych. Nadal zadanie może wydawać się skomplikowane, ale młodszy programista widzi, że może stworzyć klasy, które przechowują dane pogodowe tzw. klasy <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" target=""_blank"">POJO</a> oraz dodatkowo <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" target=""_blank"">serwis CRUD</a> służący do zapisywania tych danych. Jeżeli programista wykona te dwa mniejsze zadania, to bardziej doświadczony programista z zespołu będzie miał już gotową bazę do dalszego rozwoju, nie będzie musiał wykonywać żmudnej pracy, a od razu zabrać się za implementację. Tak, nawet taka niewielka pomoc jest bardzo przydatna w projekcie! <em><strong>Robimy to, co możemy, to więcej niż nic nie zrobione.</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Taką pozornie niewielką pomocą w mojej pracy jako programista Java okazało się napisanie kodu pobierającego dane od użytkownika. Stworzyłem formularze html bez użycia żadnego framework'a, proste &lt;form> oraz &lt;input>, następnie napisałem klasy Java, które odpowiadały polom z formularzy html. Niby proste zadanie, ale tych formularzy było kilka, zajęło mi, to kilka dni. Nie mniej jednak przyspieszyło, to pracę doświadczonego programisty. Taką ""niewielką pomoc"" porównuję często do pracy przy budowie domu, to mało doświadczony pomocnik (młodszy programista) znosi materiały (klasy Java) na plac budowy, a następnie fachowiec (starszy programista) pod okiem kierownika zakłada instalację elektryczną i/lub wodną (implementuje algorytmy, logikę aplikacji).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3>3. Popadanie w nieskończoną pętlę problemu.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na początku swojej ""kariery zawodowej"" młodszy programista, często wpada w jak ja, to nazywam nieskończoną pętlę, w której próbuje wykonać powierzone mu zadanie lub rozwiązać napotkany problem. Jeżeli programista poświęcił dużo czasu na próbę implementacji zadania lub rozwiązania problemu, to musi jak najszybciej opuścić nieskończoną pętlę, w której się znalazł. W języku Java w kodzie należało by użyć instrukcji <strong>break</strong>, która przerwała by nieskończoną pętlę. W realnym świecie można, to zrobić na kilka sposobów, np.: <strong>poprosić o pomoc bardziej doświadczonego kolegi z zespołu i/lub przełączyć się na inne zadanie</strong>, które pozwoli nam z dystansem spojrzeć na nasz problem. <em><strong>Należy pamiętać, nie boksujemy się z problemem, szukamy pomocy i/lub przełączamy się na inne zadanie.</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3. a). Łatwo powiedzieć, żeby opuścić pętlę nieskończoną, a trudniej, to wykonać. Dobrze pamiętam jak samemu wpadałem w takie zapętlenia, które niestety generowały niepotrzebne opóźnienia i zgrzyty w projekcie. Na początku mojej pracy jako programista Java, nie mając doświadczenia, a chcąc się wykazać zabrałem się za zadanie pobrania i zapisania zgód marketingowych użytkownika w serwisie internetowym. Bez wnikania w szczegóły techniczne, walczyłem ze stroną www, która była podzielona na sekcje &lt;div&gt;, których nie dało się objąć jednym formularzem html &lt;form&gt;, co uniemożliwiało przesłanie kompletnych danych do serwera i zapisania ich w bazie danych. Spędziłem nad tym tydzień czasu, co chwile świętując sukces, a następnie zaliczając porażkę. Będąc o krok od sukcesu zapominałem o paśmie nieudanych prób rozwiązania problemu, to była moja nieskończona pętla, którą za późno przerwałem. Poprosiłem o pomoc bardziej doświadczonego programistę, który spokojnie powiedział, że tak się nie da, że muszę i mogę zmienić istniejący kod. Tak, to takie proste z perspektywy czasu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>4. Nadmierne używanie framework'ów.</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zauważyłem, że większość młodszych programistów Java, traktuje <a href=""https://spring.io/"" data-type=""URL"" data-id=""https://spring.io/"" target=""_blank"" rel=""noreferrer noopener"">Spring Framework</a> jak remedium dla wszelkich zadań do wykonania oraz problemów do rozwiązania. Owszem, Spring jako framework jest bardzo przydatny, obecnie bez niego trudno sobie wyobrazić tworzenie projektów. Nie zwalnia on jednak programistów z myślenia nad tworzonym kodem. Nadal obowiązują dobre praktyki wytwarzania oprogramowania takie, jak <a href=""https://en.wikipedia.org/wiki/SOLID"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/SOLID"" target=""_blank"" rel=""noreferrer noopener"">SOLID</a>, <a href=""https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" target=""_blank"" rel=""noreferrer noopener"">DRY</a> czy <a href=""https://en.wikipedia.org/wiki/KISS_principle"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/KISS_principle"" target=""_blank"" rel=""noreferrer noopener"">KISS</a>. Wciąż należy pamiętać o paradygmatach programowania obiektowego: dziedziczenie, polimorfizm oraz enkapsulacja. Należy wiedzieć jakie struktury danych użyć, aby tworzony kod był wydajny. Tak, można stworzyć projekt bez użycia Spring Framework, a następnie nanieść adnotacje Spring'owe. <em><strong>Spring Framework nie jest remedium na wszystko.</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pamiętam aplikację, którą studenci tworzyli pod moim okiem - zgodnie z zasadą <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" target=""_blank"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>. Przez cztery tygodnie zrobiliśmy analizę oraz projekt. Kolejne cztery tygodnie poświęciliśmy na implementację rdzenia aplikacji: podział na warstwy i moduły, model danych, utrwalanie danych oraz REST API - wszystko bez Spring Framework. Jak dziś dzień pamiętam rosnące z tygodnia na tydzień zdenerwowanie studentów, którzy codziennie dopytywali dlaczego jeszcze nie używamy Spring'a?! Przeprowadziłem dla studentów krótkie szkolenie ze Spring Framework. Po szkoleniu poprosiłem studentów o dodanie do projektu zależności (Maven Dependencies) dla Spring Framework, a następnie o naniesienie adnotacji Spring'owych dla stworzonych wcześniej klas Java. Nastała ""cisza"", nikt więcej nie dopytywał o Spring Framework, Spring był, działał, ale sam ""czysty kod Java"" nadal działał w ""niezmienionej postaci"". <em><strong>Przez ten opis nie umniejszam wartości jaką niesie ze sobą Spring Framework, chcę jedynie przekazać, że Spring Framework nie jest remedium na wszystko.</strong></em></p>
<!-- /wp:paragraph -->",2022-01-16
1785,"Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić - geek.justjoin.it","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zapraszam do lektury artykułu ""Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić"", który napisałem dla <a href=""https://geek.justjoin.it/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic"" data-type=""URL"" data-id=""https://geek.justjoin.it/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic"" target=""_blank"" rel=""noreferrer noopener"">Just Join IT</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3,""extUtilities"":[]} -->
<h3 class=""wp-block-heading"" id=""najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic"">Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić</h3>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Błąd:</strong> Przywiązywanie się do własnego kodu.<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>Rozwiązanie:</strong> Nie przywiązujemy się do kodu, ale bierzemy za niego odpowiedzialność.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Błąd:</strong> Nie napisanie nawet linijki kodu.<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>Rozwiązanie:</strong> Robimy to, co możemy, to więcej niż nic nie zrobione.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Błąd:</strong> Popadanie w nieskończoną pętlę problemu.<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>Rozwiązanie:</strong> Nie boksujemy się z problemem, szukamy pomocy i/lub przełączamy się na inne zadanie.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Błąd:</strong> Nadmierne używanie framework’ów.<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>Rozwiązanie:</strong> Czysty kod, Spring nie jest remedium na wszystko.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:embed {""url"":""https://geek.justjoin.it/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic"",""type"":""wp-embed"",""providerNameSlug"":""just-geek-it""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-just-geek-it wp-block-embed-just-geek-it""><div class=""wp-block-embed__wrapper"">
https://geek.justjoin.it/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2272""></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie autorstwa <strong><a href=""https://www.pexels.com/pl-pl/@gustavo-fring?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels"">Gustavo Fring</a></strong> z <strong><a href=""https://www.pexels.com/pl-pl/zdjecie/kobieta-notatnik-dziewczyna-bez-twarzy-4173335/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels"">Pexels</a></strong></p>
<!-- /wp:paragraph -->",2022-02-07
1809,"Jakie realne wymagania dla Junior Java Developer'a? – Just Join IT – ACCEPTED","<!-- wp:paragraph -->
<p>Patrząc na oferty pracy oraz wymagania dla Junior Java Developer'a można utonąć w morzu technologii i narzędzi, które młodszy programista musi znać już na samym początku. W tym artykule przedstawię minimalne wymagania, które musi spełniać kandydat na stanowisko Junior Java Developer. Lista wymagań, którą przedstawię wynika z mojego doświadczenia oraz ze współpracy z moimi uczniami.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Numer jeden #1, jeszcze przed przedstawieniem technologii i narzędzi. Jednym z najważniejszych wymagań są szeroko rozumiane kompetencje miękkie, np.: praca w zespole, komunikacja z innymi pracownikami w firmie, samodzielność oraz rozwiązywanie problemów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kiedy już wiemy, co jest numerem jeden wśród wymagań dla młodszego programisty możemy zająć się równie istotnymi elementami takimi jak technologie i narzędzia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Technologie</strong>: Język Java (min. wersja 8, 11), Spring Framework, Hibernate ORM, JUnit5, HTML, HTTP.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Narzędzia</strong>: IntelliJ, Maven/Gradle, git/GitHub (PullRequest).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Powyższy zestaw wymagań dla Junior Java Developer'a pozwoli sprawnie poruszać się w pracy jak młodszy programista. <strong>Dodatkowo moim zdaniem powyższe wymagania dla młodszego programisty powinny mieć następujące priorytety:</strong> Java, git, Maven/Gradle, JUnit5, HTTP, REST, HTML, JSON a na samym końcu Spring Framework oraz Hibernate ORM. Dlaczego takie, a nie inne technologi i narzędzia w konkretnej kolejności? Wszystko to opiszę podając przykład ""jednego dnia z pracy Junior Java Developer'a"".</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Znajomość języka programowania, np.: Java umożliwi nam pisanie kodu źródłowego ;)</li><li>git - współdzielenie i praca nad kodem źródłowym z innymi członkami zespołu.</li><li>Maven/Gradle - automatyzacja procesu wytwarzania oprogramowania, np.: budowanie, testowanie, uruchamianie.</li><li>JUnit5 - weryfikacja poprawności działania istniejącego i/lub nowego kodu za pomocą testów.</li><li>Znajomość HTTP, REST, HTML, JSON.</li><li>Spring Framework - wsparcie programisty przy tworzeniu złożonych aplikacji, np.: aplikacji web, cloud.</li><li>Hibernate ORM - obiektowo relacyjne mapowanie klas Java na tabele w bazie danych i/lub odwrotnie.</li></ol>
<!-- /wp:list -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">1. Znajomość języka programowania, np.: Java umożliwi nam pisanie kodu źródłowego ;)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>O wymaganiu dotyczącym znajomości samego języka Java nie muszę oczywiście pisać</strong>. Należy pamiętać, że język, to tylko narzędzie służące do realizacji wymagań dotyczących tworzonego oprogramowania. Przed przystąpieniem do kodowania zachęcam do zapoznania się z moim artykułem <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"" target=""_blank"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">2. git - współdzielenie i praca nad kodem źródłowym z innymi członkami zespołu.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeżeli już otrzymaliśmy komputer do pracy, uprawnienia do zasobów firmy oraz zostaliśmy przydzieleni do konkretnego projektu, to po za dokumentacją powinniśmy otrzymać link (adres URL, np.: <a rel=""noreferrer noopener"" href=""https://github.com/juniorjavadeveloper-pl/weatherman"" target=""_blank"">https://github.com/juniorjavadeveloper-pl/weatherman</a>) do repozytorium z kodem źródłowym projektu nad którym będziemy pracowali.<strong> Tutaj pojawia się wymaganie umiejętności korzystania z narzędzia git.</strong> Otrzymany link pozwoli nam pobrać kod źródłowy aplikacji, nad którą będziemy pracować, pobrać ze zdalnego repozytorium i utworzyć swoje lokalnego repozytorium. Następnie zgodnie ze sztuką powinniśmy utworzyć własną gałąź, dodać wymagany kod źródłowy, a następnie zrobić <a href=""https://www.atlassian.com/git/tutorials/making-a-pull-request"" data-type=""URL"" data-id=""https://www.atlassian.com/git/tutorials/making-a-pull-request"" target=""_blank"" rel=""noreferrer noopener"">Pull Request</a> z prośbą o przegląd naszego kodu. Więcej szczegółów z przykładami na temat pracy z narzędziem git można znaleźć w moim artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2021/07/03/wprowadzenie-do-git-z-wykorzystaniem-intellij-idea-realny-przypadek-uzycia/"" data-type=""post"" data-id=""1702"" target=""_blank"">Wprowadzenie do git z wykorzystaniem IntelliJ IDEA. Realny przypadek użycia</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">3. Maven/Gradle - automatyzacja procesu wytwarzania oprogramowania, np.: budowanie, testowanie, uruchamianie.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pobrany kod źródłowy projektu należy zbudować i uruchomić. W większości projektów nie będzie, to łatwa sprawa, bo projekty są rozbudowane z dużą ilością kodu, zależności oraz modułów. Na szczęści proces budowania projektów jest zautomatyzowany, ale <strong>tutaj pojawia się wymaganie umiejętności korzystania z narzędzia Maven lub Gradle</strong>. Pamiętam jeden projekt, którego proces budowania trwał jedną godzinę, a zależności i moduły musiał się budować w odpowiedniej kolejności oraz czasie. Opisałem tutaj proces lokalnego budowania projektu na potrzeby pojedynczego developera, ale na tym nie koniec, bo obecnie projekty są automatycznie budowane przez różne narzędzia tzw. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Continuous_integration"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Continuous_integration"" target=""_blank"">Continuous Integration (CI)</a> takie jak np. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jenkins_(software)"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Jenkins_(software)"" target=""_blank"">Jenkins</a> lub narzędzia dostępne bezpośrednio na <a rel=""noreferrer noopener"" href=""https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/"" data-type=""URL"" data-id=""https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/"" target=""_blank"">GitHub</a> i/lub <a rel=""noreferrer noopener"" href=""https://docs.gitlab.com/ee/ci/pipelines/"" data-type=""URL"" data-id=""https://docs.gitlab.com/ee/ci/pipelines/"" target=""_blank"">Gitlab</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">4. JUnit5 - weryfikacja poprawności działania istniejącego i/lub nowego kodu za pomocą testów.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W momencie kiedy mamy już pobrany działający kod aplikacji możemy przystąpić do tworzenia własnego kodu źródłowego zgodnie z wymaganiami odnośnie nowej funkcji w aplikacji lub poprawki dla istniejącej funkcjonalności. Kiedy skończymy pracę nad naszym kodem należałoby sprawdzić poprawność działania naszego kodu, robiąc to w sposób zautomatyzowany i nie naruszając spójności danych klientów korzystających z aplikacji produkcyjnie. Wyobraźmy sobie, że dla systemu bankowego dodaliśmy prowizje przy przelewach dla kont VIP. Nikt nie da nam dostępu do rzeczywistych danych klientów, a tym bardziej możliwości przelewów prawdziwych pieniędzy. <strong>Tutaj pojawia się wymaganie umiejętności tworzenia testów z wykorzystaniem biblioteki JUnit5.</strong> Dzięki temu będziemy mogli przetestować przelewy i prowizje bez posiadania dostępu do danych klientów oraz ich środków pieniężnych.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">5. Znajomość HTTP, REST, HTML, JSON.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Obecnie tworzy się aplikacje działające przez przeglądarkę, a ściślej rzecz ujmując, aplikacje korzystające z protokołu HTTP w oparciu o architekturę klient-serwer. Na temat samej komunikacji klient-serwer napisałem oddzielny artykuł, zachęcam do lektury <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2021/04/22/komunikacja-front-end-www-z-back-end-java-junior-java-developer/"" data-type=""post"" data-id=""1419"" target=""_blank"">Komunikacja front-end www z back-end Java</a>. Aplikacje oparte o protokół HTTP mogą komunikować się ""w trybie"" użytkownik (człowiek) &lt;-&gt; aplikacja (komputer) lub ""w trybie"" aplikacja (komputer) &lt;-&gt; aplikacja (komputer). W dużym uproszczeniu, w pierwszym trybie użytkownik korzysta ze stron www, które są napisane w HTML i/lub JavaScript, w drugim trybie aplikacje komunikują się same ze sobą korzystając z z architektury REST. <strong>Tutaj pojawia się wymaganie znajomości takich elementów jak HTTP, REST, HTML, JSON.</strong> Aplikacje tworzone w chmurze również korzystają z protokołu HTTP i architektury REST.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">6. Spring Framework - wsparcie programisty przy tworzeniu złożonych aplikacji, np.: aplikacji web, cloud.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Kiedy mamy już zbudowaną aplikację z kodu źródłowego, który pobraliśmy z repozytorium git, dopisaliśmy nową funkcjonalność do aplikacji oraz przetestowaliśmy jej działanie, to przyszedł czas na <a href=""http://www.spring.io"" data-type=""URL"" data-id=""www.spring.io"" target=""_blank"" rel=""noreferrer noopener"">Spring Framework</a>. Dlaczego dopiero ""prawie na samym końcu"" Spring Framework? Pisałem już o tym w moim artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2022/02/07/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic-geek-justjoin-it/"" data-type=""post"" data-id=""1785"" target=""_blank"">Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić</a>: ""4. Nadmierne używanie framework’ów - Zauważyłem, że większość młodszych programistów Java, traktuje Spring Framework jak remedium dla wszelkich zadań do wykonania oraz problemów do rozwiązania. Owszem, Spring jako framework jest bardzo przydatny, obecnie bez niego trudno sobie wyobrazić tworzenie projektów. Nie zwalnia on jednak programistów z myślenia nad tworzonym kodem."". Oczywiście zdaję sobie sprawę, że w trakcie budowania aplikacji jak również podczas pisania nowej funkcjonalności wraz z testami mogą wystąpić problemy ze Spring Framework. <strong>Tutaj pojawia się wymaganie znajomości Spring Framework.</strong> Pisząc o tym framework'u na samym końcu chcę kolejny raz podkreślić fakt nadużywania framework'ów oraz potrzeby pisania ze zrozumieniem czystego kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""textAlign"":""center"",""level"":4} -->
<h4 class=""has-text-align-center"">7. Hibernate ORM - obiektowo relacyjne mapowanie klas Java na tabele w bazie danych i/lub odwrotnie.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zacznę od tego, że tak jak w przypadku Spring Framework, tak Hibernate ORM nie zwalnia programistów z myślenia nad tworzonym kodem. Ten framework jest przyczynkiem do rozmowy o modelu dziedziny, który w telegraficznym skrócie jest słownikiem głównych pojęć używanych w projekcie, aplikacji, np.: dla systemu bankowego modelem dziedziny będą pojęcia: Bank, Client, Account, Transfer. Hibernate ORM dla klas Java stworzy tabele w bazie danych wraz z ograniczeniami i relacjami, poniekąd zwalnia, to programistę ze znajomości języka SQL i pozwala skupić się na tworzeniu właściwego modelu dziedziny. Moim zdaniem poprawny model dziedziny jest kluczem do sukcesu dla projektu, jest on tym samym, co solidne fundamenty dla budowy domu. Na początku nauki Junior Java Developer'a zachęcam do korzystania z tego framework'a i <strong>tutaj pojawia się wymaganie znajomości Hibernate ORM</strong>. Dodam jeszcze, że nie widziałem dużego komercyjnego projektu, który produkcyjnie do obsługi setek tysięcy klientów używałby Hibernate ORM, do prototypowania oraz proof-of-concept owszem, Hibernate ORM ma ogromne zastosowanie i jest bardzo użyteczny.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, po mimo, że oferty pracy dla Junior Java Developer'ów są przepełnione wymaganiami odnośnie znajomości technologii, moim zdaniem najważniejsze, to znajomość poniższych elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Znajomość języka programowania, np.: Java umożliwi nam pisanie kodu źródłowego ;)</li><li>git - współdzielenie i praca nad kodem źródłowym z innymi członkami zespołu.</li><li>Maven/Gradle - automatyzacja procesu wytwarzania oprogramowania, np.: budowanie, testowanie, uruchamianie.</li><li>JUnit5 - weryfikacja poprawności działania istniejącego i/lub nowego kodu za pomocą testów.</li><li>Znajomość HTTP, REST, HTML, JSON.</li><li>Spring Framework - wsparcie programisty przy tworzeniu złożonych aplikacji, np.: aplikacji web, cloud.</li><li>Hibernate ORM - obiektowo relacyjne mapowanie klas Java na tabele w bazie danych i/lub odwrotnie.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na https://www.juniorjavadeveloper.pl/oferta/</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa...</p>
<!-- /wp:paragraph -->",1970-01-01
1810,"Java, wyrażenia Lambda dla każdego - kod Java krok po kroku","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule postaram się przybliżyć zagadnienie wyrażeń Lambda dostępnych w języku Java. Wyrażenia Lambda skracają zapis kodu, tym samym czyniąc go bardziej czytelnym. Może się to wydawać niewielką zaletą i cały szum w około, tego elementu języka Java jest na wyrost. Na szczęście poprawa czytelności kodu jest bardzo duża. W telegraficznym skrócie, zamiast tworzyć nową klasę Java (nowy plik), która składa się z ośmiu linijek kodu, możemy utworzyć jedno linijkowe wyrażenie Lambda, które zrobi, to samo, co oddzielna klasa, dodatkowo całość kodu mamy w jednym miejscu - brak potrzeby nawigowania po klasach. Wyrażenia Lambda swój pełen potencjał pokazują w połączeniu z Java Streams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Artykuł podzielę na dwie sekcje, każda z sekcji będzie składać się z trzech kroków pokazujących przejście, przeobrażenie się kodu do wyrażeń Lambda. Na sam koniec prezentuję praktyczne zastosowanie wyrażeń Lambda z Java Streams - <a href=""https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html"" target=""_blank"" rel=""noreferrer noopener"">Processing Data with Java SE 8 Streams</a>. W momencie kiedy znamy już wyrażenia Lambda nie musimy przechodzić przez cały proces, krok po kroku, wystarczy ostatnia forma z punktu <a href=""#sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"" data-type=""internal"" data-id=""#sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"">Proste wyrażenie Lambda - anonimowa implementacja metody interfejsu</a>. Tworzenie wyrażeń Lambda w krokach opisane w tym artykule są w celach edukacyjnych.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zamiast tworzyć nową klasę Java (nowy plik), która składa się z ośmiu linijek kodu (plus klasa z metodą main(), do uruchomienia przykładu) ...</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class RetroJukebox implements Jukebox {
    @Override
    public void makeNoise() {
        System.out.println(""Retro Make Some Noise!"");
    }
}

public class LambdaStepByStepMain {
    public static void main(String[] args) {
        Jukebox retroJukebox = new RetroJukebox();
        retroJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">... możemy utworzyć jedno linijkowe wyrażenie Lambda (plus klasa z metodą main(), do uruchomienia przykładu).</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        Jukebox lambdaJukebox = 
            () -> System.out.println(""Lambda Make Some Noise!"");
        lambdaJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworzenie wyrażeń Lambda odbywa się przy użyciu interfejsu funkcyjnego. Jest, to interfejs dobrze znany z języka Java. Interfejs funkcyjny, musi posiadać jedną i tylko jedną metodę, która musi być publiczna i abstrakcyjna. Domyślnie, metody w interfejsach są publiczne i abstrakcyjne, stąd brak słów kluczowych przy metodzie - public abstract void makeNoise().</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Więcej informacji o interfejsach można znaleźć tutaj <a href=""https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html"" target=""_blank"" rel=""noreferrer noopener"">Interfaces (The Java™ Tutorials &gt; Learning the Java Language &gt; Interfaces and Inheritance)</a>, informacje o interfejsie funkcyjnym tutaj <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"" target=""_blank"" rel=""noreferrer noopener"">FunctionalInterface (Java Platform SE 8)</a>. Interfejs funkcyjny jest ""normalnym"" interfejsem Java, który ma pewne ograniczenia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Oficjalna dokumentacja <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"" target=""_blank"">Oracle Java opisuje wyrażania Lambda</a> w następujący sposób ""Lambda expressions let you express instances of single-method classes more compactly."". Moja własna interpretacja jest następująca, ""lambda, to anonimowa implementacja metody"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""className"":""ticss-38e1b35c"",""fontSize"":""large""} -->
<p class=""ticss-38e1b35c has-large-font-size"">Dla uproszczenia, działanie kodu zaprezentuję przy użyciu metody <code>main()</code>. Właściwym podejściem było by utworzenie testu jednostkowego, który weryfikuje poprawność działania napisanego kodu. Poniżej kod z metodą <code>main()</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        // TODO: Implementacja wyrażenia Lambda, krok po kroku ...
        // Sekcja #1 ...
        // Sekcja #2 ...
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"" id=""sekcja-1-prosta-metoda-dla-wyrazen-lambda"">Sekcja #1 - prosta metoda dla wyrażeń Lambda</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dla tego przykładu przyjmuję, że <em>prosta metoda</em>, to taka która nie przyjmuje parametrów oraz nic nie zwraca.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej kod interfejsu funkcyjnego <code>Jukebox</code> z metodą <code>void makeNoise()</code>, który będzie używany do zaprezentowania wyrażeń Lambda. Jak widać metoda <code>makeNoise()</code> nie przyjmuje parametrów - puste nawiasy () - oraz nie zwraca wartości - słowo kluczowe void.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@FunctionalInterface
public interface Jukebox {
    void makeNoise();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Korzystanie z interfejsu, również funkcyjnego, wymaga jego implementacji. Poniżej zaprezentuję kilka sposobów implementacji interfejsu. Przejście do utworzenia wyrażenia Lambda, czyli anonimowej implementacji metody, rozpocznę od kilku ""kroków wstecz"", tak, aby dokładnie wyjaśnić, dlaczego nazywam, to anonimową implementacją metody. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kroki, które pozwolą zrozumieć proces przejścia do wyrażenia Lambda:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Klasyczna implementacja interfejsu z wykorzystaniem oddzielnej klasy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Anonimowa implementacja interfejsu z wykorzystaniem anonimowej klasy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Proste wyrażenie Lambda - anonimowa implementacja metody interfejsu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Warto zapoznać się z oficjalną dokumentacją Oracle Java - <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/whentouse.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/whentouse.html"" target=""_blank"">When to Use Nested Classes, Local Classes, Anonymous Classes, and Lambda Expressions</a>, aby w pełni zrozumieć kroki, które opisuję poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"" id=""sekcja-1-ad-1-implementacja-interfejsu-oddzielna-klasa"">Klasyczna implementacja interfejsu z wykorzystaniem oddzielnej klasy</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej opisany jest pierwszy krok do zrozumienia wyrażeń Lambda, czyli klasyczna implementacja interfejsu z wykorzystaniem oddzielnej klasy.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class RetroJukebox implements Jukebox {
    @Override
    public void makeNoise() {
        System.out.println(""Retro Make Some Noise!"");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Taki sposób implementacji interfejsu oraz jego metody wymaga stworzenia dodatkowej, oddzielnej klasy, pliku z kodem Java. Następnie dla nowej klasy trzeba będzie stworzyć obiekt, wywołać odpowiednią metodę, co prezentuje poniższy kod.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        Jukebox retroJukebox = new RetroJukebox();
        retroJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Retro Make Some Noise!

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jak widać powyższe rozwiązanie wymaga sporo kodu, który jest ""rozrzucony"" w dwóch różnych klasach, RetroJukeBox oraz LambdaStepByStepMain. Tak wygląda klasyczne podejście do pisania kodu w języku Java. Wyrażenia Lambda zmieniają, to podejście.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-default""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-default""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"" id=""sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"">Anonimowa implementacja interfejsu z wykorzystaniem anonimowej klasy</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej opisany jest drugi krok do zrozumienia wyrażeń Lambda, czyli anonimowa implementacja interfejsu z wykorzystaniem anonimowej klasy.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        Jukebox anonymousJukebox = new Jukebox() {
            @Override
            public void makeNoise() {
                System.out.println(""Anonymous Make Some Noise!"");
            }
        };
        anonymousJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższy sposób implementacji nie wymaga oddzielnej klasy, zastępuje ją anonimowa implementacja interfejsu, która wykorzystuje klasę anonimową z implementacją metody makeNoise(), a następnie tworzy dla niej obiekt - <em>Jukebox anonymousJukebox = new Jukebox() {}</em>. Ponownie wywołana zostaje odpowiednia metoda.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ten fragment kodu można rozbić na kilka elementów, aby lepiej go zrozumieć:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Deklaracja zmiennej <strong>anonymousJukebox</strong>, typu <strong>Jukebx</strong> (interfejs funkcyjny), do której przypisujemy wartość - fragment <strong>Jukebox anonymousJukebox =</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Anonimowa klasa, która implementuje metodę <strong>makeNoise()</strong> interfejsu <strong>Jukebox</strong> - poniższy fragment kodu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">new Jukebox() {
    @Override
    public void makeNoise() {
        System.out.println(""Anonymous Make Some Noise!"");
    }
};</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Więcej informacji o anonimowych klasach można znaleźć tutaj <a href=""https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html"" target=""_blank"" rel=""noreferrer noopener"">Anonymous Classes (The Java™ Tutorials &gt; Learning the Java Language &gt; Classes and Objects)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Anonymous Make Some Noise!

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-default""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-default""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"" id=""sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"">Proste wyrażenie Lambda - anonimowa implementacja metody interfejsu</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej opisany jest trzeci krok do zrozumienia wyrażeń Lambda, który prezentuje wyrażenia Lambda we własnej osobie.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        Jukebox lambdaJukebox = 
            () -> System.out.println(""Lambda Make Some Noise!"");
        lambdaJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Anonimowa implementacja metody z wykorzystaniem wyrażenia Lambda - zamiast tworzyć dodatkową, oddzielną klasę (plik z kodem Java) jak w <a href=""#sekcja-1-ad-1-implementacja-interfejsu-oddzielna-klasa"" data-type=""internal"" data-id=""#sekcja-1-ad-1-implementacja-interfejsu-oddzielna-klasa"">Ad. 1. Klasyczna implementacja interfejsu z wykorzystaniem oddzielnej klasy</a> lub anonimową klasę implementującą interfejs jak w <a href=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"" data-type=""internal"" data-id=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"">Ad. 2. Anonimowa implementacja interfejsu z wykorzystaniem anonimowej klasy</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ten fragment kodu trzeba rozbić na kilka elementów, aby lepiej zrozumieć wyrażenia Lambda: <strong>Jukebox lambdaJukebox = () -&gt; System.out.println(""Lambda Make Some Noise!"");</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Deklaracja zmiennej <strong>lambdaJukebox</strong>, typu <strong>Jukebx</strong> (interfejs funkcyjny), do której przypisujemy wartość - fragment <strong>Jukebox lambdaJukebox =</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Anonimowa implementacja metody z wykorzystaniem wyrażenia Lambda - fragment <strong>() -&gt; System.out.println(""Lambda Make Some Noise!"");</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@FunctionalInterface
public interface Jukebox {
    void makeNoise();
}

Jukebox lambdaJukebox = 
    () -> System.out.println(""Lambda Make Some Noise!"");</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Lambda Make Some Noise!

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-default""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-default""/>
<!-- /wp:separator -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        // Ad. 1. Klasyczna implementacja interfejsu z wykorzystaniem oddzielnej klasy
        Jukebox retroJukebox = new RetroJukebox();
        retroJukebox.makeNoise();

        // Ad. 2. Anonimowa implementacja interfejsu z wykorzystaniem anonimowej klasy
        Jukebox anonymousJukebox = new Jukebox() {
            @Override
            public void makeNoise() {
                System.out.println(""Anonymous Make Some Noise!"");
            }
        };
        anonymousJukebox.makeNoise();

        // Ad. 3. Proste wyrażenie Lambda - anonimowa implementacja metody interfejsu
        Jukebox lambdaJukebox = () -> System.out.println(""Lambda Make Some Noise!"");
        lambdaJukebox.makeNoise();
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższy kod prezentuje wszystkie kroki w jednym miejscu, to cały proces przejścia do wyrażeń Lambda w jednej metodzie <code>main()</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Retro Make Some Noise!
Anonymous Make Some Noise!
Lambda Make Some Noise!

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain dla wszystkich kroków prowadzących do wyjaśnienia wyrażenia Lambda - dla <a href=""#sekcja-1-prosta-metoda-dla-wyrazen-lambda"">Sekcja #1 - prosta metoda dla wyrażeń Lambda</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej prezentuję w jednym miejscu wszystkie kroki. Jest, to cały proces przejścia do wyrażeń Lambda. Oczywiście pisząc kod wyrażeń Lambda nie musimy przechodzić przez cały proces, krok po kroku, wystarczy ostatnia forma <a href=""#sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"">Ad. 3. Proste wyrażenie Lambda - anonimowa implementacja metody interfejsu</a> Tworzenie wyrażeń Lambda w krokach opisane w tym artykule są w celach edukacyjnych.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""#sekcja-1-ad-1-implementacja-interfejsu-oddzielna-klasa"">Ad. 1. Klasyczna implementacja interfejsu...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class RetroJukebox implements Jukebox {
    @Override
    public void makeNoise() {
        System.out.println(""Retro Make Some Noise!"");
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"" data-type=""internal"" data-id=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"">Ad. 2. Anonimowa implementacja interfejsu...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Jukebox anonymousJukebox = new Jukebox() {
    @Override
    public void makeNoise() {
        System.out.println(""Anonymous Make Some Noise!"");
    }
};</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""#sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"">Ad. 3. Proste wyrażenie Lambda...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Jukebox lambdaJukebox = 
    () -> System.out.println(""Lambda Make Some Noise!"");</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W powyższym kodzie widać, jak dla metody <code>public void makeNoise()</code> ""znikają zbędne elementy"", które kompilator Java dobrze zna, bo opisaliśmy je w interfejsie <code>Jukebox</code>. Co rozumiem przez znikające zbędne elementy?</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Zbędne elementy dla wyrażenia Lambda, to: sama deklaracja metody <code>public void makeNoise</code> oraz ciało metody zawarte między nawiasami klamrowymi <code>{System.out.println(""Anonymous Make Some Noise!"");}</code>. </li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Niezbędne elementy dla wyrażania Lambda, to: parametry metody zawarte między nawiasami <code>()</code> oraz ciało metody umieszczone po ""strzałce"" <code>-&gt; System.out.println(""Anonymous Make Some Noise!"");</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:group {""align"":""wide"",""layout"":{""type"":""flex"",""orientation"":""vertical"",""justifyContent"":""center""}} -->
<div class=""wp-block-group alignwide""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group=""""> public void makeNoise() {
    System.out.println(""Anonymous Make Some Noise!"");
 }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">() -> System.out.println(""Lambda Make Some Noise!""); </pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:group -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Więcej informacji o metodach można znaleźć tutaj <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html"" target=""_blank"">Defining Methods (The Java™ Tutorials &gt; Learning the Java Language &gt; Classes and Objects)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"" id=""sekcja-2-metoda-zlozona-dla-wyrazen-lambda"">Sekcja #2 - metoda złożona dla wyrażeń Lambda</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dla tego przykładu przyjmuję, że <em>metoda złożona</em>, to taka, która przyjmuje parametr oraz zwraca wartość.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej kod interfejsu funkcyjnego <code>Printer</code> z metodą <code>String printText(String text)</code>, który będzie używany do zaprezentowania wyrażeń Lambda. Jak widać metoda przyjmuje parametr 'text' oraz zwraca wartość typu 'String'.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@FunctionalInterface
public interface Printer {
    String printText(String text);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Posiadając wiedzę z sekcji #1 pozwolę sobie zaprezentować tylko cały proces przejścia do wyrażeń Lambda, zawierający wszystkie kroki w jednym miejscu.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""https://www.juniorjavadeveloper.pl/wp-admin/post.php?post=1810&amp;action=edit#sekcja-1-ad-1-implementacja-interfejsu-oddzielna-klasa"">Ad. 1. Klasyczna implementacja interfejsu...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LocalPrinter implements Printer{
    @Override
    public String printText(String text) {
        return ""Local printer is printing: "" + text;
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"" data-type=""internal"" data-id=""#sekcja-1-ad-2-anonimowa-implementacja-interfejsu-anonimowa-klasa"">Ad. 2. Anonimowa implementacja interfejsu...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Printer anonymousPrinter = new Printer() {
    @Override
    public String printText(String text) {
        return ""Anonymous printer is printing: "" + text;
    }
};</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""#sekcja-1-ad-3-anonimowa-implementacja-metody-interfejsu"">Ad. 3. Proste wyrażenie Lambda...</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""width"":""70%""} -->
<div class=""wp-block-column is-vertically-aligned-center"" style=""flex-basis:70%""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Lambda - pełna wersja zapisu.
Printer fullLambdaPrinter = (text) -> {
    return ""Printing some text: "" + text;
};</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Lambda - skrócona wersja zapisu.
Printer shortLambdaPrinter = 
    text -> ""Printing some text: "" + text;</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain dla wszystkich kroków prowadzących do wyjaśnienia wyrażenia Lambda - dla <a href=""#sekcja-2-metoda-zlozona-dla-wyrazen-lambda"">Sekcja #2 - metoda złożona dla wyrażeń Lambda</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStepByStepMain {
    public static void main(String[] args) {
        // Sekcja #2

        // #1 Separate Class for Interface method 'makeNoise()' implementation.
        Printer homePrinter = new LocalPrinter();
        String homePrinterText = homePrinter.printText(""Local Home Printer example"");
        System.out.println(homePrinterText);


        // #2 Anonymous Interface implementation with method 'printText()'.
        Printer anonymousPrinter = new Printer() {
            @Override
            public String printText(String text) {
                return ""Anonymous printer is printing: "" + text;
            }
        };
        String anonymousPrinterText = 
            anonymousPrinter.printText(""Anonymous Printer example"");
        System.out.println(anonymousPrinterText);

        // #3 Lambda Anonymous method 'printText()' Implementation.
        // Lambda expression with input parameter and return value.
        // Lambda full version.
        Printer fullLambdaPrinter = (text) -> {
            return ""Printing some text: "" + text;
        };
        String fullLambdaText = fullLambdaPrinter.printText(""Full Lambda example"");
        System.out.println(fullLambdaText);

        // Lambda expression with input parameter and return value.
        // Lambda short version.
        Printer shortLambdaPrinter = text -> ""Printing some text: "" + text;
        String shortLambdaText = shortLambdaPrinter.printText(""Short Lambda example"");
        System.out.println(shortLambdaText);
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Local printer is printing: Local Home Printer example
Anonymous printer is printing: Anonymous Printer example
Printing some text: Full Lambda example
Printing some text: Short Lambda example

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wynik działania kodu z metody main() z klasy LambdaStepByStepMain dla wszystkich kroków prowadzących do wyjaśnienia wyrażenia Lambda - dla sekcji #2.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"" id=""praktyczne-zastosowanie-wyrazen-lambda-java-streams"">Praktyczne zastosowanie wyrażeń Lambda z Java Streams</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej zaprezentuję niewielki przykład praktycznego wykorzystania wyrażeń Lambda w Java Streams, pomimo, że w tym artykule nie opiszę szczegółów związanych z Java Streams. Poniższy przykład pokaże moc wyrażeń Lambda, która prowadzi do przejrzystego i eleganckiego kodu, którego logika działania jest dostępna od razu w jednym miejscu, co prowadzi do poprawy czytelności kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class LambdaStreamsMain {
    public static void main(String[] args) {
        List&lt;Person> people = Arrays.asList(
                new Person(""John"", 29, Person.Gender.MALE),
                new Person(""Christina"", 19, Person.Gender.FEMALE),
                new Person(""Max"", 33, Person.Gender.MALE)
        );

        // Using Lambda in short form ...
        List&lt;String> collectedPeopleNamesShortLambda = people.stream()
                .filter(person -> person.getGender().equals(Person.Gender.MALE))
                .map(Person::getName)
                .collect(Collectors.toList());

        System.out.println(""All male names (short Lambda): "" +
            collectedPeopleNamesShortLambda);

        // Using Lambda in full form ...
        List&lt;String> collectedPeopleNamesFullLambda = people.stream()
                .filter((person) -> person.getGender().equals(Person.Gender.MALE))
                .map((person) -> person.getName())
                .collect(Collectors.toList());

        System.out.println(""All male names (full Lambda): "" +
            collectedPeopleNamesFullLambda);
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">All male names: [John, Max]

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyżej wynik działania kodu z metody main() z klasy LambdaStreamsMain pokazującej użycie wyrażeń Lambda dla Java Streams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej kod z czasów Java 1.5 (od grudnia 2006 r.), który nie posiadał wyrażeń Lambda oraz Java Streams ...</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">List&lt;String> peopleMaleNames = new ArrayList&lt;>();
for (Person person : people) {
    if (person.getGender().equals(Person.Gender.MALE)) {
        peopleMaleNames.add(person.getName());
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>... po ośmiu latach w Java 1.8 (od marca 2014 r.) wprowadzono wyrażenia Lambda - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Java_version_history"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Java_version_history"" target=""_blank"">Wikipedia: Java version history</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">List&lt;String> collectedPeopleNamesShortLambda = people.stream()
    .filter(person ->
        person.getGender().equals(Person.Gender.MALE))
    .map(Person::getName)
    .collect(Collectors.toList());</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując powyższe dwie sekcje oraz kroki w nich zawarte, widać wyraźnie, że wyrażenie Lambda jest bardzo krótkie i zwięzłe, a dodatkowo kod implementacji samej metody makeNoise() jest od razu widoczny. To, że wyrażenia Lambda są krótkie i zwięzłe sprawia, że są bardzo użyteczne w Java Streams, które operują na Java Collections.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/ludzie-idacy-po-schodach-3685201/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/ludzie-idacy-po-schodach-3685201/"" target=""_blank"" rel=""noreferrer noopener"">Mitchell Luo</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-01-24
1822,"Jak powinny wyglądać realne wymagania dla Junior Java Developer’a? – Just Join IT","<!-- wp:paragraph -->
<p>Zapraszam do lektury artykułu ""<a href=""https://geek.justjoin.it/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera"">Jak powinny wyglądać realne wymagania dla Junior Java Developer’a?</a>"", który napisałem dla <a href=""https://www.linkedin.com/company/just-join-it/"">Just Join IT</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Patrząc na oferty pracy oraz wymagania dla Junior Java Developer’a można utonąć w morzu technologii i narzędzi, które młodszy programista musi znać już na samym początku. W tym artykule przedstawię minimalne wymagania, które musi spełniać kandydat na stanowisko Junior Java Developer. Lista wymagań, którą przedstawię wynika z mojego doświadczenia oraz ze współpracy z moimi uczniami.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Numer jeden #1, jeszcze przed przedstawieniem technologii i narzędzi. Jednym z najważniejszych wymagań są szeroko rozumiane kompetencje miękkie, np.: praca w zespole, komunikacja z innymi pracownikami w firmie, samodzielność oraz rozwiązywanie problemów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kiedy już wiemy, co jest numerem jeden wśród wymagań dla młodszego programisty możemy zająć się równie istotnymi elementami, takimi jak technologie i narzędzia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Technologie</strong>: Język Java (min. wersja 8, 11), Spring Framework, Hibernate ORM, JUnit5, HTML, HTTP.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Narzędzia</strong>: IntelliJ, Maven/Gradle, git/GitHub (PullRequest).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Powyższy zestaw wymagań dla Junior Java Developer’a pozwoli sprawnie poruszać się w pracy, jak młodszy programista. <strong>Dodatkowo moim zdaniem powyższe wymagania dla młodszego programisty powinny mieć następujące priorytety:</strong> Java, git, Maven/Gradle, JUnit5, HTTP, REST, HTML, JSON a na samym końcu Spring Framework oraz Hibernate ORM. Dlaczego takie, a nie inne technologie i narzędzia w konkretnej kolejności? Wszystko to opiszę podając przykład „jednego dnia z pracy Junior Java Developer’a”.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><li>Znajomość języka programowania, np.: Java umożliwi nam pisanie kodu źródłowego.</li><li>git – współdzielenie i praca nad kodem źródłowym z innymi członkami zespołu.</li><li>Maven/Gradle – automatyzacja procesu wytwarzania oprogramowania, np.: budowanie, testowanie, uruchamianie.</li><li>JUnit5 – weryfikacja poprawności działania istniejącego i/lub nowego kodu za pomocą testów.</li><li>Znajomość HTTP, REST, HTML, JSON.</li><li>Spring Framework – wsparcie programisty przy tworzeniu złożonych aplikacji, np.: aplikacji web, cloud.</li><li>Hibernate ORM – obiektowo relacyjne mapowanie klas Java na tabele w bazie danych i/lub odwrotnie.</li></ol>
<!-- /wp:list -->

<!-- wp:embed {""url"":""https://geek.justjoin.it/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera"",""type"":""wp-embed"",""providerNameSlug"":""just-geek-it""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-just-geek-it wp-block-embed-just-geek-it""><div class=""wp-block-embed__wrapper"">
https://geek.justjoin.it/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zapraszam do regularnego odwiedzania mojej strony <a href=""https://www.juniorjavadeveloper.pl"">https://www.juniorjavadeveloper.pl</a>, będą pojawiać się kolejne artykuły oraz do kontaktu przez email kontakt(at)juniorjavadeveloper.pl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualna oferta dostępna na&nbsp;<a href=""https://www.juniorjavadeveloper.pl/oferta/"">https://www.juniorjavadeveloper.pl/oferta/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/kobieta-za-pomoca-okularow-wirtualnej-rzeczywistosci-3183135/"">fauxels</a> z <a href=""https://www.pexels.com/pl-pl/"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2022-08-17
1920,"Trzy trójce programistyczne - jak ułatwić początki programowania","<!-- wp:paragraph -->
<p>W tym artykule przybliżę trzy elementy, które z mojego doświadczenia są bardzo istotne dla osób uczących się języka Java, aby dobrze zrozumieć programowanie obiektowe. Osoby średniozaawansowane oraz zaawansowane też mogą z tego skorzystać, traktując tę wiedzę jako powtórkę. W skład każdego z trzech głównych punktów wchodzą pomniejsze trzy elementy, stąd trzy trójce programistyczne. Poniższe trójce pozwolą stworzyć zestaw narzędzi, którymi będziemy posługiwać się przy programowaniu obiektowym.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W tym artykule umówię poniższe trójce programistyczne:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><a href=""#trzy-elementy-skladowe-klasy"" data-type=""internal"" data-id=""#trzy-elementy-skladowe-klasy"">Trzy elementy składowe klasy</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>atrybut, konstruktor, metoda.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#trzy-paradygmaty-programowania-obiektowego"" data-type=""internal"" data-id=""#trzy-paradygmaty-programowania-obiektowego"">Trzy paradygmaty programowania obiektowego</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>hermetyzacja, dziedziczenie, polimorfizm.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#trzy-elementy-wspierajace-programowanie-obiektowe"" data-type=""internal"" data-id=""#trzy-elementy-wspierajace-programowanie-obiektowe"">Trzy elementy wspierające programowanie obiektowe</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>zależność, wstrzykiwanie zależności, delegacja.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Powyższe punkty mógłbym opisać w formie oddzielnego artykułu - każdy z tematów jest bardzo obszerny - niemniej moim celem było zgrupowanie wszystkich elementów w jednym miejscu tak, aby można było spojrzeć - z ""lotu ptaka"", szerszej perspektywy - na zestaw narzędzi dostępnych dla programowania obiektowego.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Każdy z powyższych punktów jest opisany za pomocą poniższych sekcji:<br>- wyjaśnienie danego zagadnienia,<br>- kod źródłowy zagadnienia,<br>- odpowiedź na pytanie ""Co, to oznacza, że..."",<br>- kod źródłowy z ""aplikacją"" używającą dane zagadnienie,<br>- wynik działania ""aplikacji"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do czego można by wykorzystać taki zestaw narzędzi? Na przykład w codziennej pracy programistycznej, tworząc nowy kod, rozwijając istniejący lub testując go. Kod stworzony w oparciu o reguły programowania obiektowego jest elastyczny na zmiany, rozszerzalny i nadaje się do testowania - nie zawsze tak jest. Można przepisać od nowa istniejący kod, ale wymaga, to ogromnego nakładu pracy i sporego budżetu na taki projekt.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zacznę od wstępu związanego z programowaniem obiektowym. Do czego używamy programowania obiektowego? W dużym uproszczeniu i bez wnikania w szczegóły techniczne, używamy go do odwzorowania rzeczy, pojęć, obiektów otaczającego nas świata na język ""zrozumiały dla komputera"". Na szczęście <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Java_(programming_language)"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Java_(programming_language)"" target=""_blank"">Java</a> jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/High-level_programming_language"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/High-level_programming_language"" target=""_blank"">językiem programowania wysokiego poziomu</a> w odróżnieniu od np.: <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Assembly_language"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Assembly_language"" target=""_blank"">Assemblera</a>, który jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Low-level_programming_language"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Low-level_programming_language"" target=""_blank"">językiem programowania niskiego poziomu</a> - tym samym nie musimy programować instrukcji procesora, skupiamy się na ""otaczającym nas świecie"". </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przykłady elementów otaczającego nas świata , które możemy odwzorować w języku Java; rzeczy, np.: notatnik, faktura; pojęcia, np.: przesyłka, przelew; obiekty: samochód, dom. W Asemblerze ""jedno polecenie odpowiada zasadniczo jednemu rozkazowi procesora"", nie ma tu mowy o odwzorowaniu otaczającego nas świata. Pod koniec artykułu umieszczę <a href=""#assembler-vs-java"" data-type=""internal"" data-id=""#assembler-vs-java"">porównanie kodu źródłowego języka Java i Assemblera</a>, to porównanie nie stanowi istoty, tego artykułu - po prostu, z doświadczenia wiem, że lepiej pokazać na przykładzie, niż tłumaczyć teorię.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Skoro już wiemy, że język Java pozwala odwzorować otaczające nas rzeczy, pojęcia i obiekty, to czas na omówienie elementów języka, które pozwalają na wykonanie takiego odwzorowania. Podstawową jednostką, pojęciem w programowaniu obiektowym jest klasa, która jest szablonem do tworzenia konkretnych reprezentacji, czyli obiektów, np.: klasa może być szablonem dla różnych notatników, a obiektem może być, np.: notatnik w linię, kratkę, posiadający 60 kartek.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Parafrazując wyżej opisane trójce programistyczne, dodając informację, że opierają się one na klasach języka Java, mogę napisać, że klasa w języku Java:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a href=""#trzy-elementy-skladowe-klasy"" data-type=""internal"" data-id=""#trzy-elementy-skladowe-klasy"">składa się z trzech elementów</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>atrybut, konstruktor, metoda.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#trzy-paradygmaty-programowania-obiektowego"">bazuje na trzech podstawowych konwencjach, paradygmatach</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>hermetyzacja, dziedziczenie, polimorfizm.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#trzy-elementy-wspierajace-programowanie-obiektowe"">współdziała z innymi klasami poprzez tworzenie relacji</a>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>zależność, wstrzykiwanie zależności, delegacja.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Elementy klasy</em> pozwalają stworzyć szablon według naszego pomysłu; <em>konwencje, paradygmaty</em> nakładają wspólne reguły na klasy oraz poszczególne elementy składowe; <em>tworzenie relacji</em> pozwala na interakcje pomiędzy klasami. Klasa tworzy nowy typ w języku Java, taki sam jak istniejące w języku Java np.: String, LocalDateTime.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Brzmi skomplikowanie, ale nie musi tak być, dlatego napisałem ten artykuł, żeby ułatwić osobom początkującym zrozumienie powyższych elementów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center""><strong>Ważne! Wszystkie elementy kodu powinny być samo opisujące się.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje tworzenie komentarzy w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// tak tworzy się komentarz dla jednej linii w języku Java</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje w najprostszej postaci klasę języka Java  - Notebook.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// klasa w języku Java
public class Notebook {
    // ciało klasy
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Klasa jest zwykłym plikiem tekstowym, który możemy znaleźć za pomocą eksploratora plików i wyświetlić jego zawartość za pomocą dowolnego edytora tekstu. Programiści i programistki do tego celu używają zintegrowanego środowiska programistycznego (<a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Integrated_development_environment"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Integrated_development_environment"" target=""_blank"">IDE</a>), np.: <a rel=""noreferrer noopener"" href=""https://www.jetbrains.com/idea/download/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/download/"" target=""_blank"">IntelliJ IDEA Community</a>. Więcej na temat klas i obiektów w języku Java można przeczytać w oficjalnej dokumentacji na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/index.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/index.html"" target=""_blank"">The Java™ Tutorials - Lesson: Classes and Objects</a> lub <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html"" target=""_blank"">The Java™ Tutorials - Declaring Classes</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>W wielu miejscach dla maksymalnego uproszczenia przykładów pomijam pewne elementy w klasach, np.: metody getters/setters i odwołuję się bezpośrednio do atrybutów i/lub metod klasy, nie zmniejsza, to jakości przekazywanych informacji, ale moim zdaniem ułatwia zrozumienie konkretnego zagadnienia. Nie tworzę też sztucznie klas typu <a href=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" target=""_blank"" rel=""noreferrer noopener"">POJO</a>, żeby nie zaciemniać obrazu i skupić się na konkretach.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje różnicę pomiędzy klasą 'Notebook', a jej obiektem 'simpleNotebook'.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// utworzenie obiektu 'simpleNotebook' klasy 'Notebook'
Notebook simpleNotebook = new Notebook();</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":4} -->
<h4 id=""trzy-elementy-skladowe-klasy"">Trzy elementy składowe klasy</h4>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><strong>Atrybut / Pole / Zmienna</strong> - <em>pozwalają na przechowywanie stanu, cech, danych dla obiektu.</em> Dla ułatwienia będę posługiwał się tylko jednym określeniem atrybut. Pierwszy element klasy jak na złość można określać, nazywać za pomocą trzech pojęć, które wskazują na to samo. Warto o tym pamiętać, pomoże, to w wyszukiwaniu informacji w internecie. Klasa może posiadać zero lub więcej atrybutów różnego typu. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/variables.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/variables.html"" target=""_blank"">The Java™ Tutorials - Declaring Member Variables</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje klasę języka Java posiadającą jedną z trzech składowych - atrybut.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // atrybuty klasy
    int pages;
    int currentPage;
    Map&lt;Integer, String> contents = new HashMap&lt;>();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że atrybuty przechowują stanu, cech dla obiektu?</strong> Na przykładzie notatnika (klasa Notebook), kupując notatnik w sklepie posiada on cechy, takie jak rozmiar, <em>ilość stron (int pages)</em>. Używając notatnik możemy wypełnić <em>zawartością każdą ze stron (Map&lt;Integer, String&gt; contents)</em> i zaznaczyć <em>""bieżącą/ostatnią"" stronę (int currentPage)</em>. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        Notebook historyNotebook = new Notebook();
        historyNotebook.pages = 60;
        historyNotebook.contents.put(33, ""Historia powszechna."");
        historyNotebook.currentPage = 33;
        System.out.println(""Notatnik do historii: ""
                + historyNotebook);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego wykorzystanie atrybutów.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Notatnik do historii: Notebook{pages=60, currentPage=33, contents={33=Historia powszechna.}}

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item -->
<li><strong>Konstruktor</strong> - <em>umożliwia tworzenie obiektów danej klasy według wyznaczonego wzoru, schematu.</em> Klasa może posiadać zero lub więcej konstruktorów, każdy z nich dla innego wzoru, schematu. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html"" target=""_blank"">The Java™ Tutorials - Providing Constructors for Your Classes</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje klasę języka Java posiadającą jedną z trzech składowych - konstruktor.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // pomijam atrybuty klasy z punktu 1.

    // konstruktor klasy
    public Notebook() {
    }

    // konstruktor klasy
    public Notebook(int pages) {
        // ciało konstruktora, instrukcje do wykonania
        this.pages = pages;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że umożliwia tworzenie obiektów danej klasy według wyznaczonego wzoru, schematu?</strong> Podobnie jak dla atrybutów, na przykładzie notatnika (klasa Notebook), kupując notatnik w sklepie posiada on cechy, takie jak rozmiar, <em>ilość stron (int pages)</em>. Z tą różnicą, że konstruktory ""wymuszają"" podanie konkretnych danych w momencie tworzenia obiektu. Pozwala, to uniknąć sytuacji, w której wyprodukowany notatnik nie ma określonej liczby stron i musimy samemu policzyć sobie ile faktycznie jest stron. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        Notebook mathNotebook = new Notebook(90);
        System.out.println(""Ilość stron: "" + mathNotebook.pages);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego działanie konstruktora.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Ilość stron: 90

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {""ordered"":true,""start"":3} -->
<ol start=""3""><!-- wp:list-item -->
<li><strong>Metoda</strong> - <em>umożliwia wykonywanie czynności, interakcję z klasą, obiektem.</em> Klasa może posiadać zero lub więcej metod. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html"" target=""_blank"">The Java™ Tutorials - Defining Methods</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje klasę języka Java posiadającą jedną z trzech składowych - metoda.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // pomijam atrybuty klasy z punktu 1.
    // pomijam konstruktory klasy z punktu 2.

    // metoda klasy
    void writeNoteContent(String noteContent) {
        // ciało metody, instrukcje do wykonania
        contents.merge(currentPage, noteContent,
                (oldContent, newContent) 
                        -> oldContent + "" "" + newContent);
    }

    // metoda klasy
    void goToPage(int page) {
        // ciało metody, instrukcje do wykonania
        currentPage = page;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że metody umożliwiają wykonywanie czynności, interakcję z klasą, obiektem?</strong> Na przykładzie notatnika (klasa Notebook), skoro wiemy, że każdy notatnik ma stan, cechy opisujące liczbę stron (int pages), to dzięki metodzie możemy <em>""otworzyć/pójść"" do wybranej przez nas strony - void goToPage(int page)</em> - następnie <em>wpisać treść - void writeNoteContent(String noteContent)</em> - która ma być na wybranej stronie. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        Notebook smallNotebook = new Notebook(60);
        smallNotebook.goToPage(22);
        smallNotebook.writeNoteContent(""Pierwsza notatka."");
        System.out.println(""Treść notatki na bieżącej stronie: ""
                + smallNotebook);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego działanie metody.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Notebook - append note content to the current page: Pierwsza notatka.
Treść notatki na bieżącej stronie: Notebook{pages=60, currentPage=22, contents={22=Pierwsza notatka.}}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator {""className"":""is-style-default""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-default""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje klasę języka Java posiadającą wszystkie trzy składowe klasy - atrybuty, konstruktory i metody.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // atrybuty klasy
    int pages;
    int currentPage;
    Map&lt;Integer, String> contents = new HashMap&lt;>();

    // konstruktor klasy
    public Notebook() {
    }

    // konstruktor klasy
    public Notebook(int pages) {
        // ciało konstruktora, instrukcje do wykonania
        this.pages = pages;
    }

    // metoda klasy
    void writeNoteContent(String noteContent) {
        // ciało metody, instrukcje do wykonania
        contents.merge(currentPage, noteContent,
                (oldContent, newContent) 
                        -> oldContent + "" "" + newContent);
    }

    // metoda klasy
    void goToPage(int page) {
        // ciało metody, instrukcje do wykonania
        currentPage = page;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Większość klas tworzonych przez programistów, programistki wygląda podobnie jak prezentowany wyżej kod. Obiekt klasy Notebook będzie: posiadał, przechowywał swój stan; tworzył się według określonego schematu; wykonywał czynności, wchodził w interakcję.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje działanie wszystkich trzech składowych klasy - atrybuty, konstruktory i metody.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        // utworzenie obiektu 'simpleNotebook' klasy 'Notebook'
        Notebook simpleNotebook = new Notebook(9);

        System.out.println(""Bieżąca strona notatnika: ""
                + simpleNotebook.currentPage);
        simpleNotebook.goToPage(3);
        System.out.println(""Bieżąca strona notatnika,"" +
                "" po zmianie strony: "" 
                + simpleNotebook.currentPage);

        System.out.println(""Bieżąca zawartość notatnika: ""
                + simpleNotebook.contents);
        simpleNotebook.writeNoteContent(""Wpis w notatniku"");
        System.out.println(""Bieżąca zawartość notatnika,"" +
                "" po dodaniu treści: "" + simpleNotebook.contents);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego atrybuty, konstruktory i metody.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Bieżąca strona notatnika: 0
Bieżąca strona notatnika, po zmianie strony: 3
Bieżąca zawartość notatnika: {}
Notebook - append note content to the current page: Wpis w notatniku
Bieżąca zawartość notatnika, po dodaniu treści: {3=Wpis w notatniku}

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":4} -->
<h4 id=""trzy-paradygmaty-programowania-obiektowego"">Trzy paradygmaty programowania obiektowego</h4>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><strong>Hermetyzacja</strong> - <em>pozwala ""ukryć"" elementy klasy przed ""niechcianym"" dostępem z poziomu innej klasy</em> - używamy do tego modyfikatory dostępu, np.: <strong>public, protected, private</strong>. Hermetyzacja czasem nazywa się enkapsulacją. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" target=""_blank"">The Java™ Tutorials - Controlling Access to Members of a Class</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jedną z konwencji, paradygmatów programowania obiektowego - hermetyzacja.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // atrybuty klasy
    private int pages;
    private int currentPage;
    private Map&lt;Integer, String> contents = new HashMap&lt;>();

    // metoda klasy
    void goToPage(int page) {
        // ciało metody, instrukcje do wykonania
        if (page &lt; pages) {
            currentPage = page;
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że hermetyzujemy elementy klasy?</strong> Hermetyzacja, enkapsulacja chroni atrybuty, konstruktory i metody przed niewłaściwym użyciem, mówiąc inaczej, to twórcy danej klasy decydują o tym jak ona będzie się zachowywała. Na przykładzie notatnika (klasa Notebook) atrybuty są <em>""ukryte"", mają oznaczenie private</em>, <em>wybór/przejście do bieżącej strony (int currentPage)</em> możliwy jest tylko za pomocą <em>metody void goToPage(int page)</em>. Metoda <em>goToPage</em> sprawdza czy numer podanej strona jest mniejszy niż ilość wszystkich stron <em>if (page &lt; pages)</em>. Bez tego warunku ""zabezpieczającego"" program ""na ślepo"" wykonał by przejście do nieistniejącej strony, co zakończyłoby się zgłoszeniem błędu i/lub zakończeniem programu. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        Notebook hermeticNotebook = new Notebook();
        // nie można nadać wartości dla poniższych atrybutów

        // 'pages' has private access in 'Notebook'
        // hermeticNotebook.pages = 30;
        // 'currentPage' has private access in 'Notebook'
        // hermeticNotebook.currentPage = 3;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item -->
<li><strong>Dziedziczenie</strong> - <em>pozwala wydzielić wspólne elementy klasy - <em><em>stan, cechy, dan</em></em></em>e -<em> do innej klasy tzw. nad klasy</em>, która będzie rodzicem dla innych klas - używamy do tego słowa kluczowego <strong>extends</strong>. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html"" target=""_blank"">The Java™ Tutorials - Inheritance</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jedną z konwencji, paradygmatów programowania obiektowego - dziedziczenie.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // atrybuty klasy
    protected int pages;
    protected int currentPage;
    protected Map&lt;Integer, String> contents = new HashMap&lt;>();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// dziedziczenie - słowo kluczowe 'extends'
public class SpiralNotebook extends Notebook {
    // atrybuty klasy
    protected String spiralMaterial;
    protected boolean perforated;

    // metoda klasy
    void removePage(int pageNumber) {
        if (perforated) {
            pages = pages - 1;
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że dziedziczymy elementy nad klasy?</strong> Na przykładzie notatników (klasa Notebook oraz SpiralNotebook), posiadają one <em>wspólne cechy takie jak ilość stron (int pages)</em>, ale mogą być notatniki, które różnią się pewnymi cechami. Kołonotatnik (klasa SpiralNotebook) posiada <em>spiralę łączącą kartki, która może być z różnego materiału (String spiralMaterial)</em>, jego kartki <em>mogą mieć lub nie mieć perforacji (boolean perforated)</em>, która <em>umożliwia wyrwanie strony (void removePage(int pageNumber)</em>. To samo dotyczy metod i konstruktorów w klasach. Dziedziczenie pozwala zmniejszyć ilość powtarzalnego kodu oraz ujednolicić, zgrupować wiele klas w jeden typ. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {
        SpiralNotebook spiralNotebook = new SpiralNotebook();
        spiralNotebook.pages = 30;
        System.out.println(""Ilość stron: ""
                + spiralNotebook.pages);

        spiralNotebook.spiralMaterial = ""Metal"";
        System.out.println(""Materiał spirali: ""
                + spiralNotebook.spiralMaterial);

        spiralNotebook.perforated = true;
        spiralNotebook.removePage(2);
        System.out.println(""Ilość stron: ""
                + spiralNotebook.pages);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego dziedziczenie.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Ilość stron: 30
Materiał spirali: Metal
Ilość stron: 29

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><em>Praktyczna uwaga:</em> należy ostrożnie używać dziedziczenia, jeżeli to możliwe należy je zastąpić zależnością, kompozycją. Zamiast relacji IS-A (jest czymś) warto używać relacji HAS-A (ma coś). Więcej o tym pisałem w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a> w sekcji ""Analiza – Karty CRC – Class Responsibility Collaborators"".</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true,""start"":3} -->
<ol start=""3""><!-- wp:list-item -->
<li><strong>Polimorfizm</strong> - <em>pozwala tej samej metodzie zachowywać się, wykonywać kod programu w różny sposób</em> w ramach dziedziczenia klas i/lub implementacji interfejsów - polimorfizm można wskazać za pomocą adnotacji <strong>@Override</strong>. Polimorfizm w wolnym tłumaczeniu, to wielopostaciowość. Więcej na ten temat można przeczytać w oficjalnej dokumentacji języka Java na stronie <a rel=""noreferrer noopener"" href=""https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html"" target=""_blank"">The Java™ Tutorials - Polymorphism</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jedną z konwencji, paradygmatów programowania obiektowego - polimorfizm.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // pomijam atrybuty klasy
    // pomijam konstruktory klasy
    // pomijam metody klasy

    // metoda klasy
    void writeNoteContent(String noteContent) {
        // ciało metody, instrukcje do wykonania
        contents.merge(currentPage, noteContent,
                (oldContent, newContent)
                        -> oldContent + "" "" + newContent);

        System.out.println(""Notebook - append note content"" +
                "" to the current page: "" + noteContent);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class SpiralNotebook extends Notebook {
    private String spiralMaterial;
    private boolean perforated;

    void removePage(int pageNumber) {
        if (perforated) {
            pages = pages - 1;
        }
    }

    // metoda klasy używająca polimorfizmu
    // nadpisująca metodę z nad klasy
    @Override
    void writeNoteContent(String noteContent) {
        // ciało metody, instrukcje do wykonania
        contents.put(currentPage, noteContent);
        removePage(currentPage);

        System.out.println(""SpiralNotebook - write note content"" +
                "" and remove page: "" + noteContent);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że metody klasy mają wiele form, postaci - polimorfizm?</strong> Daje, to możliwość dostosowania działania metody dla klas, które <em>dziedziczą wspólne elementy (Map&lt;Integer, String&gt; contents)</em>, ale chciałby, aby ich <em>zachowanie było inne</em> - <em>@Override void writeNoteContent(String noteContent)</em> - niż klasy nadrzędnej, rodzica. Na przykład w kołonotatniku po zapisaniu strony - <em>contents.put(currentPage, noteContent) </em>- chcielibyśmy ją wyrwać - <em>removePage(currentPage)</em>. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {

        // utworzenie obiektu 'janNotebook' klasy 'Notebook'
        Notebook janNotebook = new Notebook();

        // utworzenie obiektu 'alaNotebook' klasy 'SpiralNotebook'
        Notebook alaNotebook = new SpiralNotebook();

        janNotebook.writeNoteContent(""Jan ma psa"");
        alaNotebook.writeNoteContent(""Ala ma kota"");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego działanie polimorfizmu.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Notebook - append note content to the current page: Jan ma psa
SpiralNotebook - write note content and remove page: Ala ma kota

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":4} -->
<h4 id=""trzy-elementy-wspierajace-programowanie-obiektowe"">Trzy elementy wspierające programowanie obiektowe</h4>
<!-- /wp:heading -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><strong>Zależność</strong> - inaczej powiązanie, pozwala używać jednej klasy w drugiej, zazwyczaj zależność reprezentowana jest jako atrybut klasy. Zależności tworzą relacje pomiędzy klasami.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jeden ze sposobów współdziała z innymi klasami poprzez tworzenie relacji - zależność.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Notebook {
    // pomijam atrybuty klasy
    // pomijam konstruktory klasy
    // pomijam metody klasy
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Student {
    // zależność do klasy Notebook
    // zależność jest jednocześnie atrybutem klasy Student
    private Notebook notebook;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że tworzymy zależności, powiązania do innych obiektów?</strong> Dzięki zależnościom możemy wykorzystać istniejący kod klasy i użyć go w naszych własnych klasach, co pozwala zredukować powtarzanie kodu, zaoszczędzić czas na ""wymyślanie koła"" od nowa. Pozwala na tworzenie tzw. luźnych powiązań między klasami - jest to zgodne z dobrymi praktykami programowania obiektowego.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item -->
<li><strong>Wstrzykiwanie zależności</strong> - sposób przekazywania konkretnej zależności do klasy, która jej używa.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jeden ze sposobów współdziała z innymi klasami poprzez tworzenie relacji - wstrzykiwanie zależności.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Student {
    private Notebook notebook;

    public Student(Notebook notebook) {
        this.notebook = notebook;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że wstrzykujemy zależności do innych obiektów?</strong> W momencie tworzenia obiektu decydujemy z jakiej klasy zależnej będzie korzystał tworzony obiekt. Nie ""zaszywamy na stałe"" w kodzie, nie uzależniamy się od jednej konkretnej implementacji naszego kodu. Na przykładzie klas Student i Notebook, dopiero w momencie tworzenia obiektu klasy student podajemy z jakiego notatnika będzie on korzystał, <em>zwykły notatnik - <em>new Student(new Notebook()) -</em></em> czy <em>kołonotatnik - <em>new Student(new SpiralNotebook())</em></em>. Pisanie notatek przez studenta - startNote(...) - będzie miało inny przebieg w zależności od wybranego notatnika. <strong>Obrazuje, to poniższy kod źródłowy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {

        // utworzenie obiektu 'janNotebook' klasy 'Notebook'
        Notebook tomNotebook = new Notebook(30);
        // utworzenie obiektu 'tomStudent' klasy 'Student'
        // wstrzyknięcie zależności 'tomNotebook' do klasy Student
        Student tomStudent = new Student(tomNotebook);
        tomStudent.startNote(""Pewnego dnia."", 2);

        // utworzenie obiektu 'alaNotebook' klasy 'SpiralNotebook'
        Notebook eveNotebook = new SpiralNotebook(60);
        // utworzenie obiektu 'eveStudent' klasy 'Student'
        // wstrzyknięcie zależności 'eveNotebook' do klasy Student
        Student eveStudent = new Student(eveNotebook);
        eveStudent.startNote(""Dawno temu."", 4);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej wynik programu prezentującego wstrzykiwanie zależności.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Notebook - append note content to the current page: Pewnego dnia.
SpiralNotebook - write note content and remove page: Dawno temu.

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {""ordered"":true,""start"":3} -->
<ol start=""3""><!-- wp:list-item -->
<li><strong>Delegacja</strong> - odwołanie się do klasy zależnej w celu przekazania, przekierowania do niej działania.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje jeden ze sposobów współdziała z innymi klasami poprzez tworzenie relacji - delegacja.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Student {
    private Notebook notebook;

    void writeNote(String noteContent, int page) {
        notebook.goToPage(page);
        notebook.writeNoteContent(noteContent);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><strong>Co, to oznacza, że delegujemy działanie do innych obiektów?</strong> Na przykładzie powyższej <em>klasy Student</em> i metody <em>void writeNote(String noteContent, int page)</em> - kiedy wywołujemy dla studenta metodę <em>writeNote(...)</em> - ona deleguje swoje działanie do klasy Notebook, która, wie, że musi przejść do strony - <em>notebook.goToPage(page)</em> - na której będzie mogła zapisać - <em>notebook.writeNoteContent(noteContent)</em> -  treść notatki. Tym samym wspieramy dobrą praktykę programistyczną jaką jest Single Responsibility Principle z <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/SOLID"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/SOLID"" target=""_blank"">S.O.L.I.D.</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class=""wp-block-separator has-alpha-channel-opacity""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Poniższy kod źródłowy prezentuje wszystkie sposoby współdziała z innymi klasami poprzez tworzenie relacji - zależność, wstrzykiwanie zależności oraz delegacja.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class ApplicationMain {
    public static void main(String[] args) {

        // utworzenie obiektu 'janNotebook' klasy 'Notebook'
        Notebook janNotebook = new Notebook();
        // utworzenie obiektu 'janStudent' klasy 'Student'
        Student janStudent = new Student(janNotebook);
        janStudent.startNote(""Jan ma psa"", 1);

        // utworzenie obiektu 'alaNotebook' klasy 'SpiralNotebook'
        Notebook alaNotebook = new SpiralNotebook();
        // utworzenie obiektu 'alaStudent' klasy 'Student'
        Student alaStudent = new Student(alaNotebook);
        alaStudent.startNote(""Ala ma kota"", 3);
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Notebook - append note content to the current page: Jan ma psa
SpiralNotebook - write note content and remove page: Ala ma kota

Process finished with exit code 0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:heading {""level"":5} -->
<h5 id=""assembler-vs-java"">Assembler vs Java</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na zakończenie jako ciekawostkę prezentuję porównanie kodu źródłowego języka Java i Assemblera, które moim zdaniem pokazuje jakie ułatwienie mają programiści, programistki języka Java w porównaniu z osobami piszącymi kod w Assemblerze.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""asm""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""asm"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">section	.text
   global_start   ;must be declared for linker (ld)
  
_start:	          ;tells linker entry point
   mov	edx,len   ;message length
   mov	ecx,msg   ;message to write
   mov	ebx,1     ;file descriptor (stdout)
   mov	eax,4     ;system call number (sys_write)
   int	0x80      ;call kernel
  
   mov	eax,1     ;system call number (sys_exit)
   int	0x80      ;call kernel

section	.data
msg db 'Hello, world!', 0xa  ;string to be printed
len equ $ - msg     ;length of the string</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Powyżej kod źródłowy Assemblera.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class MainProgram {
    public static void main(String[] args) {
        System.out.println(""Hello World!"");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Powyżej kod źródłowy języka Java.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Podsumowując, moim zdaniem niezbędna jest znajomość wyżej opisanego zestawu narzędzi w postaci:<br>- <a href=""#trzy-elementy-skladowe-klasy"" data-type=""internal"" data-id=""#trzy-elementy-skladowe-klasy"">Trzech elementów składowych klasy</a>,<br>- <a href=""#trzy-paradygmaty-programowania-obiektowego"" data-type=""internal"" data-id=""#trzy-paradygmaty-programowania-obiektowego"">Trzech paradygmatów programowania obiektowego</a>,<br>- <a href=""#trzy-elementy-wspierajace-programowanie-obiektowe"">Trzech elementów wspierających programowanie obiektowe</a>.<br>Tak samo jak kierowca samochodu jadący cały czas na pierwszym biegu nie rozwinie pełnego potencjału samochodu - może go również popsuć - tak samo programista, programistka nie przechodząc na wyższy poziom wiedzy nie rozwinie w pełni możliwości języka Java - może ""popsuć kod"" - pisząc kod, którego późniejsze utrzymanie będzie bardzo trudne lub wręcz niemożliwe. Kolejnym krokiem po opanowaniu materiału z tego artykułu może być zapoznanie się z moim innym artykułem <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/29/dlaczego-kod-w-jezyku-java-powinien-byc-solidny-oraz-suchy-dry/"" data-type=""post"" data-id=""449"" target=""_blank"">Dlaczego kod w języku Java powinien być SOLID’ny oraz suchy, DRY?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/wladca-metal-stol-praca-7238606/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/wladca-metal-stol-praca-7238606/"" target=""_blank"" rel=""noreferrer noopener"">Maddy Freddie</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-01-19
1922,"Nawigacja po artykułach, od początkujących do zaawansowanych","<!-- wp:cooltimeline/timeline-block {""timelineLayout"":""one-sided"",""items"":[{""title"":""Początkujący - seria krok po kroku"",""description"":""Cool Timeline Pro is WordPress #1 premium timeline plugin, trusted by 20000+ users."",""time"":""14 July, 2016"",""key"":1667764670318,""storyImage"":""none"",""storyBgColor"":""#fff"",""storyTextColor"":""#000"",""order"":1},{""title"":""Pierwszy kod w języku Java w IntelliJ"",""description"":""Here you can add small description about your company history or achievements."",""time"":""Pierwszy kod w języku Java w IntelliJ"",""key"":1667764670318,""storyImage"":""none"",""storyBgColor"":""#fff"",""storyTextColor"":""#000"",""order"":2},{""title"":"""",""description"":"""",""time"":"""",""storyImage"":""none"",""storyBgColor"":""#fff"",""storyTextColor"":""#000"",""order"":0,""key"":""new 1667766082624""}],""isFirstLoad"":false,""blockUniqId"":1667765248697,""className"":""ticss-bb7cab52"",""hasCustomCSS"":true,""customCSS"":""story-time {\n  width: 250 px;\n}\n""} -->
<div class=""wp-block-cooltimeline-timeline-block ticss-bb7cab52""><div class=""ctl-instant-timeline block-1667765248697  one-sided"" style=""--timeLineColor:#D91B3E;--textColor:#000;--titleSize:18px;--descriptionSize:14px;--timeSize:18px""><div class=""timeline-content""><div class=""ctl-row""><div class=""ctl-col-6""><div class=""story-time""><div style=""color:#000;font-size:18px"">14 July, 2016</div></div></div><div class=""ctl-col-6""><div class=""story-details""><div class=""story-image""></div><h3 style=""color:#000;font-size:18px;line-height:24.12px"">Początkujący - seria krok po kroku</h3><p style=""color:#000;font-size:14px;line-height:24.22px"">Cool Timeline Pro is WordPress #1 premium timeline plugin, trusted by 20000+ users.</p></div></div></div></div><div class=""timeline-content""><div class=""ctl-row""><div class=""ctl-col-6""><div class=""story-details""><div class=""story-image""></div><h3 style=""color:#000;font-size:18px;line-height:24.12px"">Pierwszy kod w języku Java w IntelliJ</h3><p style=""color:#000;font-size:14px;line-height:24.22px"">Here you can add small description about your company history or achievements.</p></div></div><div class=""ctl-col-6""><div class=""story-time""><div style=""color:#000;font-size:18px"">Pierwszy kod w języku Java w IntelliJ</div></div></div></div></div><div class=""timeline-content""><div class=""ctl-row""><div class=""ctl-col-6""><div class=""story-time""><div style=""color:#000;font-size:18px""></div></div></div><div class=""ctl-col-6""><div class=""story-details""><div class=""story-image""></div><h3 style=""color:#000;font-size:18px;line-height:24.12px""></h3><p style=""color:#000;font-size:14px;line-height:24.22px""></p></div></div></div></div></div></div>
<!-- /wp:cooltimeline/timeline-block -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->",1970-01-01
1932,"Relacja mentor-uczeń, jak zrozumieć siebie wzajemnie - teoria i praktyka","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule przedstawię moje przemyślenia i praktykę, którą stosuję w czasie mentoringu. Wynikają one z czterech lat doświadczenia w prowadzeniu mentoringu. Sporo czasu zajęło mi wypracowanie, tego podejścia do moich uczniów, uczennic w mojej pracy jako mentora. Serdecznie zapraszam do lektury.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dla wielu osób, po przeczytaniu, tego artykułu zaskakujące mogą być dwie kwestie. Pierwsza z nich: <em>mentor wskazuje tylko ścieżkę i wspiera na drodze pozyskiwania wiedzy</em> - mentor nie uczy. Druga kwestia: <em>przekazywana wiedza jest ograniczona do, tego, co mentor wie, umie</em> - więcej się nie dowiemy. Dla mnie ważna jest relacja, którą buduję w trakcie wspólnych zajęć mentoringu - technologia, to tylko narzędzie, najważniejsi są ludzie. Wiedza i umiejętności zostaną nabyte w trakcie.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Relacja mentor-uczeń</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Rozpoczynając mentoring z osobą, która kontaktuje się ze mną, <strong>na początku zastanawiam się nad relacją mentor-uczeń, która powstanie w trakcie naszych wspólnych zajęć</strong>. Staram się wcielić w rolę mojego przyszłego ucznia, uczennicy. Warto, aby oni również spojrzeli na mentoringu z perspektywy mentora. W tym artykule postaram się przybliżyć proces przekazywania wiedzy zarówno z jednej jak i drugiej strony.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Oczywiście, <strong>mógłbym od razu wskazać punkt startu i końca ścieżki, którą należy podążać, żeby przebranżowić się na Junior Java Developer'a, Developer'kę</strong>. Mógłbym opisać formalne ramy nauczania i przystąpić do działania. Na szczęście daleki jestem od takiego podejścia, zajęcia mentoringu są indywidualne i dostosowane do potrzeb ucznia, uczennicy. Mam przygotowany plan działania, ale każdy punkt jest realizowany w tempie odpowiednim dla uczącego, uczącej się.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Tempo przyswajania wiedzy</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Przykład</em>, jeżeli widzę, że dana osoba dobrze przyswaja przekazywaną wiedzę, to po prostu szybciej zaczynamy nowy temat - nie ma sztucznego ""wytapiania czasu"". Natomiast w przypadku, gdy dane zagadnienie stwarza problem, to zwalniamy i pochylamy się nad nim, tłumaczę dany temat z różnych stron. W perspektywie całego procesu przekazywania wiedzy momenty zwalniania i przyspieszania uśredniają się, ale uczeń, uczennica przyswaja wiedzę w swoim tempie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Umowny punkt startu i końca</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Punkty startu i końca są umowne. Niemniej jednak mam spójna wizję i ścieżkę rozwoju w kierunku pracy na stanowisku Junior Java Developer w ""standardzie branżowym"", czyli wiedza i umiejętności, która są obecnie obowiązujące w różnych firmach. Nie mam sztywnego harmonogramu, jedynie wyznaczone główne punkty na ścieżce do zmiany zawodu na Junior Java Developer'a, Developer'kę. W moim mentoringu wyróżniam dwie ścieżki dla przyszłych młodszych programistów, programistek języka Java. Pierwsza z nich: <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/oferta/sciezka-wsparcia-przyszlego-junior-java-developera/"" data-type=""page"" data-id=""1129"" target=""_blank"">Ścieżka wsparcia przyszłego Junior Java Developer'a</a>, druga: Ścieżka wiedzy przyszłego Junior Java Developer'a.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Moje praktyki w mentoringu</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej lista moich głównych przemyśleń i praktyk, które stosuję w czasie mentoringu:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Celowo używam zwrotu ""przekazywanie wiedzy"" zamiast ""nauczanie"".</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Żeby lepiej zrozumieć osoby, którym przekazuję wiedzę, samemu wcieliłem się w rolę ucznia.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Problem w zrozumieniu, tego o czym mówi mentor nie leży tylko i wyłącznie po stronie ucznia, uczennicy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Mentor wskazuje tylko ścieżkę i wspiera na drodze pozyskiwania wiedzy.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Mentor wspomaga proces samodzielnego rozwiązywania problemów.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przekazywana wiedza jest ograniczona do, tego, co mentor wie, umie.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Przekazywanie wiedzy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Celowo używam zwrotu ""przekazywanie wiedzy"" zamiast ""nauczanie"".</strong> W moim rozumieniu, przekazywanie wiedzy jest przez praktykę i doświadczenie, na realnych przykładach, natomiast nauczanie pojmuję jako ""uczenie się na pamięć"" teorii z podręcznika. Nauczano nas w szkole, dawniej uczniom przekazywano wiedzę praktyczną na temat zawodu, który mają w przyszłości wykonywać. Samo określenie ""przekazywanie wiedzy"" zmienia perspektywę, położenie i cel pozyskiwania wiedzy.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Praktyczny przykład</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Przykład</em>, wiele osób, które zapisuje się do mnie na mentoring, mówi mi, że ""jest zmęczony, zmęczona uczeniem się z internetu"". Moim zdaniem, na ten stan rzeczy składają się dwa czynniki. Pierwszy, to właśnie ""uczenie się na pamięć"", wiąże się, to z tym, że wiele kursów nastawionych jest na przekazywanie wiedzy teoretycznej w ""podręcznikowy sposób"", czyli rozdział po rozdziale. Drugim czynnikiem jest ogrom wiedzy dostępnej w internecie w formie artykułów, video, podcastów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wcielenie się w rolę ucznia</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Żeby lepiej zrozumieć osoby, którym przekazuję wiedzę, samemu wcieliłem się w rolę ucznia</strong> - ""zapisałem się na korepetycje"". Moim zdaniem, poprzeczkę postawiłem sobie wysoko, tak, jak robi, to większość osób, które zgłaszają się&nbsp;do mnie na mentoring. Zabrałem się za naukę matematyki ""od podstaw"" oraz fizyki kwantowej, tak, aby docelowo zająć się tematami sztucznej inteligencji (AI) oraz nauczania maszynowego (ML).  Wiem, że dla wielu osób zmieniających swoją obecną branżę na branżę IT, nie jest, to łatwy proces.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Praktyczny przykład</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Przykład</em>, zgodnie z powyższym, uczę się pod okiem mentora, można powiedzieć, że od podstaw. Dlaczego od podstaw? Odrzuciłem (ścieżka mentora) szkolne uczenie się na pamięć wzorów i formułek na rzecz <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Dow%C3%B3d_(matematyka)"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Dow%C3%B3d_(matematyka)"" target=""_blank"">dowodów matematycznych</a> oraz praktycznego zastosowania wiedzy. Dzięki temu mogłem zobaczyć jak wygląda przyswajanie nowej wiedzy, rozwiązywanie zadań domowych od strony ucznia, uczennicy oraz zmaganie się z problemami w zrozumieniu jakiegoś zagadnienia. Taka perspektywa bardzo pomogła mi doskonalić mój warsztat jako mentora.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Problem w nauce leży po obu stronach</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przekazując wiedzę, wychodzę z założenia, że <strong>problem w zrozumieniu, tego o czym mówi mentor nie leży tylko i wyłącznie po stronie ucznia, uczennicy</strong>, ale również po stronie samego mentora. Dlatego dynamicznie dostosowuję metody i sposób przekazywania wiedzy do danej osoby. Wiedząc, że mój sposób przekazywania wiedzy może być niedoskonały i nie działać, tak samo dla każdej osoby, uzbrajam się w dużo cierpliwości i pokory. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Praktyczny przykład</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Przykład</em>, wiele razy słyszę ""ja tego nie rozumiem"", wtedy zastanawiam się jak mogę przekazać wiedzę lepiej. Jednym ze sposobów jest znalezienie wspólnego języka, jeżeli dana osoba pracuje w logistyce, to używam przykładów związanych z przesyłkami, paczkami. Kolejnym sposobem jest powtarzanie przeze mnie, tego samego kilka razy lub parafrazowanie. Zachęcam do robienia notatek oraz nauki z oficjalnej dokumentacji danego języka, narzędzia do programowania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wyznaczenie ścieżki</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Trzeba uzmysłowić sobie, że <strong>mentor wskazuje tylko ścieżkę i wspiera na drodze pozyskiwania wiedzy</strong> - mentor nie uczy. Tym samym nie uczę wiedzy teoretycznej w ""podręcznikowy sposób"", czyli rozdział po rozdziale, fragmentaryzując poszczególne elementy. Uczeń, uczennica pozyskuje wiedzę w oparciu o większy projekt, który stanowi część przyszłego portfolio. Całość osadzona jest w kontekście realnej pracy na stanowisku Junior Java Developer, tak, jak oczekuje, tego obecnie pracodawca.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Praktyczny przykład</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Przykład</em>, często słyszę: ""to Pan nie nauczy mnie programować?"", albo ""nie stworzy Pan za mnie projektu?"". W obu przypadkach odpowiedź brzmi, nie. Oczywiście, to nie jest tak, że nie przedstawię teorii i praktyki dla danego zagadnienia - jest teoria i praktyka, od czegoś trzeba zacząć. Chodzi o fakt,  że większość pracy w przyswajaniu wiedzy jest po stronie osoby uczącej się. Wspomagam ten proces ciekawymi przykładami z życia prawdziwego programisty.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wspomaganie samodzielnej nauki</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Mentor wspomaga proces samodzielnego rozwiązywania problemów</strong>. Zaszczepiam tzw. ""informatykę śledczą"", zachęcam do przeglądania istniejącego kodu źródłowego, śledzenia przebiegu działania aplikacji. Pokazuję jak wyszukiwać informacji przez właściwe słowa kluczowe wpisywane w wyszukiwarkę internetową. Wyjaśniam jak działać, kiedy ""mentora nie będzie pod ręką"", zawsze można przeczytać oficjalna dokumentację i/lub zapoznać się z ""wbudowaną dokumentacją"" w postaci javadoc. Najlepiej przyswajać wiedzę w oparciu o praktykę i nasze błędy. Piszemy kod zawierający błędy - wiele razy słyszałem, ""czy Pan na pewno zna język Java"" - w którym proszę o wskazanie elementu podkreślonego na czerwono, aby zobaczyć jaki jest komunikat i samodzielnie znaleźć jego rozwiązanie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Przekazywana wiedza jest ograniczona</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Należy pamiętać, że <strong>przekazywana wiedza jest ograniczona do, tego, co mentor wie, umie</strong> - więcej się nie dowiemy. Tym samym, bez dalszego doskonalenia we własnym zakresie można ograniczyć się, do jednego języka programowania, np.: Java lub wybranej technologii, np: aplikacje web. Samodzielne zdobywanie wiedzy przez ucznia, uczennicę mogłoby iść w kierunku nowego języka, np.: Python, technologii, np.: aplikacje cloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując, moim zdaniem, punktem wyjścia do udanego mentoringu jest dobra relacja mentor-uczeń, która pozwoli z jednej strony mentorowi na efektywne przekazywanie wiedzy, a z drugiej, pomoże uczniowi, uczennicy przejść przez ścieżkę wiedzy przyszłego Junior Java Developer'a, Developer'ki.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/mezczyzni-szkola-student-edukacja-8197543/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/mezczyzni-szkola-student-edukacja-8197543/"" target=""_blank"" rel=""noreferrer noopener"">Yan Krukau</a> z <a href=""https://www.pexels.com/pl-pl/"" target=""_blank"" rel=""noreferrer noopener"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2022-12-28
1935,"Payhip Kurs - Pierwsza klasa - kod Java, IntelliJ, krok po kroku","<!-- wp:paragraph -->
<p>Klasa służy do odzwierciedlenia elementów otaczającego nas świata. Zacząć od podziału na trzy podstawowe elementy składowe klasy: Atrybuty (przechowywanie stanu obiektu), Konstruktory (tworzenie obiektu według własnego przepisu) i Metody (działanie, akcja, zmiana stanu obiektu).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Klasy tworzą nasze własne typu, które możemy używać jak np. String. Pokazać na przykładzie:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">String name = ""Java""; // String name = new String(""Java"");
Building tower = new Building();</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Nauka od Atrybutów klasy, tworzenie obiektów i nadawanie im wartości. Następnie Metody (wydmuszka), wprowadzenie Hermetyzacji (kod w main() na czerwono, pola obiektu) w międzyczasie metoda toString(), jej sens zastosowania. Skoro hermetyzacja (specyfikator private) ukrywa pola klasy, to wprowadzić Konstruktory (NoArgs, AllArgs). Pokazać niejawne dziedziczenie z klasy Object, źródło nadpisanej metody toString(). </p>
<!-- /wp:paragraph -->",1970-01-01
1939,"Hackathon? Z mentorem? - dlaczego warto brać udział","<!-- wp:paragraph -->
<p>W tym artykule napiszę o hackathonach, czym one są, dlaczego warto brać w nich udział oraz o tym, co takie wydarzenia wnoszą do pracy programistów, programistek zarówno młodszych jak i tych doświadczonych. Nie będzie, to tylko sucha teoria, ale opis z perspektywy uczestnika hackathonów - z mojej perspektywy - w roli programisty jak również mentora. Niezależnie, w której byłem roli, za każdym razem najważniejsze były dla mnie relacje, które tworzyłem z uczestnikami hackathonu. Samo wydarzenie, to tylko sposobność do tego, aby aktywować swój potencjał jak i również innych uczestników.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wikipedia dość dobrze opisuje hackathon, zacytuję dwa opisy moim zdaniem najtrafniej wyjaśniają to słowo, resztę można doczytać na <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Hackathon"" target=""_blank"">https://pl.wikipedia.org/wiki/Hackathon</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Słowo „hackathon” powstało z połączenia dwóch angielskich słów hack i marathon, oznaczających odpowiednio hakowanie i maraton.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Hackathon (czasem maraton projektowania lub hackaton) – wydarzenie skierowane do programistów, podczas którego informatycy i inne osoby związane z rozwojem oprogramowania, takie jak projektanci grafiki, twórcy interfejsów i menedżerowie projektów, stają przed zadaniem rozwiązania określonego problemu związanego z projektowaniem. Hackathony odbywają się w krótkim czasie, zazwyczaj na przestrzeni dnia lub weekendu. Zadanie do wykonania ogłaszane jest w dniu rozpoczęcia konkursu.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4><strong>Kto może wziąć udział w hackathon'ie?</strong> </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zacytuję odpowiedź <a href=""https://hackyeah.pl/"" data-type=""URL"" data-id=""https://hackyeah.pl/"" target=""_blank"" rel=""noreferrer noopener"">HackYeah</a> na to pytanie:</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""className"":""is-style-default""} -->
<blockquote class=""wp-block-quote is-style-default""><!-- wp:paragraph -->
<p><a rel=""noreferrer noopener"" href=""https://hackyeah.pl/faq/"" target=""_blank"">Who can participate?</a></p>
<!-- /wp:paragraph --><cite>HackYeah is open to everyone. Really.<br>• You don’t know anything about programming? Come on in!<br>• Are you a student? Join us!<br>• Are you an undergraduate? We’ll be glad to meet you.<br>• If you are a specialist in your branch — you have to be here.<br>• No matter if you’re an entry-level, a junior, mid, senior or an IT star. We invite all of you!<br></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Mając na uwadze powyższą odpowiedź, należy pamiętać, że podczas hackathonu nie tworzymy kompletnego w stu procentach, działającego projektu, ale tzw. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Proof_of_concept"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Proof_of_concept"" target=""_blank"">PoC - Proof Of Concept</a>, czyli wersję demonstracyjną, dowodzącą możliwość realizacji danego zadania i pokazującą działanie dostępnych funkcji w minimalnej wersji.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Jak przygotować się do hackathonu?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Patrząc z perspektywy programisty, programistki, należałoby znać chociaż podstawy jednego języka programowania, resztę można ""douczyć się"" w trakcie. Moim zdaniem niezbędna jest znajomość git - rozproszony system kontroli wersji; śledzenie zmian w kodzie źródłowym. Warto mieć swoje ulubione IDE (Integrated Development Environment), które będzie wspierać nas podczas tworzenia projektu. Moim ulubionym IDE jest IntelliJ IDEA dla języka Java, ale to narzędzie można wykorzystywać dla wielu języków programowania np.: C/C++, Python, PHP - pełna lista wspieranych języków. Przed samym hackathonem można poćwiczyć tworzenie projektów tzw. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"" target=""_blank"">CRUD</a>, dla języka Java pisałem o nich w <a href=""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"" data-type=""post"" data-id=""617"">Pierwsza klasa jako serwis CRUD – kod Java, IntelliJ, krok po kroku</a>. Należy zabrać ze sobą dużą dozę kreatywności oraz być elastycznym i dynamicznie reagować na zmiany w projekcie - moje ulubione powiedzenie: ""jedyną stałą w kodzie jest zmiana"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W kwestii praktyczno-organizacyjnej, to warto zabrać ze sobą śpiwór i matę oraz kabel sieciowy i switch. Po mimo, że wymienione elementy mogą być dostępne u organizatorów, to czasem ich ilość może być po prostu ograniczona.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Jakie korzyści płyną z udziału w hackathonie?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Moim zdaniem największą korzyścią, jaka płynie z udziały w hackathonie jest nawiązanie nowych kontaktów z osobami, które podzielają wspólną pasję do kodowania,  wytwarzania oprogramowania. Podczas wspólnego kodowania można uczyć się nowych rzeczy i/lub doskonalić własny warsztat programistyczny. Łącząc wiedzę i umiejętności osób z różnych obszarów możemy uczestniczyć w całym procesie tworzenia produktu od pomysłu, przez ustalanie wymagań, analizę i projekt, a kończąc na testowaniu i wdrażaniu, oczywiście nie zapominając o implementacji. W projektach IT, w pracy rzadko kiedy możemy uczestniczyć w ustalaniu wymagań, czyli funkcji dostępnych w aplikacji, w większości przypadków takie wymagania po prostu są już z góry ustalone, a programiści implementują je pisząc kod źródłowy.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Najbliższe hackathony</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Nie będę podawał listy, która z biegiem czasu będzie się dezaktualizowała, ale za, to pokażę w jaki sposób ja wyszukuję zbliżające się hackathon'y:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>https://www.linkedin.com/search/results/events/?keywords=hackathon</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://www.meetup.com/pl-PL/find/?keywords=hackathon</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://www.facebook.com/search/top?q=hackathon</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Hackathony są dostępne dla różnych kategorii oraz branż. Przykładowe kategorie, to, np.: ochrona środowiska, cyberbezpieczeństwo, moda, <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Internet_rzeczy"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Internet_rzeczy"" target=""_blank"">IoT (Internet of Things; internet rzeczy)</a>. Branże, z którymi się spotkałem, to, np.: telekomunikacja, medycyna, edukacja. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dla powyższych informacji dobrym uzupełnieniem mogą być wypowiedzi użytkowników z Quora.com, odpowiadające na pytanie <a rel=""noreferrer noopener"" href=""https://www.quora.com/Is-there-a-good-resource-that-lists-all-upcoming-hackathons-in-Europe"" data-type=""URL"" data-id=""https://www.quora.com/Is-there-a-good-resource-that-lists-all-upcoming-hackathons-in-Europe"" target=""_blank"">Is there a good resource that lists all upcoming hackathons in Europe?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Poniżej opiszę moje doświadczenia związane z uczestnictwem w hackathonach jako Java Developer, jak również mentor wspierający uczestników wydarzenia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Udział w hackathonie<em> jako programista Java</em></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tak, jak wspomniałem na wstępie, brałem udział w hackathonie jako programista Java, było, to w 2019 roku - mój pierwszy hackathon. Nie wiedząc czego się spodziewać wybrałem się na miejsce wydarzenia. Pierwsze na, co zwróciłem uwagę, to tłumy ludzi z własnymi komputerami stacjonarnymi, śpiworami i matami?! Ja wybrałem się z laptopem i kubkiem kawy. Nie miałem zespołu i nie wiedziałem w jakim projekcie będę brał udział. To nie było problemem, dołączyłem na serwer Discord (komunikator internetowy - VoIP and instant messaging social platform) udostępniony przez organizatora hackathonu. Tam znalazłem grupę, na której inne osoby również szukały projektów do realizacji oraz członków zespołu. Dołączyłem do nowo utworzonego zespołu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Co dał mi udział w hackathonie<em> jako programista Java?</em>  </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zobaczyłem jaka wielka moc i potencjał tkwią w ludziach, którzy z własnej woli mierzą się z nieznanym zagadnieniem - zadanie do realizacji ogłoszone w dniu hackathonu - wkładając w to cała swoją wiedzę, umiejętności i doświadczenie. Poznałem wiele ciekawych osób, które są otwarte na nowe wyzwania i nie zamykają się na jeden język programowania, jedną technologię. Oba, powyższe elementy dały mi zastrzyk energii, której brakowało mi ze względu na moje obawy przed udziałem w pierwszym hackathonie. Od strony praktycznej, upewniłem się, że niezbędna jest znajomość <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Git_(oprogramowanie)"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Git_(oprogramowanie)"" target=""_blank"">git</a> - rozproszony system kontroli wersji; śledzenie zmian w kodzie źródłowym. <strong>Na hackathon mogą wybrać się osoby na różnym poziomie zaawansowania od entry-level do senior.</strong> Najważniejsze, upewniłem się w przekonaniu, że ""<a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/02/01/junior-java-developer-umiejetnosci-techniczne-a-umiejetnosci-miekkie/"" data-type=""post"" data-id=""45"" target=""_blank"">[...] 30 procent czasu, to samo kodowanie, a 70 procent czasu, to komunikacja z innymi osobami w zespole i próba zrozumienia tego, co musimy przedstawić w postaci kodu języka [...]</a>"". Znajomość języka angielskiego nie jest niezbędna, ale ułatwia komunikację.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Udział w hackathonie<em> jako mentor</em> - HackYeah</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W 2022 roku zostałem zaproszony przez HackYeah do udział w hackathonie jako mentor, HackYeah zorganizowało największy stacjonarny hackathon w Europie. Z mojej strony zaprosiłem na to wydarzenie trzech moich uczniów Bartka, Piotrka i Krzyśka, którzy zmieniają obecny zawód na Junior Java Developer. Pozostałe osoby dołączyły w trakcie hackathonu, szukając zespołu, tak, jak ja w 2019 roku. Do moich uczniów dołączył Bartek i Daniel odpowiedzialni za front-end (ReactJS) i ""analityczki biznesowe"", Adriana i Zuzanna. Wspólnie stworzyli projekt, połączyli back-end z front-end - wybrali zadanie z kategorii ""Less Waste"" od Orange. Moja rola jako mentora na HackYeah polegała na udzielaniu wsparcia i pomocy dowolnym osobom, zespołom obecnym na hackathonie - w sumie na HackYeah 2022 w Krakowie było 2500 osób! </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Co dał mi udział w hackathonie<em> jako mentor?</em> </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tak samo, jak biorąc udział jako Java Developer dostałem ogromny zastrzyk energii, patrząc jaka wielka moc i potencjał tkwią w osobach przybyłych na hackathon. HackYeah w 2022 roku nie był moim pierwszym hackathonem w roli mentora, mniej więcej wiedziałem czego mogę się spodziewać. Po mimo tego, jak zawsze towarzyszyła mi pewna doza niepokoju związana z tym, że chciałbym jak najlepiej pomóc osobom, które będą się do mnie zgłaszały w trakcie trwania wydarzenia. Różne osoby zgłaszały się do mnie z różnymi problemami, np.: gdzie znajdę ekspres do kawy, jak skonfigurować serwer, jak połączyć back-end z front-end na zdalnym serwerze. Dodatkowo, to mentorzy finalnie oceniali i głosowali na projekty przygotowane w trakcie hackathonu. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Współtworzenie hackathonu - Envelo</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Natomiast w 2021 roku współtworzyłem wewnętrzny hackathon w firmie Envelo (cyfrowy oddział Poczty Polskiej) dla 30 przyszłych Junior Java Developer'ów. Hackathon został zorganizowany, żeby ""aktywować"" twórczy potencjał uczestników szkolenia - 3-miesięczny projekt edukacyjny dla branży IT Akademia Envelo.  W trakcie hackathonu powstało kilka zalążków aplikacji na wewnętrzne potrzeby firmy Envelo. Uczestnicy szkolenia bardzo zaangażowali się w wydarzenie, wybrali sobie zadania ogłoszone w dniu rozpoczęcia 24 godzinnego maratonu programistycznego, a następnie przystąpili do realizacji projektu. Cieszył mnie fakt, że uczestnicy wzięli sobie do serca moje wytyczne, które im wcześniej przekazałem - <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"" target=""_blank"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a> - pisanie kodu poprzedzili analizą i projektem dla realizowanego zadania. Część osób pracowała z biura, a część osób zdalnie. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4>Co dało mi współtworzenie hackathonu<em>?</em> </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Kolejny raz dostałem ogromny zastrzyk energii, patrząc jaka wielka moc i potencjał tkwią w osobach, które wspólnie postanowiły rozwiązać złożony problem programistyczny. Zobaczyłem również ile pracy wymaga zorganizowanie takiego wydarzenia. Chociażby samo przygotowanie, ustalenie zadań, projektów do realizacji było nie lada wyzwaniem. Należało wybrać projekty, które w przyszłości będzie można dalej rozwijać, żeby nie tworzyć tzw. projektów do szuflady. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, moim zdaniem udział w wydarzeniu, jakim jest hackathon, to ogromna szansa dla każdego programisty, każdej programistki, aby zobaczyć jak wielką przyjemność sprawia wytwarzanie oprogramowania, kodowanie. Czasem w trakcie codziennej pracy na stanowisku programisty, programistki tracimy z oczu obraz, tego jak szalenie ciekawą i dynamicznie zmieniającą się branżą jest szeroko pojęta branża IT. Po mimo 24 godzinnego maratonu, który teoretycznie powinien wyssać z nas energię, paradoksalnie otrzymujemy ogromny zastrzyk energii na kolejne tygodnie i miesiące pracy jako programiści, programistki! Do tego dochodzą ciekawe kontakty, nowa wiedza i umiejętności zdobyte w trakcie hackathonu.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/ludzie-siedzenie-technologia-pomieszczenie-5380649/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/ludzie-siedzenie-technologia-pomieszczenie-5380649/"" target=""_blank"" rel=""noreferrer noopener"">Tima Miroshnichenko</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-01-04
2263,"Czego szukasz w IT - codziennej nauki czy wysokiego wynagrodzenia?","<!-- wp:paragraph -->
<p>Czego szukasz w IT, codziennej nauki czegoś nowego i ciągłej zmiany czy pracy zdalnej i wysokiego wynagrodzenia?</p>
<!-- /wp:paragraph -->",1970-01-01
2266,"Wyspy Lombok i Java oraz Hibernacja, wiedza poprzez zabawę - omówienie ankiet i ich wyników","<!-- wp:paragraph -->
<p>Dzisiaj chcę omówić i podzielić się wynikami dwóch ankiet, które umieściłem na LinkedIn na moim profilu. <strong>Motywem przewodnim tych ankiet było hasło ""zdobywanie wiedzy poprzez zabawę"".</strong> Poniżej ankiety, o których piszę:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""fontSize"":""normal""} -->
<ul class=""has-normal-font-size""><!-- wp:list-item -->
<li>Czy Hibernate ORM, to jedyna dostępna implementacja JPA (Java Persistence API)?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czym jest Lombok?</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Obie ankiety poza formą zabawy mają na celu aktywację dodatkowej ciekawości, która moim zdaniem jest niezbędna w pracy programisty, programistki. <strong>Często powtarzam osobom, z którymi pracuję, że do programowania jest niezbędna ""informatyka śledcza"" - sami musimy mieć chęć drążenia tematu.</strong> Czy to w związku z rozwiązywaniem napotkanego problemu, tworzeniem, kodowaniem czegoś nowego czy po prostu zgłębianiem wiedzy. Wiem również, że ciężko jest oderwać się od pisania kodu źródłowego (kodowania) i zastanowić się nad narzędziami, które używamy na co dzień w trakcie pracy. Wiem również, że twórcy narzędzi dokładają wszelkich starań, żeby włożyć w swój produkt coś więcej niż dobrze wykonaną część praktyczną. Skoro twórcy narzędzi mają dużo przyjemności i radości w trakcie swojej pracy, to czemu my programiści i programistki nie możemy mieć podobnie w trakcie pracy nad kodem źródłowym?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Czy Hibernate ORM, to jedyna dostępna implementacja JPA (Java Persistence API)?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W ankiecie wzięło udział czternaście osób, które jednomyślnie zagłosowały na odpowiedź, która wskazuje, że Hibernate ORM, to nie jedyna implementacja JPA (Java Persistence API). Jest, to prawidłowa odpowiedź, Hibernate, to nie jedyna implementacja JPA. Jakie są alternatywy dla Hibernate? Na, to pytanie znajdziemy odpowiedź w sekcja ""Vendors supporting JPA"" na stronie <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_Persistence#Version_history"" target=""_blank"">https://en.wikipedia.org/wiki/Jakarta_Persistence#Version_history</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":2270,""sizeSlug"":""full"",""linkDestination"":""none"",""className"":""is-style-default""} -->
<figure class=""wp-block-image aligncenter size-full is-style-default""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/01/czy-hibernate-orm-jedyna-implementacja-jpa_junior-java-developer-mentor.png"" alt=""Czy Hibernate ORM, to jedyna dostępna implementacja JPA (Java Persistence API)? - wynik ankiety - Mentor Junior Java Developer "" class=""wp-image-2270""/><figcaption class=""wp-element-caption"">Wynik ankiety - Czy Hibernate ORM, to jedyna dostepna implementacja JPA (Java Persistence API)? </figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>W tym miejscu powinna zadziałać ""informatyka śledcza"", która mogłaby postawić następujące pytania:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Czym jest ORM?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Object/Relational Mapping - <a rel=""noreferrer noopener"" href=""https://hibernate.org/orm/"" target=""_blank"">https://hibernate.org/orm/</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czym jest JPA?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Java Persistence API - <a href=""https://en.wikipedia.org/wiki/Jakarta_Persistence"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/Jakarta_Persistence</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czym jest API?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Application Programming Interface - <a href=""https://en.wikipedia.org/wiki/API"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/API</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Jakie są alternatywy dla Hibernate?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Sekcja ""Vendors supporting JPA"" - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_Persistence#Version_history"" target=""_blank"">https://en.wikipedia.org/wiki/Jakarta_Persistence#Version_history</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Jaka jest różnica pomiędzy Java Persistence API, a Jakarta Persistence API?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Jakarta Persistence (JPA; formerly Java Persistence API) - <a href=""https://en.wikipedia.org/wiki/Jakarta_Persistence"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/Jakarta_Persistence</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Czym jest Lombok?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W ankiecie wzięło udział siedemnaście osób, które odpowiedziały prawie 50/50, że Lombok może być biblioteką języka Java lub jednocześnie wyspą i biblioteką języka Java. Jaka jest prawidłowa odpowiedź? Lombok jest jednocześnie Indonezyjską wyspą jak i również biblioteką języka Java. Czyli mamy dwie wyspy Java - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Java"" target=""_blank"">https://en.wikipedia.org/wiki/Java</a> i Lombok - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Lombok"" target=""_blank"">https://en.wikipedia.org/wiki/Lombok</a> oraz bibliotekę Java o nazwie ""Project Lombok"", wszyscy mówią po prostu Lombok - <a rel=""noreferrer noopener"" href=""https://projectlombok.org"" target=""_blank"">https://projectlombok.org</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":2295,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/01/czym-jest-lombok_junior-java-developer-mentor_v2.png"" alt=""Czym jest Lombok? – wynik ankiety – Mentor Junior Java Developer"" class=""wp-image-2295""/><figcaption class=""wp-element-caption"">Czym jest Lombok? – wynik ankiety – Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>W tym miejscu powinna zadziałać ""informatyka śledcza"", która mogłaby postawić następujące pytania:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Czym jest Project Lombok?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>""[...] Never write another getter or equals method again, with one annotation your class has a fully featured [...]"" - <a href=""https://projectlombok.org"" target=""_blank"" rel=""noreferrer noopener"">https://projectlombok.org</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czy jest więcej bibliotek dla języka Java?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>""[...] There are currently 350+ open source initiatives at the ASF (Apache Software Foundation) [...]"" - <a href=""https://projects.apache.org/projects.html"" target=""_blank"" rel=""noreferrer noopener"">https://projects.apache.org/projects.html</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Moje ulubione ""ciekawostki programistyczne""</h4>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Czy Linus Torvalds jest git?</p>
<!-- /wp:paragraph --><cite>""Wszyscy"" używamy rozproszonego systemu kontroli wersji jakim jest git, ale niewiele osób zdaje sobie sprawę, że został on stworzony przez Linusa Torvaldsa, tego samego, który stworzył - ""Linux kernel [...] Unix-like operating system kernel"" - jądro, rdzeń Unix'o podobnych systemów operacyjnych. Linus Torvalds, programista (software engineer), który nie znalazł dobrego narzędzia do wersjonowania kodu dla własnego produktu, oprogramowania - Linux kernel - postanowił napisać własne narzędzie, które będzie spełniało jego oczekiwania i tak powstał rozproszony system kontroli wersji git. Więcej informacji na <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Git_(oprogramowanie)"" target=""_blank"">https://pl.wikipedia.org/wiki/Git_(oprogramowanie)</a>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Kto obecnie jest właścicielem kodu źródłowego?</p>
<!-- /wp:paragraph --><cite>Patrząc w stecz, właścicielem języka Java była firma <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Sun_Microsystems"" target=""_blank"">Sun Microsystems</a>, obecnie jest nim firma <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Oracle_Corporation"" target=""_blank"">Oracle</a>. Hibernate pierwotnie został ""stworzony przez"" firmę <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/JBoss_(company)"" target=""_blank"">JBoss</a>, obecnie właścicielem jest <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Red_Hat"" target=""_blank"">Red Hat</a>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><strong>Czemu mam zwracać uwagę na zmiany ""właścicieli"" bibliotek, API, frameworków</strong>? Na przykładzie JPA (Java Persistence API) - ""[...] Jakarta Persistence (JPA; formerly Java Persistence API) [...] The API itself, defined in the jakarta.persistence package (javax.persistence for Jakarta EE 8 and below)"". W telegraficznym skrócie. Zmiana wersji JPA wymaga zmiany w innych współzależnych frameworkach, np.: Spring, Hibernate. Zmiana wersji nie jest trywialnym zadaniem, wymaga ona dużego nakładu pracy przy kodowaniu i testowaniu oprogramowania. Dodatkowo szukając informacji w internecie należy zwracać uwagę, której wersji biblioteki, frameworka dotyczy tutorial.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Takie ""ciekawostki programistyczne""- mogą również przydać się w trakcie rozmowy kwalifikacyjnej. </strong>Osobom, z którymi pracuję polecam w momencie, gdy utknęli na rozmowie rekrutacyjnej - z powodu stresu, braku wiedzy - żeby ""podrzucili ciekawostki programistyczne"". Może, to pomóc w zniwelowaniu stresu lub poprowadzić rozmowę w kierunku innego pytania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mam nadzieję, że powyższe ankiety poza elementami zabawy dostarczyły również szczyptę wiedzy na temat ""tak dobrze mi znanym narzędziom, których cały czas używamy"". <strong>Ciekawy jestem, jakie są Twoje czytelniku, czytelniczko przemyślenia po przeczytaniu tego tekstu?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" target=""_blank"" rel=""noreferrer noopener"">Lukas</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-01-11
2446,"Od czego zacząć tworzenie aplikacji? - Przestań pisać kod źródłowy - praktyczny przykład","<!-- wp:paragraph -->
<p>Tym razem artykuł rozpocznę praktycznym przykładem, który zobrazuje moje podejście, od którego zaczynam tworzenia aplikacji. Chcę pokazać jak ""proste"" i skuteczne jest, to podejście. Następnie, w dalszej części opiszę, co, jak i dlaczego zrobiłem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wyobraźmy sobie, że zostałem poproszony o napisanie <strong>wersji demonstracyjnej</strong>, tzw. <a href=""https://en.wikipedia.org/wiki/Proof_of_concept"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Proof_of_concept"" target=""_blank"" rel=""noreferrer noopener"">Proof of Concept</a> <strong>aplikacji bankowej</strong>. Od czego zacząć? Nie wpadać w panikę! Opiszę słownie, w dużym uproszczeniu, co według mnie powinna robić aplikacja bankowa.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><strong>Opis w formie tekstu, spisanego, np. w notatniku.</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Aplikacja bankowa umożliwia klientom zakładanie kont bankowych. Klienci mogą posiadać więcej niż jedno konto w banku. Klient ma możliwość wpłaty i wypłaty pieniędzy w ramach posiadanego konta bankowego oraz możliwość wykonywania przelewu między kontami.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item -->
<li><strong>Wybranie rzeczowników i czasowników z opisu.</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Rzeczowniki: Aplikacja, Bank, Klient, Konto, Przelew,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czasowniki: Zakładanie kont, wpłata, wypłata, wykonywanie przelewu.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:list {""ordered"":true,""start"":3} -->
<ol start=""3""><!-- wp:list-item -->
<li><strong>Karty CRC – Class Responsibility Collaborators, po prostu tabelki.</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Korzystając z kart CRC zastanowię się jakie elementy, atrybuty będą wchodziły w skład klas oraz jak będą ze sobą połączone w jakich relacjach, zależnościach. Karty CRC służą do przedstawienia dla konkretnej klasy (Class) jej odpowiedzialności (Responsibilities) oraz powiązań, relacji (Collaborators) z innymi klasami w ramach tworzonego systemu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Uwaga: Dla uproszczenia przykładu, karty CRC zastosuję tylko dla rzeczowników: Klient i Konto.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th><strong>Class</strong></th><th>Klient</th></tr></thead><tbody><tr><td><strong>Responsibility</strong></td><td><strong>Collaborators</strong></td></tr><tr><td><span style=""text-decoration: underline;"">Przechowuje (HAS-A) dane klienta:</span><br>– Imię, Nazwisko, Adres, Lista Kont.<br><span style=""text-decoration: underline;"">Wykonuje:</span><br>- Zakładanie kont.</td><td>Konto (klasa).</td></tr></tbody></table><figcaption class=""wp-element-caption"">Karta CRC dla klasy Klient (rzeczownik ze słownego opisu aplikacji).</figcaption></figure>
<!-- /wp:table -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th><strong>Class</strong></th><th>Konto</th></tr></thead><tbody><tr><td><strong>Responsibility</strong></td><td><strong>Collaborators</strong></td></tr><tr><td><span style=""text-decoration: underline;"">Przechowuje (HAS-A) dane konta:</span><br>– Numer,  Środki na koncie, Stan konta.<br><span style=""text-decoration: underline;"">Wykonuje:</span><br>- Wpłata, Wypłata.</td><td>Brak.</td></tr></tbody></table><figcaption class=""wp-element-caption"">Karta CRC dla klasy Konto (rzeczownik ze słownego opisu aplikacji).</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p><strong>Uwaga: Dla uproszczenia przykładu pominę ważny krok jakim jest projekt i od razu przedstawię kod klas Klient i Konto w języku Java.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wykorzystując rzeczowniki ze słownego opisu oraz posiłkując się kartami CRC stworzę nowe klasy Java, natomiast czasowniki posłużą jako metody w tworzonych klasach. Uwaga: metody będą tzw. ""metodami wydmuszkami"", czyli nic nie zwracają, nie przyjmują parametrów oraz nie mają ciała, implementacji. Nazwy klas zapiszę w języku angielskim, ponieważ znacząca większość projektów, kod źródłowy pisze się w języku angielskim.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Klas Klient, rzeczownik ze słownego opisu + karta CRC.
public class Client {
    // Atrybuty klasy
    private String firstName;
    private String lastName;
    private String address;
    private List&lt;Account> accounts;

    // Metody klasy
    void createAccount() {}
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Klas Konto, rzeczownik ze słownego opisu + karta CRC.
public class Account {
    // Atrybuty klasy
    private String number;
    private BigDecimal balance;
    private boolean active;

    // Metody klasy
    public void debit() {}
    public void credit() {}
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Powyżej przedstawione <strong>praktyczne podejście</strong>, od którego zaczynam tworzenie każdej aplikacji, <strong>to analiza</strong>, która bardzo dobrze się sprawdza, poprzedza ona wszystkie kolejne kroki. W telegraficznym skrócie analiza <strong>pomaga spojrzeć na tworzone oprogramowanie z szerszej perspektywy</strong>, co pozwoli nam dokładniej zrozumieć tworzony kod. Przez aplikację rozumiem dowolny program, kod źródłowy tworzony w dowolnym, obiektowym języku programowania. W tym przypadku będzie, to język Java. Tworzoną aplikacją może być aplikacja: konsolowa (CLI), desktop (GUI) lub web (HTML, REST). Jak widać praktyczne podejście, które przedstawiam ma bardzo szerokie zastosowanie. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Moim zdaniem nie należy rozpoczynać pisania kodu źródłowego bez analizy - rekomenduję następującą ścieżkę: analiza, projekt, implementacja (wsparta testami) - szerzej opisałem, to w artykule <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>. Programowanie ""na kowboja"" jeszcze nigdy się nie sprawdziło. Oczywiście współczesne środowiska programistyczne (IDE) wspierają i automatyzują proces refaktoryzacji, zmiany istniejącego kodu źródłowego, ale zawsze wydłuża, to czas pisania aplikacji i powoduje niepotrzebne problemy, komplikacje.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wyżej wspomniana analiza pozwoli wyodrębnić model dziedziny dla tworzonej aplikacji. Przykładowy model dziedziny dla ""aplikacji bankowej"":</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Application, Bank, Client, Account, Transfer.</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Czym jest model dziedziny? W dużym uproszczeniu to słownik głównych pojęć używanych w aplikacji. Skąd akurat taki, a nie inny model dziedziny? Jak taki model dziedziny został ""wybrany"" dla ""aplikacji bankowej""? Wybrany on zostały w kolejnych krokach zgodnie z artykułem <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na podstawie modelu dziedziny powstaną klasy języka Java. Może się&nbsp;wydawać, że wybrane pięć klas - Application, Bank, Client, Account, Transfer - to mało, ale jak się okazuje, to całkiem spora ilość, która pozwoli na stworzenie głównego modułu w aplikacji bankowej. Pięć klas pozwoli również na ""wygenerowanie"" dużej ilości kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Czytając powyższe może pojawić się kilka pytań:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Co w przypadku, kiedy muszę wprowadzić tylko drobną zmianę w kodzie?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Moim zdaniem, w tym przypadku również warto stosować ścieżkę: analiza, projekt i implementacja. Dodatkowo należy bardzo dobrze znać model dziedziny dla aplikacji, z którą pracujemy.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czy doświadczony programista również stosuje ścieżkę: analiza, projekt i implementacja?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Tak, doświadczony programista również stosuje opisywaną ścieżkę, przeprowadza w głowie proces analizy, projektu, a następnie implementacji. Dla bardziej złożonych aplikacji tworzy niezbędną dokumentację.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Czy zawsze trzeba stosować takie podejście?<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Rekomenduję stosowanie ścieżki: analiza, projekt i implementacja. Spójrzmy na to z innej perspektywy. Analiza, to: zastanowienie się, przemyślenie zagadnienia czysto teoretycznie; projekt, to: formalizacja, dokumentacja naszych przemyśleń; implementacja, to: praktyczne zastosowanie naszych przemyśleń w oparciu o formalną dokumentację.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Należy zwrócić uwagę na bardzo ważny element, który wyłonił się w fazie analizy, a mianowicie model dziedziny. Wiemy już, że w dużym uproszczeniu to słownik głównych pojęć używanych w aplikacji. To pojęcia, którymi będziemy posługiwać się w ramach zespołu programistów, analityków biznesowych i osób zlecających nam stworzenie aplikacji. </p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Poniżej pokażę jak może wyglądać kod Java dla naszego głównego modelu dziedziny, czyli klas: Application, Bank, Client, Account, Transfer. Jest to uproszczony model dziedziny bez dodatkowych złożonych relacji, np. bez dodatkowej klasy Address dane przechowuje w polu typu String, czyli <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">private String address;</code> zamiast <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">private Address address;</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ważnym elementem, który wiąże się z wybranymi klasami są relacje między tymi klasami, relacje możemy podzielić na dwie główne ""kategorie"": IS-A oraz HAS-A. W telegraficznym skrócie: <strong>Relacja IS-A (jest)</strong> – dziedziczenie (inheritance), np.: Car IS-A Vehicle – Samochód jest Pojazdem. <strong>Relacja HAS-A (ma)</strong> – kompozycja (composition), np.:  Car HAS-A Engine – Samochód ma Silnik. Dodatkowe informacje <a rel=""noreferrer noopener"" href=""https://www.w3resource.com/java-tutorial/inheritance-composition-relationship.php"" target=""_blank"">Inheritance (IS-A) vs. Composition (HAS-A) Relationship</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Application
// Ta klasa będzie ""punktem wejścia"", będzie zawierać
// kod źródłowy ""działającej aplikacji bankowej""
public class Application {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Bank juniorBank = new Bank();
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Bank
public class Bank {
    private String name;
    private String address;
    private List&lt;Client> clients;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Client
public class Client {
    private String firstName;
    private String lastName;
    private String address;
    private List&lt;Account> accounts;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Account
public class Account {
    private String number;
    private BigDecimal balance;
    private boolean active;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Transfer
public class Transfer {
    private Account accountFrom;
    private Account accountTo;
    private BigDecimal amount;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Poniżej zaprezentuję powyższe klasy uzupełnione o implementację, czyli kod źródłowy. <strong>Uwaga: Dla uproszczenia przykładu pominę ważny krok jakim jest projekt i od razu przedstawię kod klas w języku Java.</strong> Będzie, to bardzo uproszczona implementacja, tak, aby nie zaciemnić idei, która przyświeca praktycznemu przykładowi, czyli stworzeniu aplikacji bankowej poprzedzonej procesem analizy. Zdaję sobie sprawę, że w wielu miejscach można było napisać kod lepiej, bardziej zgodnie ze sztuką.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Kod poniżej nie będzie zawierał szczegółowego opisu implementacji, ale będzie zawierał nawiązania do procesu analizy - słowny opis, rzeczowniki i czasowniki oraz karty CRC.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Bank ze słownego opisu + karta CRC.
public class Bank {
    // Atrybuty klasy
    private String name;
    private String address;
    private List&lt;Client> clients = new ArrayList&lt;>();

    // Metoda klasy
    public Client openClientAccount(Client client) {
        Account openedClientAccount = client.createAccount();
        this.clients.add(client);

        return client;
    }

    // Metoda klasy
    public List&lt;Client> listAllClients() {
        return this.clients;
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Client ze słownego opisu + karta CRC.
public class Client {
    // Atrybuty klasy - Responsibility z karty CRC.
    private String firstName;
    private String lastName;
    private String address;
    private List&lt;Account> accounts = new ArrayList&lt;>();

    public Client(String firstName, String lastName, String address) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
    }

    // Metoda klasy - Responsibility z karty CRC.
    public Account createAccount() {
        Account account = new Account(BigDecimal.ZERO, true);
        this.accounts.add(account);

        return account;
    }

    // Metoda klasy
    public Account findAccountByNumber(String accountNumber) {
        for (Account account : accounts) {
            if (account.number.equals(accountNumber)) {
                return account;
            }
        }
        return null;
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Account ze słownego opisu + karta CRC.
public class Account {
    // Atrybuty klasy - Responsibility z karty CRC.
    public final String number = UUID.randomUUID().toString();
    private BigDecimal balance;
    private boolean active;

    public Account(BigDecimal balance, boolean active) {
        this.balance = balance;
        this.active = active;
    }

    // Metoda klasy - Responsibility z karty CRC.
    public void debit(BigDecimal amount) {
        if (active) {
            if (this.balance.compareTo(amount) > 0) {
                this.balance = this.balance.subtract(amount);
            }
        }
    }

    // Metoda klasy - Responsibility z karty CRC.
    public void credit(BigDecimal amount) {
        if (active) {
            this.balance = this.balance.add(amount);
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Transfer ze słownego opisu + karta CRC.
public class Transfer {
    // Atrybuty klasy
    private Account accountFrom;
    private Account accountTo;
    private BigDecimal amount;

    public Transfer(Account accountFrom, Account accountTo, BigDecimal amount) {
        this.accountFrom = accountFrom;
        this.accountTo = accountTo;
        this.amount = amount;
    }

    // Metoda klasy
    public void makeTransfer() {
        accountFrom.debit(amount);
        accountTo.credit(amount);
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej klasa zawierająca część ""interaktywną"" tworzonej aplikacji. W niej zostanie stworzony konkretny Bank, Klienci zarejestrują się w Banku i utworzą w nim swoje Konta, a następnie wpłacą środki na te konta. Na samym końcu zostanie wykonany Przelew między różnymi Kontami Bankowymi. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>""Aplikacja bankowa"" będzie działać w trybie konsoli, tzw. ""czarnym okienku"", bez graficznego interfejsu użytkownika. Nie zmienia, to faktu, że możemy dla powyższego kodu stworzyć aplikację desktop z GUI lub web na www. </p>
<!-- /wp:paragraph -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Application {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println(""Witamy w Junior Bank!"");
        System.out.println(""Zarejestruj się i otwórz konto.\n"");

        System.out.println(""Podaj swoje imię:"");
        String firstName = scanner.nextLine();
        System.out.println(""Podaj swoje nazwisko:"");
        String lastName = scanner.nextLine();
        System.out.println(""Podaj swój adres:"");
        String address = scanner.nextLine();

        // pierwszy klient jest tworzony na podstawie
        // danych wprowadzonych z konsoli
        Client firstClient = new Client(firstName, lastName, address);
        // dla uproszczenia drugi klient jest tworzony
        // bez wprowadzania danych z konsoli
        Client secondClient = new Client(""Jan"", ""Kowalski"", ""Ul. Krótka 2"");

        Bank juniorBank = new Bank();
        juniorBank.openClientAccount(firstClient);
        juniorBank.openClientAccount(secondClient);

        System.out.println(""\nRejestracja zakończona, konto zostało utworzone."");
        System.out.println(""Szczegółowe dane klient i konta:\n"" + firstClient);

        System.out.println(""\n__________________________________________________"");
        System.out.println(""Wszyscy klienci w JuniorBank:\n"");
        List&lt;Client> allClients = juniorBank.listAllClients();
        allClients.forEach(System.out::println);

        System.out.println(""\n__________________________________________________"");
        System.out.println(""Przed wykonaniem przelewu wpłać środki na konto.\n"");
        System.out.println(""Wyszukaj konto nadawcy po numerze:"");
        String senderAccNumber = scanner.nextLine();
        System.out.println(""Wyszukaj konto nadawcy po numerze:"");
        String receiverAccNumber = scanner.nextLine();

        Account senderAccount = firstClient.findAccountByNumber(senderAccNumber);
        System.out.println(""Konto nadawcy: "" + senderAccount);
        Account receiverAccount = secondClient.findAccountByNumber(receiverAccNumber);
        System.out.println(""Konto odbiorcy: "" + receiverAccount);

        // zasilenie kont, przelew na własne konto
        senderAccount.credit(BigDecimal.valueOf(60));
        receiverAccount.credit(BigDecimal.valueOf(40));

        System.out.println(""\n__________________________________________________"");
        System.out.println(""Wykonaj przelew między kontami.\n"");
        System.out.println(""Konto nadawcy (przed przelewem): "" + senderAccount);
        System.out.println(""Konto odbiorcy (przed przelewem): "" + receiverAccount);

        Transfer giftTransfer =
                new Transfer(senderAccount, receiverAccount, BigDecimal.TEN);
        giftTransfer.makeTransfer();
        System.out.println(""Konto nadawcy (po przelewie): "" + senderAccount);
        System.out.println(""Konto odbiorcy (po przelewie): "" + receiverAccount);
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej wynik działania części ""interaktywnej"" stworzonej aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">Witamy w Junior Bank!
Zarejestruj się i otwórz konto.

Podaj swoje imię:
Jan
Podaj swoje nazwisko:
Kowalski
Podaj swój adres:
Ul. Długa 1

Rejestracja zakończona, konto zostało utworzone.
Szczegółowe dane klient i konta:
Client{firstName='Jan', lastName='Kowalski', address='Ul. Długa 1', 
accounts=[Account{number='9db92b6e-05fc-4918-901e-4e3eb86cffe3', balance=0, active=true}]}


__________________________________________________
Wszyscy klienci w JuniorBank:

Client{firstName='Jan', lastName='Kowalski', address='Ul. Długa 1', 
accounts=[Account{number='9db92b6e-05fc-4918-901e-4e3eb86cffe3', balance=0, active=true}]}

Client{firstName='Jan', lastName='Nowak', address='Ul. Krótka 2', 
accounts=[Account{number='1520230c-178f-4be2-962d-61e5efdf19b3', balance=0, active=true}]}


__________________________________________________
Przed wykonaniem przelewu wpłać środki na konto.

Wyszukaj konto nadawcy po numerze:
9db92b6e-05fc-4918-901e-4e3eb86cffe3
Wyszukaj konto nadawcy po numerze:
1520230c-178f-4be2-962d-61e5efdf19b3
Konto nadawcy: Account{number='9db92b6e-05fc-4918-901e-4e3eb86cffe3', balance=0, active=true}
Konto odbiorcy: Account{number='1520230c-178f-4be2-962d-61e5efdf19b3', balance=0, active=true}

__________________________________________________
Wykonaj przelew między kontami.

Konto nadawcy (przed przelewem): Account{number='9db92b6e-05fc-4918-901e-4e3eb86cffe3', balance=60, active=true}
Konto odbiorcy (przed przelewem): Account{number='1520230c-178f-4be2-962d-61e5efdf19b3', balance=40, active=true}

Konto nadawcy (po przelewie): Account{number='9db92b6e-05fc-4918-901e-4e3eb86cffe3', balance=50, active=true}
Konto odbiorcy (po przelewie): Account{number='1520230c-178f-4be2-962d-61e5efdf19b3', balance=50, active=true}

Process finished with exit code 0
</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Patrząc na powyższy kod, śmiało można stwierdzić, że ""niewiele zmieniło się"" od etapu analizy. Słowny opis pozwolił wyłonić rzeczowniki i czasowniki, które przekształciły się w model dziedziny. Na tej podstawie powstały karty CRC, które następnie zamieniły się w klasy języka Java.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class=""wp-block-table""><table><thead><tr><th><strong>Class</strong></th><th>Klient</th></tr></thead><tbody><tr><td><strong>Responsibility</strong></td><td><strong>Collaborators</strong></td></tr><tr><td><span style=""text-decoration: underline;"">Przechowuje (HAS-A) dane klienta:</span><br>– Imię, Nazwisko, Adres, Lista Kont.<br><span style=""text-decoration: underline;"">Wykonuje:</span><br>- Zakładanie kont.</td><td>Konto (klasa).</td></tr></tbody></table><figcaption class=""wp-element-caption"">Karta CRC dla klasy Klient (rzeczownik ze słownego opisu aplikacji).</figcaption></figure>
<!-- /wp:table -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// Model dziedziny dla rzeczownika Client ze słownego opisu + karta CRC.
public class Client {
    // Atrybuty klasy - Responsibility z karty CRC.
    private String firstName;
    private String lastName;
    private String address;
    private List&lt;Account> accounts = new ArrayList&lt;>();

    public Client(String firstName, String lastName, String address) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
    }

    // Metoda klasy - Responsibility z karty CRC.
    public Account createAccount() {
        Account account = new Account(BigDecimal.ZERO, true);
        this.accounts.add(account);

        return account;
    }

    // Metoda klasy
    public Account findAccountByNumber(String accountNumber) {
        for (Account account : accounts) {
            if (account.number.equals(accountNumber)) {
                return account;
            }
        }
        return null;
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Poniżej elementy, które zostały dodane w trakcie implementacji, a nie były uwzględnione w analizie.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Konstruktory dla klas <code>Client</code>, <code>Account</code> oraz <code>Transfer</code>:<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public Client(String firstName, String lastName, String address) {}</code>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public Account(BigDecimal balance, boolean active) {}</code>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public Transfer(Account accountFrom, Account accountTo, BigDecimal amount) {}</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Dwie metody ""pomocnicze"" w klasie <code>Bank</code> oraz <code>Client</code>: <!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public List&lt;Client&gt; listAllClients() {}</code>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code data-enlighter-language=""json"" class=""EnlighterJSRAW"">public Account findAccountByNumber(String accountNumber) {}</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Poniżej elementy, które wymagają głębszego zastanowienie i modyfikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Generowanie unikalnych numerów kont bankowych - na pewno zmieniłbym obecną ""implementację"" - <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public final String number = UUID.randomUUID().toString();</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Klasa <code>Transfer</code> oraz jej metoda <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public void makeTransfer() {}</code> :





<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Metoda mogłaby przyjmować parametry - <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">public void makeTransfer(Account accountFrom, Account accountTo, BigDecimal amount) {}</code>,</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>W klasie <code>Transfer</code> zrezygnowałbym z konstruktora i nie przechowywał bym stanu, danych w atrybutach klasy. Dzięki temu klasa Transfer stała by się klasą narzędziową.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Podsumowując, przedstawiona aplikacja bankowa składa się z pięciu klas, w których w sumie jest około 100 linii kodu, ""dodatkowe"" 60 linii kodu stanowi sama część ""interaktywna"" aplikacji. Na podstawie analizy powstało 160 linii kodu, w fazie implementacji dodałem cztery elementy - dwie metody i dwa konstruktory - zaproponowałem trzy modyfikacje. Dzięki analizie uniknąłem niepotrzebnej refaktoryzacji, zmiany kodu źródłowego. Ktoś mógłby powiedzieć, że doświadczony programista tak by zrobił, ale nie młodszy programista, programistka. Z biegiem czasu i po wykonaniu kilku takich ""aplikacji"" zgodnie ze ścieżką - analiza, projekt i implementacja - mniej doświadczone osoby nabrałby wprawy. Zachęcam do porzucenia programowania ""na kowboja"" na rzecz ścieżki opisanej w tym artykule.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/typewriter-1750268/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/typewriter-1750268/"" target=""_blank"" rel=""noreferrer noopener"">Suzy Hazelwood</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-02-01
2496,"Dlaczego moje artykuły na LinkedIn kierują na mój prywatny blog?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego napisałem artykuł o pisaniu artykułów na LinkedIn? Własny blog pozwala mi zachować niezależność publikowanych artykułów od dużego ""wydawcy treści"". Powinność wobec moich czytelniczek i czytelników nakazuje mi wytłumaczyć dlaczego czytając post na LinkedIn muszą kliknąć w link, aby przejść do artykułu na LinkedIn, aby finalnie trafić na mój blog. Nie uważam, tego rozwiązania za idealne. Na szczęście skracam tę drogę umieszczając link do artykuły na moim blogu w komentarzu na LinkedIn.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dodatkowo podobną kwestię napotkałem dla treści video, a mianowicie moich video tutoriali, więcej o tym napisałem z moim artykule <a href=""https://www.juniorjavadeveloper.pl/2023/07/31/moje-video-tutoriale-sa-na-odysee-com-oparte-na-lbry-dlaczego-to-jest-istotne-lbry-does-to-publishing-what-bitcoin-did-to-money/"" data-type=""post"" data-id=""3398"">Moje video tutoriale są na Odysee.com, oparte na LBRY. Dlaczego, to jest istotne? „LBRY does to publishing, what Bitcoin did to money.”</a>: ""Publikując moje video tutoriale na <a rel=""noreferrer noopener"" href=""https://www.youtube.com/@mentorjuniorjavadeveloper"" data-type=""URL"" data-id=""https://www.youtube.com/@mentorjuniorjavadeveloper"" target=""_blank"">moim kanale na YouTube</a> zdaję sobie sprawę, że mogą one zniknąć w dowolnym momencie z powodu naruszenia bliżej niesprecyzowanych - community guidelines - wytycznych dla społeczności."" [...] ""Chcąc zachować niezależność publikowanych video od dużego ""wydawcy treści"" umieszczam moje video tutoriale na <a rel=""noreferrer noopener"" href=""https://odysee.com/@mentorjuniorjavadeveloper:e"" data-type=""URL"" data-id=""https://odysee.com/@mentorjuniorjavadeveloper:e"" target=""_blank"">moim kanale na Odysee.com</a>."".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Wyjaśnienie podzielę na dwie części, techniczną (ograniczenia na LinkedIn) oraz związaną z niezależnością publikowanych treści.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pierwsza kwestia jest prosta, na LinkedIn ""trzeba"" artykuł wypromować za pomocą posta, bo inaczej nie dotrze do szerokiego grona odbiorców. Czyli umieszczenie artykułu generuje potrzebę tworzenia oddzielnego posta. Sam post ma ograniczenie, co do ilości znaków - 3000 znaków. Tworząc artykuł na LinkedIn nie umieszczam całości treści nie chcąc zdradzać wszystkiego od razu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Druga kwestia jest związana z niezależnością publikowanych treści, którą podzielę na dwa elementy: dostępność usługi oraz prawa autorskie. Chcę uniezależnić się od tzw. <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Single_point_of_failure"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Single_point_of_failure"" target=""_blank"">single-point-of-failure</a>, jednego miejsca, które może zostać wyłączone lub ograniczyć moje publikacje w dowolnym momencie. Chcę również w pełni posiadać prawa autorskie do moich artykułów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Poniższe informacje można zastosować do dowolnej innej platformy, na której można publikować własne treści, LinkedIn jest tylko przykładem. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Umowa z użytkownikiem LinkedIn - <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/legal/user-agreement"" data-type=""URL"" data-id=""https://www.linkedin.com/legal/user-agreement"" target=""_blank"">User Agreement</a>, obowiązująca od 1 lutego 2022 r - zawiera poniższe informacje:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>3. Rights and Limits</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.1. Your License to LinkedIn</p>
<!-- /wp:paragraph --><cite>You own all of the content, feedback and personal information you provide to us, but you also grant us a non-exclusive license to it. [...]<br><br>As between you and LinkedIn, you own the content and information that you submit or post to the Services, and you are only granting LinkedIn and our affiliates the following non-exclusive license:<br><br></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na pierwszy rzut oka wszystko wygląda w porządku, ale..., no właśnie, pojawiają się dodatkowe warunki, kiedy wczytujemy się dalej w umowę z użytkownikiem LinkedIn.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph --><cite>A worldwide, transferable and sublicensable right to use, copy, modify, distribute, publish and process, information and content that you provide through our Services and the services of others, without any further consent, notice and/or compensation to you or others. These rights are limited in the following ways: [...]<br><br>3. We will get your consent if we want to give others the right to publish your content beyond the Services. However, if you choose to share your post as ""public, everyone or similar"", we will enable a feature that allows other Members to embed that public post onto third-party services, and we enable search engines to make that public content findable though their services. [...]</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Zachęcam do zapoznania się z całością <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/legal/user-agreement"" data-type=""URL"" data-id=""https://www.linkedin.com/legal/user-agreement"" target=""_blank"">User Agreement</a> obowiązującej na LinkedIn.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>3. Rights and Limits</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.2 Service Availability</p>
<!-- /wp:paragraph --><cite>We may change or end any Service or modify our prices prospectively.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>3. Rights and Limits</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.4 Limits</p>
<!-- /wp:paragraph --><cite>We have the right to limit how you connect and interact on our Services.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dostępność usługi LinkedIn jest całkowicie niezależna ode mnie, oznacza to, że nie mam możliwości zareagować samodzielnie na awarię i/lub problemy techniczne. Dlatego postanowiłem założyć własny blog (używając WordPress), wykupić własny serwer oraz domenę oraz certyfikat SSL. Do tego dodałem system monitoringu i powiadomień w razie awarii lub czasowej niedostępności usługi. Własny serwer i cała otoczka brzmi skomplikowanie, ale w praktyce, tak nie jest. Wszystko można załatwić w jednym miejscu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Od kiedy zacząłem intensywnie korzystać z LinkedIn, coraz częściej zaczęły pojawiać się problemy z niedostępnością platformy LinkedIn. Poniżej przykładowe komunikaty błędów.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":2497,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/01/LinkedIn_500-Unknown-Host_small.png"" alt=""Niedostępność usługi LinkedIn - HTTP response status 500 - Unknown Host"" class=""wp-image-2497""/><figcaption class=""wp-element-caption"">Niedostepnosc uslugi LinkedIn - HTTP response status 500 - Unknown Host</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":2701,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/LinkedIn_Error_Something-went-wrong_small.png"" alt=""Niedostępność usługi LinkedIn - Error - Something went wrong."" class=""wp-image-2701""/><figcaption class=""wp-element-caption"">Niedostepnosc uslugi LinkedIn - Error - Something went wrong.</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przygotowując się do napisania, tego artykułu znalazłem następujące informacje. Jak podaje anglojęzyczna <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/LinkedIn"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/LinkedIn"" target=""_blank"">Wikipedia</a> - powołując się na <a rel=""noreferrer noopener"" href=""https://www.wsj.com/articles/microsoft-to-acquire-linkedin-in-deal-valued-at-26-2-billion-1465821523"" data-type=""URL"" data-id=""https://www.wsj.com/articles/microsoft-to-acquire-linkedin-in-deal-valued-at-26-2-billion-1465821523"" target=""_blank"">The Wall Street Journal</a> - ""Od grudnia 2016 roku jest spółką całkowicie zależną od Microsoft."". Ta sama Wikipedia napisała: ""W czerwcu 2012 r. Yevgeniy Nikulin i inni hakerzy ukradli kryptograficzne skróty około 6,4 miliona haseł użytkowników LinkedIn, którzy następnie opublikowali skradzione hasze w Internecie."" - więcej informacji na <a rel=""noreferrer noopener"" href=""https://niebezpiecznik.pl/post/wyciek-6-5-miliona-hashy-hasel-z-linkedin/"" data-type=""URL"" data-id=""https://niebezpiecznik.pl/post/wyciek-6-5-miliona-hashy-hasel-z-linkedin/"" target=""_blank"">Niebezpiecznik.pl</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak jak napisałem wcześniej prowadzenie własnego bloga może wydawać się skomplikowane. Własny serwer, domena, certyfikat SSL oraz znajomość WordPress nie jest, tak skomplikowane, jak by się mogło wydawać. W internecie można znaleźć wiele pomocnych stron w tym temacie. Ten artykuł nie będzie poradnikiem jak założyć i prowadzić własny blog, ale chciałem w tym miejscu wspomnieć o jednej rzeczy. Wiele osób, które zaczyna swoją przygodę z własnym blogiem wybiera rozwiązania, które mają ""wszystko automatycznie zrobić"" za nich, tzw. kreatory stron internetowych.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p> Create a website without limits</p>
<!-- /wp:paragraph --><cite>Discover the platform that gives you the freedom to create, design, manage and develop your web presence exactly the way you want. Easy-to-Use platform thanks to its drag-and-drop interface.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Moim zdaniem, rozwiązania typu ""kreatory stron internetowych"" w dłuższej perspektywie czasu sprawiają więcej problemów niż korzyści wynikających z ich ""prostoty"". Migracja danych i domeny z ""kreatorów stron internetowych"" na własny serwer może być bardzo utrudniona i czasochłonna.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W pierwszej części artykułu opisałem jak, to wygląda od strony ""osób prywatnych"", firmy również ""idą na łatwiznę"" i bardzo dużo systemów informatycznych ""przenosi się do publicznej chmury"", oddając kontrolę nad cennymi zasobami firmy - sprzęt i dane - w ręce osób trzecich. Nie jestem zwolennikiem, tego typu rozwiązania, ale to już temat na oddzielny artykuł. Moim zdaniem własne, prywatne chmury obliczeniowe na własnych serwerach są dobrym rozwiązaniem.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Niebo pełne chmur zewnętrznych dostawców powoduje, że:</p>
<!-- /wp:paragraph --><cite>- Tracimy kontrolę nad sprzętem i oprogramowaniem, które są dla nas krytyczne.<br>- Tracimy pierwotne założenia sieci internet, która miała być zdecentralizowana.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Nie zawsze podążanie za ""tłumem i chwilową modą"" jest najlepszym rozwiązaniem.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując, chcąc zachować niezależność publikowanych treści oraz prawa autorskie do nich, powinniśmy dwa razy zastanowić się, gdzie i w jakiej formie publikujemy nasze treści. Jeżeli już chcemy publikować treści, to zadbajmy o kopię zapasową, pierwotne źródło naszych treści na naszych serwerach, które są pod naszą kontrolą. Wiedzę, którą tu przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji. Jestem ciekawy czy, taka forma artykułu się spodoba?</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/person-writing-on-brown-envelopes-3826682/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/person-writing-on-brown-envelopes-3826682/"" target=""_blank"" rel=""noreferrer noopener"">cottonbro studio</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-02-21
2548,"Korzeń kwadratu, a postęp geometryczny - spotkanie Fibonacciego z Feynmanem","<!-- wp:paragraph -->
<p>Artykuł ten będzie inny niż poprzednie, nie będzie o programowaniu w języku Java z perspektywy młodszego programisty, programistki. Nie będzie on wykładem z matematyki, ale opisem mojego podejścia do próby zrozumienia pojęć i wzorów matematycznych. Pojęć i wzorów, które ""dobrze znamy na pamięć"" z lekcji matematyki, ale czy, aby na pewno dobrze je rozumiemy? Artykuł ten będzie moją próbą udokumentowania ścieżki, którą przeszedłem od korzenia kwadratu (pierwiastka kwadratowego), poprzez postęp geometryczny (pol.: ciąg, ang.: sequence), aż do ""spotkania"" Fibonacciego z Feynmanem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Skąd w ogóle pomysł na naukę w inny sposób niż ten z zajęć szkolnych, czy też ten ze studiów? Po prostu uczenie się na pamięć pojęć i wzorów bez praktycznego zastosowania i dogłębnego zrozumienia tematu nigdy nie miało dla mnie sensu. Ucząc się nowego pojęcia, wzoru zawsze zadawałem sobie pytanie ""Po co mi to? Do czego mogę, to wykorzystać?"". Ciekawym podejściem jest <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Technika_Feynmana"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Technika_Feynmana"" target=""_blank"">Technika Feynmana</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W podręczniku do matematyki dla liceów i techników z 2015 r., można znaleźć ""praktyczne zastosowanie"" ciągu geometrycznego na przykładzie ""Lokaty pieniężne i kredyty bankowe"". <strong>Czy na prawdę trzeba było cały podrozdział poświęcić temu jak brać kredyty i obliczać lokaty?</strong> Od razu przypominają mi się moje lekcje ""przedsiębiorczości"", gdzie wypełnialiśmy PITy, czyli formularze deklaracji podatkowych. Zarówno lokaty, kredyty oraz PITy opierają się na czymś wymyślonym przez człowiek i zmiennym w czasie. <strong>Potrzebowałem czegoś, co jest ""od zawsze"" w otaczającym nas świecie i można spróbować, to ubrać w pojęcia i wzory matematyczne.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zdaję sobie sprawę, że na rynku wydawniczym jest cała masa książek, które lepiej lub gorzej próbują wytłumaczyć skomplikowane pojęcia i wzory matematyczne w sposób przystępny dla czytelników o różnym poziomie wiedzy. Na swojej drodze napotkałem poniższe książki, które podejmują próbę wyjaśnienia pojęć matematycznych w przystępny sposób:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a rel=""noreferrer noopener"" href=""http://helion.pl/view/20365c/jatedo_ebook.htm"" data-type=""URL"" data-id=""http://helion.pl/view/20365c/jatedo_ebook.htm"" target=""_blank"">Jak tego dowieść - krótka opowieść. Dowody matematyczne dla każdego</a>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""http://helion.pl/view/20365c/e_0nlv_ebook.htm"" data-type=""URL"" data-id=""http://helion.pl/view/20365c/e_0nlv_ebook.htm"" target=""_blank"" rel=""noreferrer noopener"">Zanurzeni w liczbach. Jak matematyka kształtuje nasze życie</a>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""http://helion.pl/view/20365c/s_002g_ebook.htm"" data-type=""URL"" data-id=""http://helion.pl/view/20365c/s_002g_ebook.htm"" target=""_blank"" rel=""noreferrer noopener"">Ciekawe zadania z matematyki. Zbiór zadań dla zainteresowanego matematyką licealisty</a>,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""https://lubimyczytac.pl/ksiazka/193908/17-rownan-ktore-zmienily-swiat"" data-type=""URL"" data-id=""https://lubimyczytac.pl/ksiazka/193908/17-rownan-ktore-zmienily-swiat"" target=""_blank"" rel=""noreferrer noopener"">17 równań, które zmieniły świat</a>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Do powyższego wstępu dotyczącego samego sposobu uczenia się dodam jeszcze kwestię szybkiej dezaktualizacji, nieprawdziwości informacji, którą jesteśmy obecnie zalewani we współczesnym świecie. Dlatego postanowiłem, że moje źródła wiedzy muszą być ""starsze niż 40 lat"", a wiedza w nich zawarta będzie dość niezmienna w czasie.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2628,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Sacred-Geometry_Philosophy-and-Practice.jpg"" alt="""" class=""wp-image-2628""/></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph {""placeholder"":""Treść...""} -->
<p>Natrafiłem na książkę <a rel=""noreferrer noopener"" href=""https://www.goodreads.com/book/show/180660.Sacred_Geometry"" data-type=""URL"" data-id=""https://www.goodreads.com/book/show/180660.Sacred_Geometry"" target=""_blank"">Sacred Geometry: Philosophy and Practice - Robert Lawlor</a> (data pierwszego wydania 1982 rok, 41 lat temu), pomyślałem, że, to coś dla mnie, będzie o jednym z działów matematyki - geometria - do tego w kontekście starożytnych cywilizacji.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>""The thinkers of ancient Egypt, Greece and India recognized that numbers governed much of what they saw in their world and hence provided an approach to its divine creator.""</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p><strong>Opisując poniżej pojęcia matematyczne będę równolegle stosował polskie i angielskie określenia terminów matematycznych, gdyż moim zdaniem niektóre ""tłumaczenia"" pojęć gubią pierwotne znaczenie w języku polskim.</strong> Oczywiście, to moja subiektywna opinia, ale zawsze łatwiej było mi zrozumieć dane pojęcie matematyczne, kiedy poznałem jego anglojęzyczny odpowiednik dla języka polskiego.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Powyższa książka - Sacred Geometry - pozwoliła mi zrozumieć pojęcie pierwiastka kwadratowego bez używania jakiegokolwiek wzoru matematycznego. Cała wiedza dotycząca pierwiastka kwadratowego oraz ciągu geometrycznego została pokazana poprzez rysowanie połączonych - za pomocą przekątnej - ze sobą kwadratów, z których pierwszy ma boki o długości 1 cm.</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[latexpage]
Obliczając na kalkulatorze $\sqrt{2}$ otrzymujemy wynik 1,414213562. Tyle również wynosi przekątna kwadratu, którego bok ma długość 1 cm.
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>Poniżej rysunki prezentujące ciąg geometryczny wykorzystujący pierwiastek kwadratowy (ang. square root). Rysunki wykonane zgodnie z instrukcjami z książki Sacred Geometry.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2634,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Zrzut-ekranu-z-2023-02-08-20-51-57.png"" alt="""" class=""wp-image-2634""/><figcaption class=""wp-element-caption"">Rysunek z ksiazki Sacred Geometry: Philosophy and Practice, str. 26, rys. 1.4 </figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2635,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/1675883966775-scaled.jpg"" alt="""" class=""wp-image-2635""/><figcaption class=""wp-element-caption"">Moj odreczny rysunek zgodny z instrukcjami z Sacred Geometry: Philosophy and Practice, str. 25-26, rys. 1.1. - 1.4. </figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Podstawą kolejnego kwadratu staje się przekątna poprzedniego - w tym momencie znalazłem wyjaśnienie, pochodzenie pojęcia ""square root"" - w wolnym tłumaczeniu korzeń kwadratu. Postępując (ang. progression) kolejno i rysując nowe kwadraty, których podstawą są przekątne poprzednich kwadratów otrzymujemy ciąg (ang. sequence) geometryczny (ang. geometric progression). <strong>W tym miejscu znajduje się wyjaśnienie jednej z części ""tajemniczego"" tytułu mojego artykułu.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:tw/bwg {""shortcode"":""[Best_Wordpress_Gallery id=\u002222\u0022 gal_title=\u0022Sacred Geometry Workbook 1 Square Root\u0022]"",""popupOpened"":false,""notInitial"":true} -->
[Best_Wordpress_Gallery id=""22"" gal_title=""Sacred Geometry Workbook 1 Square Root""]
<!-- /wp:tw/bwg -->

<!-- wp:paragraph -->
<p>Powyższa galeria rysunków zawiera instrukcje z ksiązki Sacred Geometry: Philosophy and Practice, str. 25-26, rys. 1.1. - 1.4., które pozwolą na samodzielne narysowanie korzenia kwadratu (ang. square root, pol. pierwiastek kwadratowy) w kontekście ciągu geometrycznego (ang. geometric progression).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniższe obrazy pokazują jak wyglądały narzędzia - ""do geometrii"" - używane przez starożytnych oraz współczesne odpowiedniki narzędzi, których sam używam.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2651,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Sacred-Geometry_Tools-Ancient.jpg"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Sacred-Geometry_Tools-Ancient.jpg"" alt=""Sacred Geometry Tools - Ancient"" class=""wp-image-2651""/></a><figcaption class=""wp-element-caption"">Sacred Geometry Tools - starozytne narzedzia ""do geometrii"".</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2653,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Sacred-Geometry_Tools-Contemporary.jpg"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/02/Sacred-Geometry_Tools-Contemporary.jpg"" alt=""Sacred Geometry Tools - Contemporary"" class=""wp-image-2653""/></a><figcaption class=""wp-element-caption"">Moje wspolczesne odpowiedniki narzedzi do geometrii.</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Dodatkowo w trakcie pisania tego artykułu uczyłem się w praktyce jak zapisywać wzory matematyczne z wykorzystaniem <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/LaTeX"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/LaTeX"" target=""_blank"">LaTeX</a>. ""LaTeX jest szeroko stosowany w środowisku akademickim do komunikacji i publikacji dokumentów naukowych z wielu dziedzin, w tym matematyki, informatyki [...]. Odgrywa również znaczącą rolę w przygotowywaniu i publikowaniu książek i artykułów [...]."". </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tak wygląda wzór matematyczny przed przetworzeniem przez LaTeX - <code>a_{n}=a \cdot r^{n-1}</code> - tak wygląda po przetworzeniu $a_{n}=a \cdot r^{n-1}$.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pokrzepiony i zainspirowany ""odkryciem znaczenia"" pierwiastka kwadratowego zabrałem się za zgłębianie praktycznycznego zastosowania ciągu geometrycznego (ang. geometric progression). Ciąg nazywamy geometrycznym, jeśli stosunek między kolejnymi wyrazami jest stały. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pamiętałem dwa wzory dla ciągu geometrycznego:</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph -->
<p>Wzór na <code>n</code>-ty wyraz ciągu geometrycznego - postać jawna (ang. closed formula):</p>
<!-- /wp:paragraph --><cite>$a_{n}=a \cdot r^{n-1}$</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph -->
<p>Wzór na <code>n</code>-ty wyraz ciągu geometrycznego - postać rekurencyjna (ang. recursive formula):</p>
<!-- /wp:paragraph --><cite>$a_{n}=a_{n-1} \cdot r$</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Przykład ciągu geometrycznego: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$3, 6, 12, 24, \dots$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sprawdzę czy mam do czynienia z ciągiem geometrycznym dzieląc każdy wyraz przez jego poprzedni wyraz: <code>6/3 = 2, 12/6 = 2, 24/12 = 2</code>. Zakładając, że ten stosunek jest stały, znalazłem <code>r = 2</code> - ciąg nazywamy geometrycznym, jeśli stosunek między kolejnymi wyrazami jest stały.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W podręcznikach do matematyki i na polskojęzycznej <a href=""https://pl.wikipedia.org/wiki/Ci%C4%85g_geometryczny"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Ci%C4%85g_geometryczny"" target=""_blank"" rel=""noreferrer noopener"">Wikipedii</a> zamiast <code>r</code> używane jest <code>q</code>, ale dla mnie łatwiej było zrozumieć wersję równania z <code>r</code>, bo jest, to pierwsza litera od angielskiego wyrazu <code>ratio</code> - pol. stosunek, współczynnik.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""top"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-top""><!-- wp:column {""verticalAlignment"":""top""} -->
<div class=""wp-block-column is-vertically-aligned-top""><!-- wp:paragraph -->
<p>Wzór na <code>n</code>-ty wyraz – postać jawna.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{n}=a \cdot r^{n-1}$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podstawiam <code>r = 2</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{n}=3 \cdot 2^{n-1}$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obliczam dla kolejnych wyrazów ciągu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{1}=3$<br>$a_{2}=3 \cdot 2^{2-1}=3 \cdot 2^{1} = 3 \cdot 2 = 6$<br>$a_{3}=3 \cdot 2^{3-1}=3 \cdot 2^{2} = 3 \cdot 4 = 12$<br>$a_{4}=3 \cdot 2^{4-1}=3 \cdot 2^{3} = 3 \cdot 8 = 24$<br>$a_{5}=3 \cdot 2^{5-1}=3 \cdot 2^{4} = 3 \cdot 16 = 48$</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""top""} -->
<div class=""wp-block-column is-vertically-aligned-top""><!-- wp:paragraph -->
<p>Wzór na <code>n</code>-ty wyraz – postać rekurencyjna.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{n}=a_{n-1} \cdot r$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podstawiam <code>r = 2</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{n}=a_{n-1} \cdot 2$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obliczam dla kolejnych wyrazów ciągu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>$a_{1}=3$<br>$a_{2}=a_{2-1} \cdot 2 = a_{1} \cdot 2 = 3 \cdot 2 = 6$<br>$a_{3}=a_{3-1} \cdot 2 = a_{2} \cdot 2 = 6 \cdot 2 = 12$<br>$a_{4}=a_{4-1} \cdot 2 = a_{3} \cdot 2 = 12 \cdot 2 = 24$<br>$a_{5}=a_{5-1} \cdot 2 = a_{4} \cdot 2 = 24 \cdot 2 = 48$</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej zapis wzoru na <code>n</code>-ty wyraz ciągu geometrycznego w postaci jawnej - kod języka Java. Używam pętli <code>for</code> do obliczania kolejnych wyrazów  w ciągu geometrycznym.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column -->
<div class=""wp-block-column""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">static int geometricProgressionLoop(int a_n, int r, int terms) {
    int result = 0;
    for (int n = 0; n &lt; terms; n++) {
        result = (int) (a_n * Math.pow(r, n));
    }
    return result;
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej zapis wzoru na <code>n</code>-ty wyraz ciągu geometrycznego w postaci rekurencyjnej - kod języka Java. Metoda <code>geometricProgressionRecursive()</code> wywołuje samą siebie do obliczania kolejnych wyrazów w ciągu geometrycznym.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""align"":""wide""} -->
<div class=""wp-block-columns alignwide""><!-- wp:column -->
<div class=""wp-block-column""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">static int geometricProgressionRecursive(int a_n, int r, int terms) {
    if (a_n == terms) return 1;
    return a_n * r * geometricProgressionRecursive(a_n + 1, r, terms);
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Poniżej przykłady praktycznego zastosowania ciągu geometrycznego:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Obliczanie uzyskanych odsetek,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Obliczenie kwoty na naszym koncie oszczędnościowym,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Obliczanie wielkości wykładniczego wzrostu populacji, na przykład bakterii na szalce Petriego,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Skończony ciąg geometryczny jest przykładem odbijającej się piłki. Wysokość piłki zmniejsza się o połowę przy każdym odbiciu.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Poniżej najbardziej znany przykład użycia rekurencji, czyli <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Ci%C4%85g_Fibonacciego"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Ci%C4%85g_Fibonacciego"" target=""_blank"">ciąg Fibonacciego</a>. Kod źródłowy w języku Java oraz Python. </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">int fibonacci(int n) {
    if (n &lt; 2) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""python""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""python"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">def fibonacci(n):
    if n &lt; 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Osoby początkujące mogą skorzystać z narzędzi online, które przedstawiają w formie graficznej - wizualizują - działania algorytmów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a href=""https://www.recursionvisualizer.com/?function_definition=def%20virfib%28n%29%3A%0A%20%20if%20n%20%3D%3D%200%3A%0A%20%20%20%20return%200%0A%20%20if%20n%20%3D%3D%201%3A%0A%20%20%20%20return%201%0A%20%20else%3A%0A%20%20%20%20return%20virfib%28n%20-%201%29%20%2B%20virfib%28n%20-%202%29%0A%20%20%20%20&amp;function_call=virfib%283%29"" data-type=""URL"" data-id=""https://www.recursionvisualizer.com/?function_definition=def%20virfib%28n%29%3A%0A%20%20if%20n%20%3D%3D%200%3A%0A%20%20%20%20return%200%0A%20%20if%20n%20%3D%3D%201%3A%0A%20%20%20%20return%201%0A%20%20else%3A%0A%20%20%20%20return%20virfib%28n%20-%201%29%20%2B%20virfib%28n%20-%202%29%0A%20%20%20%20&amp;function_call=virfib%283%29"" target=""_blank"" rel=""noreferrer noopener"">Visualize a recursive function</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""https://algorithm-visualizer.org/dynamic-programming/fibonacci-sequence"">https://algorithm-visualizer.org/dynamic-programming/fibonacci-sequence</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Tym samym uzyskałem obiecane w tytule artykułu spotkanie Fibonacciego z Feynmanem.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podejmowałem już różne próby powtarzania i utrwalania wiedzy zdobytej w szkole, ale zawsze brakowało mi, tego praktycznego i namacalnego zastosowania pojęć i wzorów matematycznych. Na dalszych etapach nauki zapewne spotkam się z abstrakcyjnymi pojęciami i wzorami, które nie mają odzwierciedlenia w świecie rzeczywistym, wtedy zastanowię się nad tym czy matematyka, aby nie jest tworem ludzkiego umysłu i jest oderwana od rzeczywistości. <a href=""https://en.wikipedia.org/wiki/Richard_Feynman"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Richard_Feynman"" target=""_blank"" rel=""noreferrer noopener"">Feynman</a> twierdził, że matematyka nie jest nauką - <a href=""https://www.goodreads.com/quotes/1459603-mathematics-is-not-a-science-from-our-point-of-view"" target=""_blank"" rel=""noreferrer noopener"">https://www.goodreads.com/quotes/1459603-mathematics-is-not-a-science-from-our-point-of-view</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Richard P. Feynman, The Feynman Lectures on Physics Vol 1</p>
<!-- /wp:paragraph --><cite>“Mathematics is not a science from our point of view, in the sense that it is not a natural science. The test of its validity is not experiment.”.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Patrząc na przykład z korzeniem kwadratu (ang. square root) znalezionego w książce ""Sacred Geometry..."" wraca moja nadzieja, że matematyka może być próbą znalezienia sposobu na zapisanie wzorami otaczającego nas świata. Tymczasem ja szukam innych źródeł - niż matematyka - opisujących otaczający nas świat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, artykuł ten pozwolił mi zastosować w praktyce: technikę Feynmana, zapis wzorów matematycznych z wykorzystaniem LaTeX, kod języka programowania w odniesieniu do ciągu geometrycznego (ang. geometric progression). Wiedzę, którą tu przedstawiłem nie przyswoiłem w ""jeden dzień"", jest ona wynikiem ""kompilacji"" wiedzy z różnych źródeł z celowym pominięciem - ""dobrze przeszkolonego pracownik informacji turystycznej"" - sztucznej inteligencji. Jestem ciekawy czy, taka forma artykułu się spodoba?</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/top-view-photo-of-curved-road-surrounded-by-trees-1834403/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/top-view-photo-of-curved-road-surrounded-by-trees-1834403/"" target=""_blank"" rel=""noreferrer noopener"">Yaroslav Shuraev</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-02-13
2562,"Low-code i No-code - czy generatory kodu źródłowego zastąpią programistów?","<!-- wp:paragraph -->
<p>Jakiś czas temu usłyszałem - buzzword - modne słowa, low-code i no-code, które mają opisywać coś rewolucyjnego i nowoczesnego. Zastanowiłem się chwilę i doszedłem do wniosku, że low-code i no-code już używałem w 2007 r. - 16 lat temu. Podzielę się swoimi doświadczeniami w pracy z generatorami magicznego kodu źródłowego (low-code i no-code) dla oprogramowania typu Enterprise, a nie wersji demonstracyjnych w postaci Proof of Concept. Czyżby low-code i no-code, to kolejny - hype - szum reklamowy?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Chcąc dowiedzieć się więcej o low-code i no-code sprawdziłem ich definicje na Wikipedii. Jak, to czasem bywa, używałem tych narzędzi, technologii bez znajomości ich formalnych definicji.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><a href=""https://en.wikipedia.org/wiki/Low-code_development_platform"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Low-code_development_platform"" target=""_blank"" rel=""noreferrer noopener"">Low-code development platform</a></p>
<!-- /wp:paragraph --><cite>[...] ""środowisko programistyczne używane do tworzenia aplikacji za pośrednictwem graficznego interfejsu użytkownika."". [...] ""jest oprogramowaniem umożliwiającym budowę aplikacji w sposób wizualny, za pomocą diagramów, grafów czy formularzy bez znajomości języków programowania"".</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><a href=""https://en.wikipedia.org/wiki/No-code_development_platform"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/No-code_development_platform"" target=""_blank"" rel=""noreferrer noopener"">No-code development platform</a></p>
<!-- /wp:paragraph --><cite>[...] ""pozwalają programistom i osobom niebędącym programistami na tworzenie aplikacji za pomocą graficznych interfejsów użytkownika i konfiguracji zamiast tradycyjnego programowania komputerowego."". [...] """".</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Obie platformy mają część wspólną, o której pisze Wikipedia:</p>
<!-- /wp:paragraph --><cite>[...] Platformy programistyczne bez kodu (no-code) są blisko spokrewnione z platformami programistycznymi o niskim kodzie (low-code), ponieważ <strong>obie mają na celu przyspieszenie procesu tworzenia aplikacji</strong>. Jednak w przeciwieństwie do platform programistycznych o niskim poziomie kodu (low-code), platformy programistyczne bez kodu (no-code) w ogóle nie wymagają pisania kodu, zazwyczaj oferując gotowe szablony, za pomocą których firmy mogą tworzyć aplikacje. [...]</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Wspomniałem o <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Enterprise_software"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Enterprise_software"" target=""_blank"">oprogramowaniu typu Enterprise</a> i wersji demonstracyjnej w postaci <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Proof_of_concept"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Proof_of_concept"" target=""_blank"">Proof of Concept</a>. Warto wyjaśnić oba pojęcia, żeby lepiej zrozumieć charakter, tego typu oprogramowania. W telegraficznym skrócie i dużym uproszczeniu, Proof of Concept jest wersją demonstracyjną docelowego i działającego oraz dużego i złożonego oprogramowania typu Enterprise używanego przez firmy do realizacji swoich celów.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Enterprise software</p>
<!-- /wp:paragraph --><cite><strong>EN</strong>: According to Martin Fowler, ""Enterprise applications are about the display, manipulation, and storage of large amounts of often complex data and the support or automation of business processes with that data."".<br><br><strong>PL</strong>: Według Martina Fowlera „aplikacje korporacyjne służą do wyświetlania, manipulowania i przechowywania dużych ilości często złożonych danych oraz wspierania lub automatyzacji procesów biznesowych za pomocą tych danych.”.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Proof of Concept</p>
<!-- /wp:paragraph --><cite><strong>EN</strong>: Proof of concept (POC or PoC), also known as proof of principle, is a realization of a certain method or idea in order to demonstrate its feasibility, or a demonstration in principle with the aim of verifying that some concept or theory has practical potential. A proof of concept is usually small and may or may not be complete. These collaborative trials aim to test feasibility of business concepts and proposals to solve business problems and accelerate business innovation goals.<br><br><strong>PL</strong>: Dowód koncepcji (POC lub PoC), znany również jako dowód zasady, to realizacja określonej metody lub pomysłu w celu wykazania jej wykonalności lub demonstracja w zasadzie w celu sprawdzenia, czy jakaś koncepcja lub teoria ma praktyczny potencjał. Weryfikacja koncepcji jest zwykle niewielka i może być kompletna lub nie.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Wyjaśnione pojęcia low-code i no-code brzmią wspaniale: ""tworzenie aplikacji za pomocą graficznych interfejsów użytkownika i konfiguracji zamiast tradycyjnego programowania komputerowego"" oraz ""budowa aplikacji w sposób wizualny, za pomocą diagramów, grafów czy formularzy bez znajomości języków programowania"". Postaram się odpowiedzieć na pytanie - Czy tak jest w praktyce? - przedstawiając narzędzia, których używałem oraz opisując moje doświadczenia i spostrzeżenia w pracy z nimi, bez wnikania w szczegóły techniczne.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lista narzędzi typu low-code i no-code, z których korzystałem:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Oracle Forms - bazy danych,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>WebLogic Integration - procesy biznesowe,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>NetBeans - graficzny interfejs użytkownika.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Oracle Forms</strong> miało zrewolucjonizować i ułatwić dostęp do bazy danych stworzonej przez firmę Oracle. Ułatwiony dostęp miał być dla osób, które znają podstawy SQL, ale nie wiedzą jak tworzyć aplikacje typu desktop - z graficznym interfejsem użytkownika - umożliwiające wprowadzanie i wyszukiwanie danych w bazie danych za pomocą formularza.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W dużym uproszczeniu do<strong> Oracle Forms ""zasiadał"" techniczny specjalista od baz danych oraz języka SQL</strong> i tworzył aplikację z graficznym interfejsem użytkownika.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Formularze umożliwiały np.: zarządzanie magazynem, wprowadzanie produktów, wyszukiwanie. Stanowiły graficzną nakładkę na bazę danych i zapytania SQL, która umożliwiała operacje CRUD na tabelach w bazie danych. Przykład użycia Oracle Forms - <a href=""https://www.slideshare.net/atothman/oracle-forms-les05"" target=""_blank"" rel=""noreferrer noopener"">Oracle Forms Presentation</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2782,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Oracle-Form-Builder_01.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Oracle-Form-Builder_01-1024x673.png"" alt=""low-code no-code Oracle Form Builder Mentor Junior Java Developer"" class=""wp-image-2782""/></a><figcaption class=""wp-element-caption"">low-code no-code Oracle Form Builder Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2783,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Oracle-Form-Builder_02.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Oracle-Form-Builder_02.png"" alt=""low-code no-code Oracle Form Builder Mentor Junior Java Developer"" class=""wp-image-2783""/></a><figcaption class=""wp-element-caption"">low-code no-code Oracle Form Builder Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Finalnie, nie było tak kolorowo, zapytania SQL trzeba było opakować w procedury składowane, czyli dodatkowy element po stronie bazy danych. Spowalniało, to działanie GUI, a tym samym interakcje z formularzami. Modyfikacja elementów na styku interfejsu graficznego i bazy danych była czasochłonna i podatna na błędy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>WebLogic Integration</strong> miało być ułatwieniem dla programistów przy tworzeniu i modelowaniu procesów biznesowych oraz logiki aplikacji. Modelowane procesy miały być łatwe w modyfikacji bez konieczności zmiany kodu źródłowego aplikacji. Nie mniej jednak wymagały one późniejszego uzupełnienia kodem języka Java.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W odróżnieniu od Oracle Forms <strong>do WebLogic Integration ""zasiadał"" analityk biznesowy</strong>, bez technicznej wiedzy i tworzył graficznie modele procesów biznesowych. Graficzne modele procesów opisywały np.: przepływ informacji niezbędnych do realizacji promocji abonamentu dla klientów sieci komórkowych. Przykład użycia WebLogic Integration - <a href=""https://docs.oracle.com/cd/E13214_01/wli/docs85/overview/1intro.html"" data-type=""URL"" data-id=""https://docs.oracle.com/cd/E13214_01/wli/docs85/overview/1intro.html"" target=""_blank"" rel=""noreferrer noopener"">Introduction to WebLogic Integration</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2780,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/WebLogic-Integration-Business-Process_WebLogic_Workshop-IDE_01.gif"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/WebLogic-Integration-Business-Process_WebLogic_Workshop-IDE_01.gif"" alt=""low-code no-code WebLogic Integration Business Process WebLogic Workshop IDE Mentor Junior Java Developer"" class=""wp-image-2780""/></a><figcaption class=""wp-element-caption"">low-code no-code WebLogic Integration Business Process WebLogic Workshop IDE Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2781,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/WebLogic-Integration-Business-Process_WebLogic_Workshop-IDE_02.jpg"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/WebLogic-Integration-Business-Process_WebLogic_Workshop-IDE_02.jpg"" alt=""low-code no-code WebLogic Integration Business Process WebLogic Workshop IDE Mentor Junior Java Developer"" class=""wp-image-2781""/></a><figcaption class=""wp-element-caption"">low-code no-code WebLogic Integration Business Process WebLogic Workshop IDE Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Tu również nie było tak kolorowo. Wizualna modyfikacja procesów biznesowych dosłownie szatkowała kod źródłowy języka Java, który należało napisać od nowa. Wdrażanie i uruchamianie modeli procesów biznesowych wymagało serwera aplikacji WebLogic, który potrzebował bardzo dużych zasobów pamięci i mocy obliczeniowej procesora.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>NetBeans</strong> miało ułatwiać programistom tworzenie graficznego interfejsu użytkownika dla języka Java z wykorzystaniem biblioteki Swing. Sam NetBeans, to w zasadzie <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Integrated_development_environment"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Integrated_development_environment"" target=""_blank"">IDE</a>, czyli zintegrowane środowisko programistyczne. W NetBeans można wyklikać wiele elementów bez znajomości szczegółów technicznych, np.: połączenia z bazą danych, serwerem aplikacyjnym oraz gotowe aplikacje Web i Enterprise. Przykład użycia NetBeans - <a rel=""noreferrer noopener"" href=""https://netbeans.apache.org/kb/docs/java/quickstart-gui.html"" data-type=""URL"" data-id=""https://netbeans.apache.org/kb/docs/java/quickstart-gui.html"" target=""_blank"">Designing a Swing GUI in NetBeans IDE</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2784,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Designing-Swing-GUI_NetBeans-IDE_01.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Designing-Swing-GUI_NetBeans-IDE_01-1024x609.png"" alt=""low-code no-code Designing Swing GUI NetBeans IDE Mentor Junior Java Developer"" class=""wp-image-2784""/></a><figcaption class=""wp-element-caption"">low-code no-code Designing Swing GUI NetBeans IDE Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2785,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Designing-Swing-GUI_NetBeans-IDE_02.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/Designing-Swing-GUI_NetBeans-IDE_02.png"" alt=""low-code no-code Designing Swing GUI NetBeans IDE Mentor Junior Java Developer"" class=""wp-image-2785""/></a><figcaption class=""wp-element-caption"">low-code no-code Designing Swing GUI NetBeans IDE Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Wizualnie, graficzny interfejs użytkownika stworzony w NetBeans wyglądał bardzo ładnie, był szyty na miarę i każdy element - przyciski, pola tekstowe, tabele - były równo ułożone jak spod linijki. ""Pod spodem"" w wygenerowanym kodzie źródłowym nie było tak kolorowo. Modyfikacja kodu źródłowego wiązała się z ""popsuciem"" działającej aplikacji - wiele elementów, kodu miało ""zabronioną"" modyfikację. Wygenerowane zostało również bardzo dużo nadmiarowych elementów, które wzajemnie się duplikowały i wprowadzały zawiłość w kodzie źródłowym.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>W jednym z akapitów cytowałem Martina Fowlera, którego artykuły polecam osobom, które chcą uzupełnić swój warsztat programistyczny o dobre praktyki opisane w profesjonalny i wyczerpujący sposób - <a rel=""noreferrer noopener"" href=""https://martinfowler.com"" target=""_blank"">https://martinfowler.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zdaję sobie sprawę, że opisuję moje doświadczenia z technologiami, których używałem dawno temu. Niemniej jednak, właśnie dzięki temu chcę pokazać, że od wielu lat podejmowane są próby stworzenia magicznych narzędzi, które pozwolą dosłownie wyklikać i wygenerować aplikacje bez potrzeby znajomości języka programowania oraz bez udziału programistek, programistów.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wszystkie opisane narzędzia korzystały z graficznych komponentów, które można było używać za pomocą mechanizmu <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Przeci%C4%85gnij_i_upu%C5%9B%C4%87"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Przeci%C4%85gnij_i_upu%C5%9B%C4%87"" target=""_blank"">przeciągnij i upuść</a> (ang. drag and drop). Oczywiście należało wiedzieć jak połączyć ze sobą poszczególne elementy. Z uwagi na ten fakt narzędzia low-code i no-code wymagają wiedzy, którą musi przyswoić osoba, która z nich korzysta. Po mimo, że w dużej części przypadków nie trzeba znać języka programowania, to należy nauczyć się obsługi narzędzi tworzących oprogramowanie z wykorzystaniem low-code i no-code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Generatory kodu, bo tak postrzegam narzędzia low-code i no-code mają być uniwersalne, a zarazem dostarczać niestandardowe (ang. custom) oprogramowanie szyte na miarę. Moim zdaniem, jeżeli coś jest uniwersalne, to kosztem czegoś. W większości przypadków są one niezoptymalizowane i wymagają więcej zasobów, tym samym są mniej wydajne. Narzędzia wspierające generowanie kodu są czarnymi skrzynkami, nad którymi mamy ograniczoną kontrolę, które możemy konfigurować w niewielkim stopniu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W każdym przypadku, gdzie korzystaliśmy z narzędzi low-code i no-code używaliśmy ich jako punktu wejścia, punktu łączącego dany produkt - Oracle Forms, WebLogic Integration, NetBeans - z własnym ręcznie napisanym kodem źródłowym. Pozwalaliśmy tym narzędziom, technologiom wpuścić nas do swojego świata magicznie generowanego kodu, aby następnie rozsiąść się wygodnie z naszym własnym kodem źródłowym.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej cytat mojego serdecznego kolegi z branży IT, który zapytany przeze mnie o low-code i no-code odpowiedział bardzo trafnie, zgadzam się w 100% z jego słowami.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Marcin o low-code i no-code</p>
<!-- /wp:paragraph --><cite>""Tak, ludzie od zawsze chcieli mieć prościej. Problem, czy tracą ekspresje na tym, jeżeli tak, to na dłuższą metę nic z tego nie będzie."".</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Podsumowując, biorąc pod uwagę moje doświadczenie z low-code i no-code jestem bardzo sceptycznie nastawiony do wszelkiego rodzaju generatorów magicznego kodu źródłowego, finalnie i tak jest więcej dodatkowej pracy niż początkowych korzyści.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/close-up-view-of-system-hacking-5380642/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/close-up-view-of-system-hacking-5380642/"" target=""_blank"" rel=""noreferrer noopener"">Tima Miroshnichenko</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-03-03
2800,"Używamy ""starych"" frameworków - Java EE vs. Spring Framework - Dawid kontra Goliat","<!-- wp:paragraph -->
<p>Patrząc na popularność mojego artykułu <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2023/03/03/low-code-i-no-code-czy-generatory-kodu-zrodlowego-zastapia-programistow/"" data-type=""post"" data-id=""2562"" target=""_blank"">Low-code i No-code – czy generatory kodu źródłowego zastąpią programistów?</a>, gdzie cofam się w czasie i opisuję ""stare"" technologie, które miały zrewolucjonizować sposób wytwarzania oprogramowania. Dziś postanowiłem odświeżyć mój artykuł sprzed ponad roku, który napisałem dla <a rel=""noreferrer noopener"" href=""https://bulldogjob.pl"" data-type=""URL"" data-id=""https://bulldogjob.pl"" target=""_blank"">https://bulldogjob.pl</a>, w którym opisałem nierówną ""walkę"" pomiędzy Java EE (Enterprise Edition), a Spring Framework - Dawid kontra Goliat. Cytuję fragmenty artykułu poprawiając daty oraz dodając moje komentarze.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""id"":2812,""sizeSlug"":""large"",""linkDestination"":""media""} -->
<figure class=""wp-block-image size-large""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/10112119_java_ee_kontra_spring_framework-bulldogjob-pl.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/03/10112119_java_ee_kontra_spring_framework-bulldogjob-pl-1024x536.png"" alt=""Java EE vs. Spring Framework - Dawid kontra Goliat - bulldogjob.pl"" class=""wp-image-2812""/></a><figcaption class=""wp-element-caption"">Java EE vs. Spring Framework - Dawid kontra Goliat - bulldogjob.pl</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:paragraph -->
<p><a href=""https://bulldogjob.pl/readme/java-ee-i-spring-framework-czyli-dawid-kontra-goliat"">https://bulldogjob.pl/readme/java-ee-i-spring-framework-czyli-dawid-kontra-goliat</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:pullquote -->
<figure class=""wp-block-pullquote""><blockquote><p>Obecnie obydwa narzędzia trochę się zestarzały. Spring Framework jest już ""pełnoletni"" - w tym roku skończył 20 lat. Natomiast Java EE kończy 23 lat, sama Java ma już 27 lat.</p></blockquote></figure>
<!-- /wp:pullquote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph --><cite>[...] wytłumaczę, dlaczego moim zdaniem Java EE przegrała w ""walce"" ze Spring Framework. Walka ta mogłaby się wydawać z góry przegrana z perspektywy Springa. Był on niewielkim graczem w porównaniu z ""gigantem"", jakim była Java EE w dawnych czasach, gdyż stał za nią Oracle, a Spring Framework inicjalnie został stworzony przez jedną osobę (Roda Johnsona).<br><br>[...] Podczas mojej pracy jako programista Java korzystałem z dwóch wyżej wymienionych, najbardziej popularnych rozwiązań typu enterprise. Pierwszym rozwiązaniem była<a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_EE"" target=""_blank""> Java EE (Enterprise Edition)</a>, drugim<a rel=""noreferrer noopener"" href=""https://spring.io/"" target=""_blank""> Spring Framework</a>.&nbsp;</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Java EE, to obecnie Jakarta EE po ""oddelegowaniu projektu"" przez firmę Oracle do <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Eclipse_Foundation"" target=""_blank"">Eclipse Foundation</a>. Swoją drogą, to oddelegowanie wygenerowało spore zamieszanie w projektach i ich bibliotekach, które korzystają z Java EE. Należało zmienić importy dla Java EE w takich projektach jak Spring Framework i Hibernate, ale to już temat na osobny artykuł.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Java EE</p>
<!-- /wp:paragraph --><cite>Co takiego stało się, że Java EE, która jest dzieckiem twórców języka Java, przegrała ze Spring Frameworkiem? Bardzo obrazowo porównuję to na przykładzie PKP i PolskiegoBusa. PKP przespało swój czas na polskim rynku, nie rozwijało się, posiadało stare pociągi, bez udogodnień. Natomiast PolskiBus (obecnie FlixBus) wykorzystał pojawiającą się szansę i stworzył bardzo dobre połączenia, oferuje nowoczesne i wygodne autobusy z wieloma udogodnieniami.<br><br>Podobnie stało się z Java EE — przespała swój czas, oferowała przestarzałe technologie i rozwiązania. Wymaga ""ciężkiego"" serwera aplikacyjnego zgodnego ze specyfikacją Java EE. Użycie EJB (Enterprise Java Beans) nie wspierało dobrych zasad programowania obiektowego. Zmieniło się to trochę za sprawą DI (Dependency Injection), ale było już za późno. Moim zdaniem największym problemem był praktycznie<strong> brak możliwości testowania komponentów EJB</strong>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Wspomniane komponenty EJB na szczęście nie zostały ""powielone"" w Spring Framework. Ten, kto nie używał komponentów <a href=""https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans"" target=""_blank"" rel=""noreferrer noopener"">Enterprise JavaBeans</a> ""niczego nie stracił"". Spring Framework natomiast dla swojego modułu Spring MVC (aplikacje web, REST) wykorzystuje <a href=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" target=""_blank"" rel=""noreferrer noopener"">Java Servlet</a> z Java EE.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Spring Framework</p>
<!-- /wp:paragraph --><cite>Natomiast<strong> Spring Framework nie wymaga ""ciężkiego"" serwera aplikacyjnego — </strong>DI&nbsp;jest jego głównym elementem, razem z Inversion of Control (IoC). Kod, który piszemy w Spring, nie jest ściśle związany z samym frameworkiem, co automatycznie pozwala na łatwe testowanie aplikacji. Dodatkowo <strong>Spring wspiera pisanie testów na każdym etapie i dla każdej warstwy aplikacji</strong>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Tutaj muszę napisać sprostowanie, uzupełnienie dla samego siebie. Kod pisany w języku Java przy użyciu adnotacji ze Spring Framework jest ściśle związany z samym frameworkiem. Natomiast użycie konfiguracji Spring Framework w plikach XML pozwala uniknąć trwałych połączeń kodu Java z frameworkiem. Pojawia się kolejny problem, co jest lepsze, konfiguracja za pomocą adnotacji, czy może z użyciem plików XML? Odpowiedź na to pytanie pozostawiam samym czytelniczkom i czytelnikom.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Przegrana Java EE</p>
<!-- /wp:paragraph --><cite>Główne problemy, które moim zdaniem przyczyniły się do ""przegranej"" Java EE ze Spring Framework:<br>* Bardzo słaba oficjalna dokumentacja do specyfikacji Java EE.<br>* Niewielka liczba przydatnych tutoriali.<br>* Konieczność używania ""ciężkich"" serwerów aplikacyjnych implementujących całą Java EE.<br>* Serwery aplikacyjne, które rzadko działały stabilnie w trakcie developmentu.<br>* Programista musiał zajmować się konfiguracją i administrowaniem serwerów Java EE.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>WebLogic Integration wspomniane w artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/03/low-code-i-no-code-czy-generatory-kodu-zrodlowego-zastapia-programistow/"" data-type=""post"" data-id=""2562"">Low-code i No-code – czy generatory kodu źródłowego zastąpią programistów?</a>, to po prostu serwer aplikacyjny WebLogic plus framework ""integracji biznesowych"", stąd w nazwie Integration. WebLogic, to serwer dla aplikacji Java EE, który moim zdaniem przyczynił się do ""przegranej"" Java EE.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><a href=""https://en.wikipedia.org/wiki/Oracle_WebLogic_Server"">https://en.wikipedia.org/wiki/Oracle_WebLogic_Server</a></p>
<!-- /wp:paragraph --><cite><strong>Oracle WebLogic Server</strong> is a <a href=""https://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"">Java EE</a> <a href=""https://en.wikipedia.org/wiki/Application_server"">application server</a> currently developed by <a href=""https://en.wikipedia.org/wiki/Oracle_Corporation"">Oracle Corporation</a>. Oracle acquired WebLogic Server when it purchased <a href=""https://en.wikipedia.org/wiki/BEA_Systems"">BEA Systems</a> in 2008.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Wygrana Spring Framework</p>
<!-- /wp:paragraph --><cite>Co moim zdaniem przyczyniło się do ""wygranej"" Spring z Java EE?<br>* Bardzo dobra oficjalna dokumentacja techniczna.<br>* Wsparcie społeczności związanej ze Spring Framework.<br>* Brak konieczności używania ""ciężkich"" serwerów dla całej Java EE.<br>* Wystarczy ""lekki"" kontener servletów, serwer HTTP np.:<a rel=""noreferrer noopener"" href=""https://tomcat.apache.org/"" target=""_blank""> Tomcat</a>,<a rel=""noreferrer noopener"" href=""https://www.eclipse.org/jetty/"" target=""_blank""> Jetty</a>.<br>* Wsparcie ze strony IDE, np.:<a rel=""noreferrer noopener"" href=""https://eclipseide.org/release/"" target=""_blank""> Eclipse</a>,<a rel=""noreferrer noopener"" href=""https://www.jetbrains.com/idea/"" target=""_blank""> IntelliJ</a>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Poniżej cytuję podsumowanie z wcześniejszego artykułu ""Java EE vs. Spring Framework - Dawid kontra Goliat"".</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph --><cite>Podsumowując, konkurencja powoduje, że powstają nowe alternatywne rozwiązania, które zaspokajają zapotrzebowanie rynku. W tym przypadku był to nowszy framework dla aplikacji typu enterprise, który rozwiązał problemy Javy EE. Praca ze Spring Framework od samego początku była przyjemniejsza w porównaniu do Java EE i napędzana entuzjazmem związanym z czymś nowym. Obecnie ciężko sobie wyobrazić projekt javowy, który nie korzysta ze Spring Framework i jego modułów, które usprawniają pracę programisty.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Patrząc na technologie - Oracle Forms, WebLogic Integration, NetBeans - opisane w artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/03/low-code-i-no-code-czy-generatory-kodu-zrodlowego-zastapia-programistow/"" data-type=""post"" data-id=""2562"">Low-code i No-code – czy generatory kodu źródłowego zastąpią programistów?</a>, które ""umarły śmiercią naturalną"" oraz biorąc pod uwagę Spring Framework, który ""wciąż żyje"" można dojść do wniosku, że Spring Framework przetrwał próbę czasu i jest idealnym rozwiązaniem. Na pewno wspomaga tworzenie aplikacji, np.: web, REST.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><a href=""https://www.juniorjavadeveloper.pl/2022/02/07/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic-geek-justjoin-it/"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2022/02/07/najczestsze-bledy-mlodszych-programistow-i-jak-sobie-z-nimi-radzic-geek-justjoin-it/"" target=""_blank"" rel=""noreferrer noopener"">Najczęstsze błędy młodszych programistów i jak sobie z nimi radzić</a></p>
<!-- /wp:paragraph --><cite>Owszem, Spring jako framework jest bardzo przydatny, obecnie bez niego trudno sobie wyobrazić tworzenie projektów. Nie zwalnia on jednak programistów z myślenia nad tworzonym kodem.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Podsumowując, obecnie większość firm IT wymaga od programistów, programistek Java znajomości Spring Framework. Może, to budować mylny obraz, że, to coś nowego innowacyjnego, a po głębszej analizie okazuje się, że, to coś ""starego"", co istnieje bardzo długo na rynku IT.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/retro-cassette-with-tape-on-gray-background-8038906/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/retro-cassette-with-tape-on-gray-background-8038906/"" target=""_blank"" rel=""noreferrer noopener"">Elijah O'Donnell</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-03-09
2847,"Przejście z Junior na Mid-Level Java Developer? Praktyczny poradnik","<!-- wp:paragraph -->
<p>Coraz więcej osób zgłasza się do mnie poszukując pomocy w przejściu ze stanowiska Junior Java Developer na Mid-Level Java Developer. Chcąc pomóc jak największej liczbie osób w tym artykule przedstawię najczęściej zadawane mi pytania oraz moje podejście do tematu przejścia z Junior na Mid-Level Java Developer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Część osób, które zgłaszają się do mnie czują, że <strong>stoją w miejscu, nie rozwijają się</strong>, to ich motywuje do zmiany. Spora część osób zgłasza się do mnie, co jest smutne, ponieważ <strong>nie otrzymuje właściwego wsparcia w projekcie</strong> od doświadczonych programistów. Dobra informacja jest taka, że każda z tych osób może przejść od junior do mid-level.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pomijając kwestie nazewnictwa Junior vs. Mid-Level, to należy pamiętać, że w tym wszystkim chodzi o doskonalenie warsztatu programistycznego. Dodatkowo każda firma inaczej nazywa stanowiska, np.: Młodszy Specjalista ds. Rozwoju Oprogramowania, Junior Java Developer, Software Engineer.  Dlatego w tym artykule duży nacisk położę na kwestię doskonalenia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Najczęściej zadawane pytania:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li>Po ilu latach mogę zostać Mid-Level Java Developerem, Developerką? </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Jaki zakres wiedzy muszę posiadać?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ile projektów muszę zrealizować?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Jak uzyskać wsparcie w projekcie od doświadczonych programistów?</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Po ilu latach mogę zostać Mid-Level Java Developerem, Developerką?</em>  <strong>Granica przejścia z Junior na Mid-Level Java Developer</strong> jest bardzo umowna. Moim zdaniem <strong>nie zależy ona od stażu pracy w latach</strong>, najważniejsza jest ""ilość"" oraz różnorodność projektów, w których Junior Java Developer, Developerka brali udział. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pytania ""Jaki zakres wiedzy muszę posiadać?"" oraz ""Ile projektów muszę zrealizować?"" zamieniłbym na jedno zasadnicze pytanie: <strong>Jak zapewnić sobie różnorodność projektów w firmie?</strong> Zacznijmy od tego, że różne projekty pozwalają na pracę z wieloma technologiami i narzędziami. Najważniejsze, to nie zamykać się we własnej strefie komfortu, działając w dobrze nam znanym i bezpiecznym projekcie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Różnorodność można znaleźć nawet w obrębie jednego projektu</strong>, implementując jego różne moduły/funkcjonalności. Pracując przy np.: module przelewów bankowych można ""przejść"" do modułu odpowiedzialnego za generowanie i/lub archiwizację dokumentów bankowych - potwierdzenie przelewu, wyciąg z karty kredytowej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zazwyczaj projekty wchodzą w skład większego systemu informatycznego, każdy projekt jest realizowany przez inny dział w firmie, to stwarza <strong>możliwość zmiany projektu w ramach różnych działów</strong>. Pracując przy np. projekcie billingowym dla operatora telekomunikacyjnego można przejść do działu wsparcia sprzedaży urządzeń.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Jak uzyskać wsparcie w projekcie od doświadczonych programistów?</em> Zakładając, że wychodzimy z pozycji Junior Java Developera, Developerki z kilkunastoma miesiącami doświadczenia oraz ze znajomością elementów opisanych w <a href=""https://www.juniorjavadeveloper.pl/2022/08/17/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera-just-join-it/"" data-type=""post"" data-id=""1822"">Jak powinny wyglądać realne wymagania dla Junior Java Developer’a? – Just Join IT</a> - Java, git, Maven/Gradle, JUnit5, HTTP, REST, Spring Framework, Hibernate ORM.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Temat uzyskania wsparcia od doświadczonych programistów jest dość złożony, bo chodzi tu o interakcję z drugim człowiekiem. Mogę podać jeden sprawdzony sposób. Dla tworzonego kodu - umieszczanego na nowym branchu w git - tworzymy Pull Request/Megre Request, przypisując doświadczonych kolegów jako osoby do review - przegląd, weryfikacja naszego kodu. Można również wykorzystać (w granicach rozsądku) wszystkie dostępne środki komunikacji, np.: chat, video, telefon oraz  rozmowa w cztery oczy.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""align"":""wide"",""className"":""is-style-dots""} -->
<hr class=""wp-block-separator alignwide has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Moje podejście do tematu wsparcia przejścia z Junior do Mid-Level Java Developer.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item -->
<li><a href=""#doglebne_poznanie_frameworkow"" data-type=""internal"" data-id=""#doglebne_poznanie_frameworkow"">Dogłębne poznanie wykorzystywanych frameworków oraz narzędzi:</a><!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a href=""#spring_mvc_java_servlet"" data-type=""internal"" data-id=""#spring_mvc_java_servlet"">Spring MVC wykorzystuje Java Servlet,</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#hibernate_jdbc"" data-type=""internal"" data-id=""#hibernate_jdbc"">Hibernate wykorzystuje JDBC (Java Database Connectivity),</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#properties_zamiast_spring_value"">Java Properties zamiast Spring @Value,</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#nakladanie_di_oop"">""Nakładanie"" Spring DI w czystym OOP,</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#spring_bez_spring_boot"">Spring Framework bez Spring Boot.</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#junit_mocking_tdd"">Testy jednostkowe, mockowanie, idealnie TDD.</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#rozbicie_problemu"">Rozbicie, wyizolowanie istoty problemu do postaci nowego oddzielnego projektu.</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#zadania_na_codewars"">Zadania - https://www.codewars.com/</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#wyzwania_na_challengerocket"">Wyzwania - https://challengerocket.com/</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href=""#get_trained_careerkarma"">""Get Trained For The Future, Today"" - https://careerkarma.com/</a></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column -->
<div class=""wp-block-column""><!-- wp:image {""width"":""140px"",""height"":""140px"",""sizeSlug"":""large"",""align"":""center""} -->
<figure class=""wp-block-image aligncenter size-large is-resized""><img src=""https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"" alt="""" style=""width:140px;height:140px""/></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center"",""fontSize"":""normal""} -->
<div class=""wp-block-column is-vertically-aligned-center has-normal-font-size""><!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center"">Całość kodu źródłowego można znaleźć na moim koncie GitHub pod adresem <a href=""https://github.com/juniorjavadeveloper-pl/java-junior-transition-mid-level"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/juniorjavadeveloper-pl/java-junior-transition-mid-level</a></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Część prezentowanego kodu źródłowego w samym artykule może być  w wersji ""okrojonej"", tak,  aby przedstawić istotę zagadnienia bez zaciemniania obrazu szczegółami. Cały kod źródłowy jest na GitHub.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id=""doglebne_poznanie_frameworkow""><em>Dogłębne poznanie wykorzystywanych frameworków oraz narzędzi</em> pozwala pokazać jak kiedyś wyglądało ""programowanie"". To pozwala zobaczyć jak wiele ułatwień dają współczesne rozwiązania. Pozwala również lepiej zrozumieć dlaczego coś działa tak, a nie inaczej oraz jak lepiej wykorzystać technologię i rozwiązać pojawiające się błędy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id=""spring_mvc_java_servlet""><strong>Spring MVC wykorzystuje Java Servlet</strong>, technologia Servletów ma 26 lat - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Jakarta_Servlet"" target=""_blank"">Jakarta Servlet</a> - wchodzi w skład Java EE - Java EE, to obecnie Jakarta EE po “oddelegowaniu projektu” przez firmę Oracle do <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Eclipse_Foundation"" target=""_blank"">Eclipse Foundation</a>. Używając Java/Jakarta EE trzeba ""zainstalować"" serwer webowy obsługujący protokuł HTTP - <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Apache_Tomcat"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Apache_Tomcat"" target=""_blank"">Apache Tomcat</a> - skonfigurować go, dodać plugin do Maven i już można uruchamiać aplikacje web. Korzystając ze Spring MVC + Spring Boot wystarczy wygenerować aplikację web - <a rel=""noreferrer noopener"" href=""https://start.spring.io/"" data-type=""URL"" data-id=""https://start.spring.io/"" target=""_blank"">Spring Initializr</a> - następnie po prostu uruchomić aplikację.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Web on Servlet Stack - 1. Spring Web MVC</p>
<!-- /wp:paragraph --><cite>Spring Web MVC is the original web framework built on the Servlet API and has been included in the Spring Framework from the very beginning. The formal name, ""Spring Web MVC,"" comes from the name of its source module (<a href=""https://github.com/spring-projects/spring-framework/tree/main/spring-webmvc""><code>spring-webmvc</code></a>), but it is more commonly known as ""Spring MVC"". - <a href=""https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web.html#mvc"" target=""_blank"" rel=""noreferrer noopener"">https://docs.spring.io/spring-framework/docs/6.0.7/reference/html/web.html#mvc</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Poniższy kod pokazuje jak obsłużyć żądanie protokołu HTTP dla metody GET wraz z przesłaniem parametru żądania. Dla technologi Java/Jakarta EE potrzebujemy klasy Java <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">NotThatSimpleJavaServlet</code> oraz pliku <code data-enlighter-language=""xml"" class=""EnlighterJSRAW"">web.xml</code> z konfiguracją. Dla Spring MVC wystarczy jedna klasa Java <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">SimpleSpringController</code>. W przypadku Java/Jakarta Servlet niepotrzebnie wiążemy się z klasą <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">HttpServlet</code> - poprzez dziedziczenie, <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">extends</code> - jak wiemy w języku Java nie ma wielodziedziczenia, obsługa wyjątków jest utrudniona.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

public class NotThatSimpleJavaServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        String dashboardMode = request.getParameter(""dashboardMode"");
        if (dashboardMode != null) {
            request.setAttribute(""dashboardMode"", dashboardMode);
        }

        RequestDispatcher requestDispatcher = 
                request.getRequestDispatcher(""/WEB-INF/views/dashboard.jsp"");
        requestDispatcher.forward(request, response);
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Obsługa end-point, np.: http://localhost:8080/dashboard/java/servlet/ - połączenie klasy Java <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">NotThatSimpleJavaServlet</code> oraz pliku konfiguracyjnego <code data-enlighter-language=""xml"" class=""EnlighterJSRAW"">web.xml</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""xml""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""xml"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;?xml version=""1.0"" encoding=""UTF-8""?>
&lt;web-app xmlns=""https://jakarta.ee/xml/ns/jakartaee""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""https://jakarta.ee/xml/ns/jakartaee 
            https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd""
         version=""5.0""
         metadata-complete=""false"">

    &lt;servlet>
        &lt;servlet-name>NotThatSimpleJavaServlet&lt;/servlet-name>
        &lt;!-- NOTE: package name shortened for readability -->
        &lt;servlet-class>
            pl.juniorjavadeveloper.java.mvc_java_servlet.NotThatSimpleJavaServlet
        &lt;/servlet-class>
    &lt;/servlet>

    &lt;servlet-mapping>
        &lt;servlet-name>NotThatSimpleJavaServlet&lt;/servlet-name>
        &lt;url-pattern>/dashboard/java/servlet/*&lt;/url-pattern>
    &lt;/servlet-mapping>
&lt;/web-app></pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping(value = ""/dashboard/simple/spring"")
public class SimpleSpringController {
    @GetMapping
    public String dashboardView(String dashboardMode, Model model) {
        if (dashboardMode != null) {
            model.addAttribute(""mode"", dashboardMode);
        }
        return ""dashboard.html"";
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Obsługa end-point, np.: http://localhost:8080/dashboard/simple/spring/ - wymaga tylko jednej klasy Java <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">SimpleSpringController</code> - konfiguracja dostarczona przez Spring Boot. </p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""hibernate_jdbc""><strong>Hibernate wykorzystuje JDBC (Java Database Connectivity)</strong>, co oznacza, że warto wiedzieć, co dzieje się ""pod spodem"". Poznanie czystego JDBC wymusza również znajomość SQL, co jest bardzo ważnym elementem w warsztacie Mid-Level Java Developera, Developerki. Dodatkowo, jeżeli nam na wydajności operacji bazodanowych, to JDBC jest bardzo dobrym rozwiązaniem. Należy pamiętać, że mamy więcej możliwości utrwalania danych w Java - więcej szczegółów w artykule <a rel=""noreferrer noopener"" href=""https://dev.to/yigi/hibernate-vs-jdbc-vs-jpa-vs-spring-data-jpa-1421"" target=""_blank"">https://dev.to/yigi/hibernate-vs-jdbc-vs-jpa-vs-spring-data-jpa-1421</a>. Kod źródłowy z przykładami wykorzystania Hibernate można znaleźć na moim GitHub - <a rel=""noreferrer noopener"" href=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/"" target=""_blank"">https://github.com/juniorjavadeveloper-pl/hibernate-examples/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>1. Architecture - 1.1. Overview</p>
<!-- /wp:paragraph -->

<!-- wp:image {""sizeSlug"":""large"",""linkDestination"":""media"",""align"":""center""} -->
<figure class=""wp-block-image aligncenter size-large""><a href=""https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/images/architecture/data_access_layers.svg"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/images/architecture/data_access_layers.svg"" alt=""""/></a></figure>
<!-- /wp:image --><cite>Hibernate, as an ORM solution, effectively ""sits between"" the Java application data access layer and the Relational Database, as can be seen in the diagram above. - <a href=""https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/Hibernate_User_Guide.html#architecture-overview"" data-type=""URL"" data-id=""https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/Hibernate_User_Guide.html#architecture-overview"" target=""_blank"" rel=""noreferrer noopener"">https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/Hibernate_User_Guide.html#architecture-overview</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""sql""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""sql"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">CREATE TABLE EMPLOYEES(
    ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    DEPARTMENT VARCHAR(255)
);</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Korzystając z JDBC należy samemu utworzyć elementy w bazie danych, np.: tabele. Powyższy skrypt SQL tworzy tabelę o nazwie EMPLOYEES.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class EmployeeModel {
    private Long id;

    private String firstName;
    private String lastName;

    private String department;

    // getters/setters
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Potrzebujemy również klasę POJO, która będzie odpowiadać strukturze tabeli w bazie danych, ale klasę POJO musimy samodzielnie wypełnić za pomocą klasy DAO - w odróżnieniu od Hibernate, gdzie dzieje się, to automatycznie.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class EmployeeModelDao {

    private static final String DB_URL =
            ""jdbc:h2:~/h2database/hibernate-orm-jdbc-database"";
    private static final String INSERT_EMPLOYEE_SQL =
            ""INSERT INTO EMPLOYEES(ID, FIRST_NAME, LAST_NAME, DEPARTMENT)"" +
                    "" VALUES(?, ?, ?, ?);"";

    public void create(EmployeeModelJDBC employeeModel) {
        // NOTE: Connection code must be moved to a separate class and reused!
        try (Connection connection = DriverManager.getConnection(DB_URL, ""sa"", """");
             PreparedStatement preparedStatement =
                     connection.prepareStatement(INSERT_EMPLOYEE_SQL)) {

            preparedStatement.setLong(1, employeeModel.getId());
            preparedStatement.setString(2, employeeModel.getFirstName());
            preparedStatement.setString(3, employeeModel.getLastName());
            preparedStatement.setString(4, employeeModel.getDepartment());

            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Dla JDBC trzeba stworzyć klasę DAO (Data Access Object) - oddzielną dla każdej tabeli w bazie danych. Klasa DAO będzie zawierała operacje CRUD na tabeli, dla SQL będą, to INSERT, SELECT, UPDATE oraz DELETE.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""xml""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""xml"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;?xml version='1.0' encoding='utf-8'?>
&lt;!DOCTYPE hibernate-configuration PUBLIC
        ""-//Hibernate/Hibernate Configuration DTD 3.0//EN""
        ""http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"">
&lt;hibernate-configuration>
    &lt;session-factory>
        &lt;!-- Database connection settings -->
        &lt;property name=""connection.driver_class"">org.h2.Driver&lt;/property>
        &lt;property name=""connection.url"">jdbc:h2:~/hibernate-database&lt;/property>
        &lt;property name=""connection.username"">sa&lt;/property>
        &lt;property name=""connection.password"">&lt;/property>
        &lt;!-- JDBC connection pool (use the built-in) -->
        &lt;property name=""connection.pool_size"">1&lt;/property>
        &lt;!-- SQL dialect -->
        &lt;property name=""dialect"">org.hibernate.dialect.H2Dialect&lt;/property>
        &lt;!-- Echo all executed SQL to stdout -->
        &lt;property name=""show_sql"">true&lt;/property>
        &lt;!-- Drop and re-create the database schema on startup -->
        &lt;property name=""hbm2ddl.auto"">create&lt;/property>

        &lt;!-- Names the annotated entity class -->
        &lt;!-- NOTE: package name shortened for readability -->
        &lt;mapping class=""pl.juniorjavadeveloper.java.orm_jdbc.UserEntity""/>
    &lt;/session-factory>
&lt;/hibernate-configuration></pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Dla Hibernate ORM trzeba jednorazowo stworzyć plik konfiguracyjny dla połączenia z bazą danych oraz utrwalanych encji. </p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;

@Entity
@Table(name = ""USERS"")
public class UserEntity {
    @Id
    @GeneratedValue
    private Long id;

    @Column(unique = true)
    private String login;
    private String password;

    @Column(name = ""FIRST_NAME"")
    private String firstName;
    @Column(name = ""LAST_NAME"")
    private String lastName;

    public UserEntity() {
    }

    public UserEntity(String login, String password) {
        this.login = login;
        this.password = password;
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>W Hibernate operujemy pojęciem <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">@Entity</code>, które pozwalają za pomocą adnotacji odwzorować elementy klasy Java (również POJO) na strukturę tabeli w bazie danych. Dla powyższej encji Hibernate automatycznie stworzy tabelę o nazwie USERS.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class UserEntityDao {
    private static SessionFactory sessionFactory;

    // NOTE: this code must be moved to a separate class and then should be reused!
    static {
        StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                .configure(""hibernate.cfg.xml"")
                .build();
        try {
            sessionFactory = new MetadataSources(serviceRegistry)
                    .buildMetadata()
                    .buildSessionFactory();
        } catch (Exception e) {
            e.printStackTrace();
            StandardServiceRegistryBuilder.destroy(serviceRegistry);
        }
    }

    public void create(UserEntity userEntity) {
        Session session = sessionFactory.openSession();
        session.beginTransaction();
        session.save(userEntity);
        session.getTransaction().commit();
        session.close();
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>DAO dla Hibernate będzie używać pojęcia sesji oraz transakcji, które będą ""oplatały"" operacje CRUD na obiektach encji. Dla różnych encji, np.: Student, Notebook, Employee będą używane te same metody do operacji na encjach, np.: SQL INSERT, to metoda save().</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""properties_zamiast_spring_value""><strong>Java Properties zamiast Spring @Value.</strong> Korzystając z dobrodziejstwa Spring Framework można łatwo pominąć fakt, że pewne elementy konfiguracyjne w pliku application.properties muszą być w jakiś sposób załadowane i odczytane. Do tego dochodzi fakt, że takie elementy konfiguracyjne muszą być różne dla różnych środowisk, np. dev, test, prod. Poniżej prezentuję czysto Javowe rozwiązanie w kwestii odczytu klucz/wartość z plików properties oraz jego wykorzystanie w DAO z użyciem JDBC.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import java.io.IOException;
import java.util.Properties;

public class JdbcPropertiesHelper {
    private static final Properties properties = new Properties();

    static {
        try {
            properties.load(ClassLoader.getSystemClassLoader()
                    .getResourceAsStream(""jdbc.properties""));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String getProperty(String key) {
        return properties.getProperty(key);
    }

    public static String getProperty(String key, String defaultValue) {
        return properties.getProperty(key, defaultValue);
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyżej przykładowa implementacja własnego mechanizmu odczytu plików properties.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">// JdbcPropertiesHelper example usage in EmployeeModelDao.
try (Connection connection = DriverManager.getConnection(
        JdbcPropertiesHelper.getProperty(""jdbc.url""),
        JdbcPropertiesHelper.getProperty(""jdbc.username""),
        JdbcPropertiesHelper.getProperty(""jdbc.password""));
     PreparedStatement preparedStatement =
             connection.prepareStatement(INSERT_EMPLOYEE_SQL,
                     Statement.RETURN_GENERATED_KEYS)) {
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Odczyt parametrów konfiguracji połączenia z bazą danych za pomocą plików properties pozwala nam odseparować się od konfiguracji oraz dostarczyć klucz/wartość dla różnych środowisk, np.: dev, test.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Component;

@Component
@PropertySource(""classpath:jdbc.properties"")
public class SimpleSpringValueProperties {
    @Value(""${jdbc.url}"")
    private String jdbcUrl;
    @Value(""${jdbc.username}"")
    private String username;
    @Value(""${jdbc.password}"")
    private String password;

    // getters/setters
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyżej kod pokazujący jak łatwo i auto-magicznie odczytywanie klucz/wartość można zaimplementować w Spring Framework.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""nakladanie_di_oop""><strong>""Nakładanie"" Spring DI w czystym OOP.</strong> Na temat ""DI w czystym OOP"" pisałem już w artykule <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2023/01/19/trzy-trojce-programistyczne-jak-ulatwic-poczatki-programowania/#trzy-elementy-wspierajace-programowanie-obiektowe"" data-type=""URL"" data-id=""https://www.juniorjavadeveloper.pl/2023/01/19/trzy-trojce-programistyczne-jak-ulatwic-poczatki-programowania/#trzy-elementy-wspierajace-programowanie-obiektowe"" target=""_blank"">Trzy trójce programistyczne – jak ułatwić początki programowania</a>, wykorzystam przedstawione tam klasy Java, aby dodać elementy Springa. Dlaczego użyłem @Scope(value = ""prototype"") ? - <a rel=""noreferrer noopener"" href=""https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes"" target=""_blank"">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

@Component
@Scope(value = ""prototype"")
public class Notebook {

    protected int pages;
    protected int currentPage;
    protected Map&lt;Integer, String> contents = new HashMap&lt;>();

    // NOTE: skipped methods for code clarity.
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyżej zwykła  klasa Java ""zamieniona"" na @Component, Bean Springowy. Kod w Spring Framework, który nałożyłem na przykład z kodem w czystej Javie.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@Component
@Scope(value = ""prototype"")
public class Student {

    private final Notebook notebook;

    public Student(Notebook notebook) {
        this.notebook = notebook;
    }

    // NOTE: skipped methods for code clarity.
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyżej zwykła  klasa Java ""zamieniona"" na @Component, Bean Springowy.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""spring_bez_spring_boot""><strong>Spring Framework bez Spring Boot.</strong> Dla powyższego kodu idealnie można przedstawić aplikację napisaną z użyciem Spring Framework, ale bez wykorzystania Spring Boot. Tak, można tworzyć aplikacje w ""czystym"" Spring Framework bez użycia Spring Boot, kiedyś była, to jedyna dostępna opcja. Obecnie, to podejście można wykorzystać do nieszablonowego połączenia aplikacji napisanych w języku Java, np.: Spring Framework + <a href=""https://en.wikipedia.org/wiki/JavaFX"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/JavaFX"" target=""_blank"" rel=""noreferrer noopener"">JavaFX</a> - funkcjonalność DI i IoC w połączeniu z aplikacją typu desktop. </p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class SpringApplicationWithoutSpringBoot {
    public static void main(String[] args) {
        ApplicationContext applicationContext =
                new AnnotationConfigApplicationContext(
                        ""pl.juniorjavadeveloper.java.juniortransitionmid"" +
                                "".deepunderstanding.spring"");

        Student firstStudentBean = applicationContext.getBean(Student.class);
        firstStudentBean.notebookPages(100);

        Student secondStudentBean = applicationContext.getBean(Student.class);
        secondStudentBean.notebookPages(60);
        secondStudentBean.startNote(""Hello World!"", 11);
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyżej kod Java tworzący kontekst aplikacji Spring <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">ApplicationContext</code> dla opcji z adnotacjami <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">AnnotationConfigApplicationContext</code>. Po stworzeniu kontekstu aplikacji, dostęp do Beanów Springowych uzyskujemy za pomocą metody <code data-enlighter-language=""java"" class=""EnlighterJSRAW"">getBean()</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""raw""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""raw"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">kwi 10, 2023 9:14:36 PM pl.jjd.j.j.d.spring.di_oop.Student notebookPages
INFO: notebookPages(100)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Notebook setPages
INFO: setPages(100)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Student notebookPages
INFO: notebookPages(60)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Notebook setPages
INFO: setPages(60)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Student startNote
INFO: startNote(Hello World!, 11)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Notebook goToPage
INFO: startNote(11)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Notebook writeNoteContent
INFO: writeNoteContent(Hello World!)
kwi 10, 2023 9:14:36 PM pl.jjd.java.j.d.spring.di_oop.Notebook writeNoteContent
INFO: Notebook - append note content to the current page: Hello World!

Process finished with exit code 0
</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""junit_mocking_tdd"">Testy jednostkowe, mockowanie, idealnie <a href=""https://en.wikipedia.org/wiki/Test-driven_development"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Test-driven_development"" target=""_blank"" rel=""noreferrer noopener"">TDD</a>. Zapomnij o ""testowaniu kodu"" za pomocą metody main(). Pisanie testów jednostkowych, to podstawa, jeżeli ""chcemy spać spokojnie"". Jeżeli ktoś pisze testy jednostkowe, to znaczy, że rozumie tworzony system informatyczny. Koleżanka, kolega z zespołu, dwa razy się zastanowi zanim zmodyfikuje kod źródłowy, a modyfikacja spowoduje błędy w testach - chyba, że znają i stosują ""model Duński"" w testach ;) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jeżeli chcemy przetestować czy działa nowo dodana encja Hibernate, to szaleństwem jest budowanie, uruchamianie aplikacji, następnie logowanie się do systemu, aby wpisać dane w formularzu na stronie web, a koniec śledzenie błędów w logach. W tej sytuacji potrzebne są testy jednostkowe bądź integracyjne. Więcej o testach jednostkowych i nie tylko można poczytać na <a href=""https://martinfowler.com/testing/"">https://martinfowler.com/testing/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W sytuacji, kiedy nie mamy dostępu do usług zewnętrznych, np.: api firmy trzeciej, a nasz kod źródłowy, tego wymaga, to piszemy testy z wykorzystaniem mocków. Nie jest, to łatwe, ale jeżeli raz poznamy ideę mockowania, to będzie nam dużo łatwiej. Najczęściej po prostu nie chemy modyfikować pewnych zasobów, a przetestować nasz nowy kod. Przykładem jest mock dla repository w service.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class EmployeeServiceMockTest {

    private static final long EMPLOYEE_MODEL_ID_1 = 1L;

    @Test
    void register() {
        // given
        EmployeeModelDao employeeModelDaoMock = Mockito.mock(EmployeeModelDao.class);
        EmployeeService employeeService = new EmployeeService(employeeModelDaoMock);

        EmployeeModel employeeModel = new EmployeeModel(null, ""Tim"", ""Cook"", ""Sales"");
        EmployeeModel registeredEmployeeModelMock = 
                new EmployeeModel(EMPLOYEE_MODEL_ID_1, ""Tim"", ""Cook"", ""Sales"");

        // when
        Mockito.when(employeeService.register(employeeModel))
                .thenReturn(registeredEmployeeModelMock);
        EmployeeModel registeredEmployeeModel = 
                employeeService.register(employeeModel);

        // then
        Assertions.assertAll(
                () -> Assertions.assertNotNull(registeredEmployeeModel,
                        ""registeredEmployeeModel is NULL""),
                () -> Assertions.assertNotNull(registeredEmployeeModel.getId(),
                        ""registeredEmployeeModel ID is NULL""),
                () -> Assertions.assertEquals(EMPLOYEE_MODEL_ID_1, 
                        registeredEmployeeModel.getId(),
                        ""registeredEmployeeModel ID is not equals"")
        );
    }
}</pre>
<!-- /wp:enlighter/codeblock --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>Powyższy kod źródłowy prezentuje test jednostkowy z użyciem mocków</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p id=""rozbicie_problemu""><em>Rozbicie, wyizolowanie istoty problemu do postaci nowego oddzielnego projektu.</em> Temat bardzo obszerny, a sposobów na jego rozwiązanie wiele. Dlatego nie będę przedstawiał kodu źródłowego, ale chcę umieścić ten punkt w moim artykule z prostego powodu. Na co dzień w pracy programiści, programistki zajmują się dużymi i złożonymi systemami, które mają wiele zależności. Skupiając się na jednym konkretnym wycinku tracimy z oczy szerszy kontekst.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Dla przykładu, w projekcie do istniejących @Entity mamy dodać nową encję</strong>, która będzie miała zależności do już istniejących encji. Dodajemy jedną tylko klasę encji i relację, a projekt przestaje nam działać. Kontekst Springa nie inicjalizuje się, Hibernate mówi, że nie ""widzi"" encji, którą dodaliśmy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Co ja bym zrobił w takim przypadku?</strong> Wygenerował nowy projekt na start.spring.io, użył IntelliJ w wersji Community, dodał minimalny zestaw zależności, w tym przypadku spring-boot-starter-data-jpa. Skopiował bym utworząną przeze mnie encję oraz niezbędne encje zależne. Stworzyłbym testy jednostkowe ""dla encji"". Następnie sukcesywnie dodawał bym kolejne elementy zależne, np.: repository, service.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Może, to się wydawać stratą czasu, ale w dłuższej perspektywie, tak nie jest. Mając na uwadze powyższe, zakładam, że w trakcie tworzenia nowego projektu zgłębiam wiedzę na temat Hibernate, JUnit, Spring Context. Rzadko kiedy mamy szansę stworzyć projekt od nowa, dodawać w nim początkowe elementy. W większości przypadków ""lądujemy"" w istniejącym projekcie. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczego IntelliJ w wersji Community? Zacznę od mojego ulubionego zdania w tym temacie, IntelliJ Ultimate rozleniwia i jest nadgorliwy - za dużo rzeczy robi za nas i za dużo podpowiada. Na etapie Junior i przejścia na Mid-Level Java Developer zalecam moim uczniom stosowanie IntelliJ Community. Jeżeli mamy już sporo doświadczenia i wiedzę na temat frameworków i stosowanych technologii, to IntelliJ Ultimate bardzo pomaga. Chociaż samemu cały czas używam IntelliJ w wersji Community.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id=""zadania_na_codewars""><em>Zadania na <a rel=""noreferrer noopener"" href=""https://www.codewars.com/"" data-type=""URL"" data-id=""https://www.codewars.com/"" target=""_blank"">https://www.codewars.com/</a></em> - <strong>odskocznia od ""nadmiaru kodu"" - warstwy, loggery, frameworki - czysty, jednolinijkowy kod źródłowy</strong>. To tutaj możemy zweryfikować nasze umiejętności programistyczne, sprawdzić, co mamy jeszcze do poprawy, a co do nauki od zera. Bez goniących nas terminów w projekcie i masy codziennych rozmów z programistami i osobami zlecającymi napisanie kodu źródłowego.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id=""wyzwania_na_challengerocket""><em>Wyzwania na <a rel=""noreferrer noopener"" href=""https://challengerocket.com/"" data-type=""URL"" data-id=""https://challengerocket.com/"" target=""_blank"">https://challengerocket.com/</a></em> - <strong>ChallengeRocket offers a new formula to hire outstanding candidates with IT, analytical, tech and financial skills</strong>. W tym miejscu możemy znaleźć zatrudnienie realizując wyzwania programistyczne. Weryfikując i ćwicząc nasze umiejętności programistyczne na prawdziwych zadaniach, a nie na CRUD z formularzem HTML.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id=""get_trained_careerkarma""><em><strong>""Get Trained For The Future, Today""</strong></em> - <a rel=""noreferrer noopener"" href=""https://careerkarma.com/"" target=""_blank"">https://careerkarma.com/</a> - Career Karma gives you the information, tools and support to figure out the skills you need today that will get you the job you want in the future. </p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Podsumowując, nie można poruszać się tylko po powierzchni zagadnień związanych z wykorzystywanymi frameowrkami i technologiami. Dobry programista, programistka dobrze znają narzędzia, których używają. Moim zdaniem przejście z Junior na Mid-Level Java Developer nie powinno być ""nominowane z urzędu, ze względu na ilość przepracowanych lat"". Powinno następować w ""naturalny sposób"" wynikający z ilości oraz różnorodności projektów, w których uczestniczyła dana osoba.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/a-close-up-shot-of-letter-dice-on-an-open-notebook-6120220/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/a-close-up-shot-of-letter-dice-on-an-open-notebook-6120220/"" target=""_blank"" rel=""noreferrer noopener"">Nataliya Vaitkevich</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-04-11
2854,"Projekty do szuflady...",,1970-01-01
2856,"Sytuacja Junior Java Developerów sprzed ChatGPT, AI - sposoby nauki, bieżące trendy w zatrudnieniu","<!-- wp:paragraph -->
<p>Chciałbym, aby ten artykuł był drogowskazem dla osób zagubionych w bieżącym  trendzie sztucznej inteligencji (AI). Przez ostatnie lata mojej aktywności jako mentora byłem świadkiem wielu różnych ""trendów"" związanych z pozyskiwaniem wiedzy przez przyszłych Junior Java Developerów, Developerki. W jednej części artykułu opiszę wspomniane trendy. W drugiej części opiszę bieżące ""trendy"" w zatrudnieniu Junior Java Developerów, Developerek.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Rozwijając myśl drogowskazu dla osób zagubionych w trendzie sztucznej inteligencji. Widzę dwie podstawowe kwestie, które spędzają sen z powiek osobom, które chcą zostać Junior Java Developerami, Developerkami - jak się uczyć i czy warto się uczyć programować w języku Java?. Mam nadzieję, że poniższy artykuł pomoże samodzielnie znaleźć odpowiedź na wyżej postawione pytania.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents {""hidden_headings"":[]} /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Mój sposób pozyskiwania wiedzy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zacznę od przedstawienia sposobu pozyskiwania wiedzy, który ja stosowałem, a było, to bardzo dawno temu, jakieś 20 lat temu. Moim głównym źródłem wiedzy były książki i czasopisma związane z szeroko pojętą branżą komputerową, wtedy, chyba jeszcze nie stosowano powszechnie pojęcia branża IT. Książki, z których się uczyłem nie były typu, jak stworzyć aplikację (desktop, web, mobile) w 10 minut.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Były, to książki dogłębnie opisujące język programowania, zaczynałem od języka Pascal i C++. Mając wiedzę książkową o danym języku programowania trzeba było samemu znaleźć pomysł na aplikację i ją zaimplementować. Moją pierwszą aplikacją w Pascalu było wyświetlanie menu w formie graficznej (konsola, CLI) z możliwością wyboru danej opcji i wykonanie jakiejś akcji, potem był kalkulator (desktop, GUI).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Po jakimś czasie zamieniłem książki na dokumentację online, która w odróżnieniu od wersji papierowej mogła być aktualizowana. Posiadałem książki o języku Java, Spring Framework oraz Hibernate. Z biegiem czasu, kiedy stosowałem nowsze wersje wspomnianych technologii nie mogłem już polegać na książkach. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Oczywiście do każdej książki mogłem wrócić i przeczytać o fundamentach danej technologii. Dla przykładu, w języku Java są, to klasy, interfejsy, kolekcje; w Spring Framework są, to Dependency Injection (DI) oraz Inversion of Control (IoC); w Hibernate jest, to Object/Relational Mapping (ORM).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej opisałem ""trendy"" związane z pozyskiwaniem wiedzy przez przyszłych Junior Java Developerów, Developerki - w kolejności chronologicznej - z którymi spotkałem się zajmując się mentoringiem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Sposoby nauki - z mojego doświadczenia</h2>
<!-- /wp:heading -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Samodzielna nauka</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na temat uczenia się z książek napisałem już trochę powyżej - <a href=""#moj-sposob-pozyskiwania-wiedzy"" data-type=""internal"" data-id=""#moj-sposob-pozyskiwania-wiedzy"">mój sposób pozyskiwania wiedzy</a>. Razem z dobrodziejstwem internetu dostaliśmy na wyciągnięcie ręki, nielimitowany dostęp do wiedzy programistycznej. Ograniczając się tylko do języka Java mamy morze informacji. Obecnie głównym źródłem samodzielnej nauki moich uczniów jest YouTube oraz Udemy. Jak widać czytanie artykułów oraz tutoriali zostało wyparte na rzecz video. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poważnym problemem, który zauważyłem u moich uczniów, jest fakt, że otrzymują oni bardzo słabe,  nieprecyzyjne wyniki w wyszukiwarkach internetowych. Często jest tak, że ja, robiąc, to samo zapytanie otrzymuję ""idealne"" wyniki, do których osoby uczące się nie mają dostępu - moje wyszukiwarki mają dobrze wytrenowane algorytmy pod konkretne treści.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Osoby, które uczą się samodzielnie borykają się z problemem zmienności wersji w czasie. Oznacza, to, że tutorial i/lub video kurs jest dla Spring Boot w wersji 2.7.12, a generując nowy projekt za pomocą <a rel=""noreferrer noopener"" href=""https://start.spring.io/"" target=""_blank"">https://start.spring.io/</a> otrzymujemy nowszą wersję 3.1.0. Co oznacza, że wszystkie biblioteki zależne, np.: Spring Security, Spring Data JPA, Hibernate są w nowszych wersjach. Nieraz samemu wpadłem w taką pułapkę.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Samodzielna nauka</p>
<!-- /wp:paragraph --><cite>Zauważyłem brak dodatkowej wiedzy informatycznej z zakresu: obsługi komputera, systemów operacyjnych, sieci komputerowych. Więcej o tym pisałem w moich artykułach: <a href=""https://www.juniorjavadeveloper.pl/2021/03/08/podstawy-obslugi-komputera-powaznie-junior-java-developer/"" data-type=""post"" data-id=""1387"">Podstawy obsługi komputera, poważnie? – Junior Java Developer</a> oraz <a href=""https://www.juniorjavadeveloper.pl/2020/01/25/przydatne-ksiazki-i-strony-do-nauki-jezyka-java/"" data-type=""post"" data-id=""322"">Przydatne książki i strony do nauki języka Java</a>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">StackOverflow</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Czym jest <a rel=""noreferrer noopener"" href=""https://stackoverflow.com/"" data-type=""URL"" data-id=""https://stackoverflow.com/"" target=""_blank"">StackOverflow</a>? Według <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Stack_Overflow"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Stack_Overflow"" target=""_blank"">Wikipedii</a>: ""Stack Overflow – serwis społecznościowy, na którym programiści mogą zadawać pytania dotyczące szeroko pojętego wytwarzania oprogramowania."". W telegraficznym skrócie, to miejsce, w którym można szybko znaleźć odpowiedź na konkretny problem programistyczny. Osobiście naukę programowania za pomocą StackOverflow porównuję do ćwiczenia na siłowni i budowania masy mięśniowej z wykorzystaniem środków dopingujących. Możemy szybko otrzymać zadowalające wyniki, ale równie szybko nasza forma może wrócić do punktu wyjścia. Co najgorsze, osiągnięte rezultaty nie będą ""nasze"" i będziemy chwalić się czymś, czego ""nie rozumiemy"" i nie osiągnęliśmy samodzielnie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nie jestem przeciwnikiem korzystania ze StackOverflow, ale należy robić, to z głową i świadomie. Samemu znajduję wiele rozwiązań różnych problemów na StackOverflow. W tym serwisie możemy znaleźć rozwiązania danego, konkretnego problemu, które są wyizolowane i oderwane od kontekstu. Tego właśnie jestem przeciwnikiem, stosowania rozwiązań ze StackOverflow bez zrozumienia szerszego kontekstu. Moim zdaniem właściwym podejściem jest, jeżeli ten serwis będzie motywacją do poszerzenia zdobytej wiedzy na temat problemu, którego rozwiązanie właśnie tam znaleźliśmy.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>StackOverflow</p>
<!-- /wp:paragraph --><cite>Często słyszę od osób, które przeszły swoje pierwsze interview: ""nie wiedziałem, że teoria jest potrzebna, gdybym tylko miał dostęp do IDE i internetu, to bym rozwiązał, to zadanie"". Moje artykuły: <a href=""https://www.juniorjavadeveloper.pl/2023/01/19/trzy-trojce-programistyczne-jak-ulatwic-poczatki-programowania/"" data-type=""post"" data-id=""1920"">Trzy trójce programistyczne – jak ułatwić początki programowania</a> oraz <a href=""https://www.juniorjavadeveloper.pl/2023/02/01/od-czego-zaczac-tworzenie-aplikacji-przestan-pisac-kod-zrodlowy-praktyczny-przyklad/"" data-type=""post"" data-id=""2446"">Od czego zacząć tworzenie aplikacji? – Przestań pisać kod źródłowy – praktyczny przykład</a>. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Bootcamp</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Kolejnym trendem, który napotkałem w trakcie pracy z moimi uczniami jest Bootcamp. Czm jest Bootcamp? Według <a href=""https://pl.wikipedia.org/wiki/Bootcamp_programistyczny"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Bootcamp_programistyczny"" target=""_blank"" rel=""noreferrer noopener"">Wikipedii</a>: ""Bootcamp programistyczny – kurs, który pozwala w krótkim czasie na poznanie wiedzy potrzebnej do rozpoczęcia pracy jako programista.""<strong>. </strong>Opiszę trzy, moim zdaniem, najważniejsze aspekty, które sprawiły, że Bootcampy stały się, aż tak popularne. <strong>Pierwszy</strong>, to wyznaczenie jasnej i pełnej ścieżki, która prowadzi do stanowiska Junior Java Developer. <strong>Drugi</strong>, to nadzór merytoryczny nad osobami uczącymi się. <strong>Trzeci</strong>, to obietnica zatrudnienia po Bootcamp. Wszystkie aspekty wydają się przemawiać na korzyść tego sposobu nauki. Niestety rzeczywistość okazała się inna. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zacznę od tego, że podaż przewyższyła popyt. Firmy IT rekrutujące osoby na stanowisko Junior Java Developer zaczęły ""zabezpieczać się"" przed zalewem CV od osób po Bootcamp - zwiększając minimalne wymagania dla młodszych programistów, programistek Java. Czas trwania takich szkoleń - od 3 tygodni, sic! do 12 miesięcy, średnio 9 miesięcy - w trybie kilkunastu godzin w tygodniu wymusza ogromne tempo przekazywania wiedzy, które, to wcale nie przekłada się na jakość przyswajanej wiedzy. Moim zdaniem Bootcampy rozwodniły rynek młodszych specjalistów języka Java. Co spowodowało, że pracodawcy zaczęli rozglądać się za innymi możliwościami zastąpienia lub nie zatrudniania w ogóle Junior Java Developerów.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Bootcamp</p>
<!-- /wp:paragraph --><cite>Wiele osób po Bootcamp zgłasza się do mnie po pomoc. Czasem chodzi o projekt końcowy, ale głównie są, to osoby, które od dłuższego czasu nie mogą znaleźć obiecanego zatrudnienia zaraz po ukończeniu Bootcampu. W takim przypadku pracujemy nad portfolio, weryfikujemy i poprawiamy CV oraz przeprowadzam symulację rozmowy kwalifikacyjnej. Niejednokrotnie uczymy się ""od zera"". Moje artykuły: <a href=""https://www.juniorjavadeveloper.pl/2020/08/18/pulapki-szablonu-crud-z-bootcamp-we-wlasnym-portfolio-i-rzeczywistym-projekcie/"" data-type=""post"" data-id=""907"">Pułapki szablonu CRUD we własnym portfolio i rzeczywistym projekcie</a> i <a href=""https://www.juniorjavadeveloper.pl/2020/02/07/wlasne-portfolio-jak-zbudowac-dobre-portfolio-i-gdzie-je-umiescic/"" data-type=""post"" data-id=""317"">Własne portfolio – jak zbudować dobre portfolio i gdzie je umieścić?</a>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Nauka z mentorem</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na temat mentoringu Junior Java Developerów, Developerek patrzę nie tylko przez pryzmat własnej działalności. W internecie powstało i wciąż powstaje wiele nowych ""blogów osobistych"" oferujących usługi mentoringu. Moim zdaniem jest kilka rzeczy składających się na ten trend. <strong>Pierwszy</strong> z nich, to morze możliwości i ścieżek nauki na Junior Java Developera. <strong>Kolejny</strong>, to niedoskonałość grupowego uczenia np.: Bootcamp. <strong>Trzeci</strong> z nich, to indywidualne podejście do osoby uczącej się. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Postaram się wyjaśnić każdy z powyższych elementów, które wpłynęły na popularność mentoringu. <strong>Morze możliwości i ścieżek nauki.</strong> Rozpoczynając naukę wydaje się, że wystarczą podstawy języka Java, ale to za mało. Junior Java Developer może zajmować się programowaniem: back-end, front-end, database (SQL) i/lub połączeniem wszystkich trzech, czyli full-stack developer. Obecnie standardem w branży jest znajomość Spring Framework, Hibernate, Maven, git. Zachęcam do zapoznania się z moim artykułem <a href=""https://www.juniorjavadeveloper.pl/2022/08/17/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera-just-join-it/"" data-type=""post"" data-id=""1822"">Jak powinny wyglądać realne wymagania dla Junior Java Developer’a? – Just Join IT</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Osobom zaczynającym naukę na własną rękę jest bardzo trudno odnaleźć się w tym wszystkim. Dodatkowo osoby uczące się przeczytały w różnych miejscach w internecie Facebook, forum, blogi, że Bootcamp nie jest idealny i tak na prawdę nie gwarantuje przyswojenia wiedzy, ani zatrudnienia. Płynnie przechodząc do <strong>niedoskonałości grupowego uczenia</strong>. Należy pamiętać, że ogrom wiedzy do przyswojenia narzuca sztywne ramy czasowe - ogromne tempo pracy - na przekazanie materiału, tym samym nie daje przestrzeni dla indywidualnego podejścia do ucznia, uczennicy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Powyższe elementy prowadzą do tego, że dużo osób decyduje się na pracę z mentorem, ze mną. Więcej o relacji mentor uczeń pisałem w moim artykule <a href=""https://www.juniorjavadeveloper.pl/2022/12/28/relacja-mentor-uczen-jak-zrozumiec-siebie-wzajemnie-teoria-i-praktyka/"" data-type=""post"" data-id=""1932"">Relacja mentor-uczeń, jak zrozumieć siebie wzajemnie – teoria i praktyka</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Nauka z mentorem</p>
<!-- /wp:paragraph --><cite>Wielu moich uczniów mówi mi ""Jak Ciebie nie ma, to to zagadnienia wydają się skomplikowane."". Jak widać, nawet nauka z mentorem wymaga wielu powtórek i ćwiczeń, żeby dane zagadnienie dobrze przyswoić.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"" id=""chatgpt"">ChatGPT</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ten temat jest dla wszystkich nowy, niezbadany. Samemu jeszcze nie korzystałem - nie jestem ich przeciwnikiem - z ChatGPT, ani z GitHub Copilot (<a rel=""noreferrer noopener"" href=""https://github.com/features/copilot"" data-type=""URL"" data-id=""https://github.com/features/copilot"" target=""_blank"">Your AI pair programmer</a>). Na razie zgłębiam wiedzę o sztucznej inteligencji (AI) od strony matematycznej. Moim skromnym zdaniem <strong>nie mamy doczynienie z AI, to po prostu dobrze przeszkolony pracownik informacji turystycznej</strong>. W tym przypadku, ChatGPT, to dobrze wytrenowany model matematyczny, który został napompowany ogromnym zbiorem danych ""z internetu"". AI wspierane przez machine learning (ML) dostarcza takich narzedzi jak ChatGPT. Podczas mojego zgłębiania wiedzy znalazłem świetny video kurs na YouTube (tak, też się uczę od moich uczniów wyszukiwania wiedzy na YouTube) <a rel=""noreferrer noopener"" href=""https://www.youtube.com/watch?v=vDDjtwQDw2k"" data-type=""URL"" data-id=""https://www.youtube.com/watch?v=vDDjtwQDw2k"" target=""_blank"">No Black Box Machine Learning Course – Learn Without Libraries</a> od <a href=""https://www.youtube.com/@freecodecamp"">freeCodeCamp.org</a>, który kładzie duży nacisk na dane i ich przetwarzanie w celu uzyskania nauczania maszynowego, to wszystko bez użycia gotowych bibliotek do machine learning (ML). Moim zdaniem, to dobre podejście do zrozumienia natury takich narzędzi jak ChatGPT.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>ChatGPT</p>
<!-- /wp:paragraph --><cite>Ostatnio moi uczniowie rozwiązują prace domowe za pomocą ChatGPT. Na poniższe pytania odpowiadają ""Nie wiem."": czy wiesz jak działa wygenerowany kod?, czy wygenerowany kod jest poprawny?, czy wiesz jak zmodyfikować wygenerowany kod?.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><strong>Pisząc powyżej o StackOverflow oraz ChatGPT chcę pokazać niepokojący trend, nie chcę w żaden sposób zniesławić osób, które uczą się w ten sposób.</strong> Połączenie ""nie wiedziałem, że teoria jest potrzebna, gdybym tylko miał dostęp do IDE i internetu, to bym rozwiązał, to zadanie"" oraz odpowiedź ""nie wiem"" na pytania ""czy wiesz jak działa wygenerowany kod?, czy wygenerowany kod jest poprawny?, czy wiesz jak zmodyfikować wygenerowany kod?"", <strong>jest przepisem na ""katastrofę""</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Bieżące trendy w zatrudnieniu - w mojej ocenie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W kwestii bieżących trendów w zatrudnieniu na stanowisko Junior Java Developera, Developerki, należy pamiętać, o tym, że:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><a href=""https://www.juniorjavadeveloper.pl/2023/03/09/uzywamy-starych-frameworkow-java-ee-vs-spring-framework-dawid-kontra-goliat/"" data-type=""post"" data-id=""2800"">Używamy “starych” frameworków – Java EE vs. Spring Framework – Dawid kontra Goliat</a></p>
<!-- /wp:paragraph --><cite>Obecnie obydwa narzędzia trochę się zestarzały. Spring Framework jest już “pełnoletni” – w tym roku skończył 20 lat. Natomiast Java EE kończy 23 lat, sama Java ma już 27 lat.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Do powyższego dodałbym, że sam język Java nie wystarczy - <a href=""https://www.juniorjavadeveloper.pl/2020/01/04/czy-sam-jezyk-java-wystarczy/"" data-type=""post"" data-id=""109"">Czy sam język Java wystarczy?</a>. Po nauczeniu się języka Java rekomenduję uczenie się na projekcie - <a href=""https://www.juniorjavadeveloper.pl/2023/02/01/od-czego-zaczac-tworzenie-aplikacji-przestan-pisac-kod-zrodlowy-praktyczny-przyklad/"" data-type=""post"" data-id=""2446"">Od czego zacząć tworzenie aplikacji? – Przestań pisać kod źródłowy – praktyczny przykład</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""normal""} -->
<p class=""has-text-align-center has-normal-font-size""><strong>Poniższe elementy są zbiorem moich własnych spostrzeżeń oraz informacji zebranych od znajomych osób pracujących w branży IT.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Outsourcing prac programistycznych do Indii</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wiele firm IT przeniosło większą część swoich działów do Indii, działów takich, jak help desk (różne linie wsparcia) oraz działy wytwarzania oprogramowania (programowanie, testy). Co gorsza, firmy liczą się z tym, że kilkanaście procent kodu źródłowego - napisanego w Indiach - będzie do ponownego napisania ""przez te same osoby"" i nadal, to jest dla nich opłacalne. Może, to przyczynić się do zmniejszenia liczby ofert dla przyszłych Junior Java Developerów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Mniejsza liczba projektów IT</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Docierają do mnie informacje od osób pracujących w HR, że liczba projektów IT, czyli rekrutacji, które obsługują zmniejszyła się znacząco. W Europie przyczynił się do tego konflikt zbrojny za naszą wschodnią granicą, dodatkowy wpływ mają masowe zwolnienia w branży IT w Stanach Zjednoczonych. Może, to przyczynić się do zmniejszenia liczby ofert dla przyszłych Junior Java Developerów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Nieprzypadkowe, wygórowane wymagania w ofertach pracy</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Większość przyszłych Junior Java Developerów, Developerek zastanawia się jak, to możliwe, że w ofertach o pracę są tak wygórowane wymagania. Zapraszam do lektury mojego artykułu <a href=""https://www.juniorjavadeveloper.pl/2022/08/17/jak-powinny-wygladac-realne-wymagania-dla-junior-java-developera-just-join-it/"" data-type=""post"" data-id=""1822"">Jak powinny wyglądać realne wymagania dla Junior Java Developer’a? – Just Join IT</a>. Zgadza się w ofertach o prace są wygórowane wymagania jak dla Juniora, ale wymagania te pokrywają się z tym, co jest potrzebne na stanowisku programisty w firmach. Takie, a nie inne wymagania stanowią swoisty firewall dla rekruterów IT, którzy są zalewani CV osób po Bootcamp. Takie osoby, dwa razy się zastanowią zanim wyślą CV do danej firmy, najpierw postanowią zdobyć więcej doświadczenia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Generowanie kodu - ChatGPT, GitHub Copilot</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>O samym ChatGPT już trochę napisałem w sekcji <a href=""#chatgpt"" data-type=""internal"" data-id=""#chatgpt"">ChatGPT</a>. Samo generowanie kodu szeroko opisałem w moim innym artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/03/low-code-i-no-code-czy-generatory-kodu-zrodlowego-zastapia-programistow/"" data-type=""post"" data-id=""2562"">Low-code i No-code – czy generatory kodu źródłowego zastąpią programistów?</a>. Moim zdaniem narzędzia - oparte o sztuczną inteligencję (AI) - takie, jak GitHub Copilot mogą stać się rozwiązaniem, które trwale zmniejszy do minimum potrzebę stanowisk Juniorskich. Z narzędziem takim jak GitHub Copilot, Mid-Level lub Senior Java Developer będzie w stanie w szybkim czasie wygenerować kod, który dotychczas mógł zlecić Junior Java Developerowi. Samemu nie korzystałem z tego narzędzia, ale wielu moich znajomych programistów korzysta na co dzień z tego narzędzia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Podsumowując, nie chcę roztaczać czarnej wizji przyszłości dla Junior Java Developerów, chciałem jedynie opisać obecną rzeczywistość - sposoby nauki oraz bieżące trendy w zatrudnieniu. Moim zdaniem każda z opisanych form nauki jest dobra, pod warunkiem, że dane zagadnienie programistyczne zostanie dogłębnie przestudiowane i zrozumiane przez osobę uczącą się. W kwestii bieżących trendów w zatrudnieniu, to jak każde trendy, te również przeminą. Należy dynamicznie dostosować się do zmieniających się warunków. To nie jest tak, że sztuczna inteligencja (AI) odbiera nam pracę natychmiast, tu i teraz. Jest, to powolny proces, na który sami się godzimy. Bądźmy twórcami własnej przyszłości, działając tu i teraz.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/a-woman-in-a-tank-top-using-a-vr-headset-8721318/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/a-woman-in-a-tank-top-using-a-vr-headset-8721318/"" target=""_blank"" rel=""noreferrer noopener"">cottonbro studio</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-05-22
3062,"Java Design Patterns - project","<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Singleton - DatabaseConnection, RestaurantMenu,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Prototyp - LoyaltyPointPrototype, PaymentFeesPrototype,<br>PROTOTYPE- https://sourcemaking.com/design_patterns/prototype<br>PROTOTYPE - https://sourcemaking.com/design_patterns/prototype/java/1</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Builder - OrderBuilder, MenuBuilder,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fasada - RestaurantClientFacade, CheckoutFacade,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Adapter - MobileClient, LocalClient,<br>ADAPTER - https://dzone.com/articles/adapter-design-pattern-in-java</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Proxy - PaymentCheckProxy, LoyaltyPointCheckProxy,<br>PROXY - https://sourcemaking.com/design_patterns/proxy</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Strategia - PaymentMethodStrategy, OrderMethodStrategy,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Iterator - MenuItemIterator, OrderIterator,</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Visitor - OrderCheckout, LoyaltyPoint,<br>VISITOR - https://www.tutorialspoint.com/design_pattern/visitor_pattern.htm<br>VISITOR - https://sourcemaking.com/design_patterns/visitor</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->",1970-01-01
3064,"Security Firefox, KeePass","<!-- wp:paragraph -->
<p>Opisać, tak jak przedstawiłem, to na spotkaniu ""Praktyczny Content w IT"".</p>
<!-- /wp:paragraph -->",1970-01-01
3076,"IntelliJ IDEA - tips & tricks - wykorzystaj moc narzędzia programistycznego - YouTube","<!-- wp:paragraph -->
<p>Zaczynasz pracę jako programista, programistka, chcesz poznać możliwości IntelliJ IDEA? Potrzebujesz tips &amp; tricks do pracy z tym narzędziem? Może planujesz zostać IntelliJ Ninja?! Jeżeli Twoja odpowiedź, na któreś z pytań jest twierdząca, to ten video tutorial jest dla Ciebie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Główny nacisk położony jest na praktykę, krok po kroku pokazuję jak stworzyć pierwszy projekt w IntelliJ, przedstawiam dostępne skróty. Omawiam skróty nie na zasadzie CTRL+C służy do kopiowania tekstu, ale wprowadzam je i omawiam, wtedy, kiedy są faktycznie potrzebne i użyteczne.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.youtube.com/watch?v=RLq_hhtxgvs"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://www.youtube.com/watch?v=RLq_hhtxgvs
</div><figcaption class=""wp-element-caption"">IntelliJ IDEA - tips &amp; tricks - wykorzystaj moc narzędzia programistycznego - YouTube</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Jest, to mój pierwszy video tutorial, może nie jest doskonały, ale małymi krokami będę doskonalił mój warsztat. Mógłbym czekać w nieskończoność na idealny materiał, ale z takim podejściem ""nigdy"" nie udostępnił bym ""żadnego"" video tutorialu.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a rel=""noreferrer noopener"" href=""https://www.pexels.com/photo/laptop-and-computer-on-the-desk-with-video-editing-11025645/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/laptop-and-computer-on-the-desk-with-video-editing-11025645/"" target=""_blank"">Amar Preciado</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-06-02
3086,"Jak powinien myśleć programista? Abstrakcyjnie, strategicznie, taktycznie - przykłady - tego ChatGPT, AI nie potrafi","<!-- wp:paragraph -->
<p>Często słyszę pytanie od moich uczniów, uczennic - jak powinien myśleć programista, programistka? W tym artykule postaram się odpowiedzieć na to pytanie oraz wyjaśnić, dlaczego wymieniam akurat te trzy metody - myślenie abstrakcyjne, strategia, taktyka. Podejście, które opiszę wynika z mojego doświadczenia jako programisty oraz mentora. Samemu stosuję wspomniane metody oraz uczę ich moich uczniów, uczennice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Najpierw zacznę od wyjaśnienia przedstawionych pojęć. Następnie pojęcia przeniosę na grunt programistyczny. Należy pamiętać, że projektując, a następnie implementując dowolny element - nawet ten najmniejszy - sytemu informatycznego należy podejść do tematu bardzo abstrakcyjnie, mieć ustaloną strategię i realizować taktyczne działania.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wyjaśnienie pojęć pozwoli ustalić wspólny pogląd na opisywane przeze mnie zagadnienia. Na gruncie programistycznym pojęcia przedstawię na przykładzie aplikacji, systemu informatycznego obsługującego prywatną przychodnię lekarską.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Myślenie abstrakcyjne</h3>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Myślenie abstrakcyjne - na czym polega?</p>
<!-- /wp:paragraph --><cite>To proces, który pozwala nam zastanowić się nad rzeczami, których nie ma w obecnej przestrzeni i chwili. [...] Pozwala nam także zastanowić się nad ogólnymi koncepcjami i zasadami [...]. Służy do pamiętania różnych aspektów sytuacji, przewidywania i planowania na przyszłość, myślenia symbolicznego i wyciągania wniosków. [...] Źródło: <a href=""https://pieknoumyslu.com/myslenie-abstrakcyjne-na-czym-polega/"" target=""_blank"" rel=""noreferrer noopener"">https://pieknoumyslu.com/myslenie-abstrakcyjne-na-czym-polega/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Abstrakcja (programowanie)</p>
<!-- /wp:paragraph --><cite>Abstrakcja – pewnego rodzaju uproszczenie rozpatrywanego problemu, polegające na ograniczeniu zakresu cech manipulowanych obiektów wyłącznie do cech kluczowych dla algorytmu, a jednocześnie niezależnych od implementacji. Źródło: <a href=""https://pl.wikipedia.org/wiki/Abstrakcja_(programowanie)"" target=""_blank"" rel=""noreferrer noopener"">https://pl.wikipedia.org/wiki/Abstrakcja_(programowanie)</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Dlaczego potrzebne jest abstrakcyjnie myślenie?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Dlaczego potrzebne jest abstrakcyjnie myślenie? Powyższe opisy, tego pojęcia bardzo dobrze wskazują na najważniejsze elementy tej metody. ""To proces, który pozwala nam zastanowić się nad rzeczami, których nie ma w obecnej przestrzeni i chwili."", programując będziemy tworzyć, pisać kod dla rzeczy, których jeszcze nie ma, nie istnieją. ""Abstrakcja – pewnego rodzaju uproszczenie rozpatrywanego problemu, polegające na ograniczeniu zakresu cech manipulowanych obiektów wyłącznie do cech kluczowych dla algorytmu, a jednocześnie niezależnych od implementacji."", tak właśnie należy tworzyć, pisać kod źródłowy, w dużym uproszczeniu: minimalny, niezbędny zestaw elementów, cech; niezależne od sposobu implementacji. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"" id=""myslenie-abstrakcyjne_przyklad-programistyczny"">Przykład programistyczny</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wyobraźmy sobie, że zostaliśmy poproszeni o dodanie modułu, który nakłada limity rezerwacji wizyt w tygodniu, np.: maksymalnie trzy wizyty - system informatyczny obsługujący prywatną przychodnię lekarską. W systemie zapewne istnieją takie pojęcia jak: Przychodnia, Wizyta, Pacjent i Rezerwacja oraz mechanizmy i procesy ich wspólnej interakcji. Natomiast pojęcie Limitu Wizyt jeszcze nie istnieje, należy je zdefiniować, a następnie zaimplementować, czyli napisać kod źródłowy. Definicję pojęcia Limit Wizyt należy omówić i potwierdzić z osobami zamawiającymi dany moduł. Nowo powstały model dziedziny - Limit Wizyt - musi współgrać z istniejącymi mechanizmami oraz procesami. Nie traktujemy, tego etapu jako wyroczni, wiele elementów może ulec zmianie w późniejszych etapach.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Strategia</h3>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Strategia</p>
<!-- /wp:paragraph --><cite>Przemyślany plan działań w jakiejś dziedzinie. Źródło: <a href=""https://sjp.pwn.pl/sjp/strategia;2576315"" target=""_blank"" rel=""noreferrer noopener"">https://sjp.pwn.pl/sjp/strategia;2576315</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Strategia (teoria gier)</p>
<!-- /wp:paragraph --><cite>Strategia – plan działania gracza opisujący jego zachowanie w każdej możliwej sytuacji. Strategia w pełni określa akcję (ruch), którą gracz podejmie w danej sytuacji, na każdym etapie gry, dla każdej możliwej historii prowadzącej do tej sytuacji. [...] Źródło: <a href=""https://pl.wikipedia.org/wiki/Strategia_(teoria_gier)"" target=""_blank"" rel=""noreferrer noopener"">https://pl.wikipedia.org/wiki/Strategia_(teoria_gier)</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Co daje strategia?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W telegraficznym skrócie, strategia, to plan działania, który pozwala zrealizować wyznaczony cel. Określa ona plan oraz cel, do którego dążymy. Na temat planowania implementacji kodu źródłowego pisałem już w artykule: <a rel=""noreferrer noopener"" href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"" target=""_blank"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>. ""Strategia – plan działania gracza opisujący jego zachowanie w każdej możliwej sytuacji. Strategia w pełni określa akcję (ruch), którą gracz podejmie w danej sytuacji, na każdym etapie gry [...]"". Tutaj słowo gracz śmiało można zastąpić wyrazem aplikacja, system informatyczny. Programista, programistka będą musieli zastanowić się nad tworzonym kodem źródłowym na różnych etapach jego działania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"" id=""strategia_przyklad-programistyczny"">Przykład programistyczny</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W punkcie <a href=""#myslenie-abstrakcyjne_przyklad-programistyczny"" data-type=""internal"" data-id=""#myslenie-abstrakcyjne_przyklad-programistyczny"">Myślenie abstrakcyjne - Przykład programistyczny</a> powstał model dziedziny - Limit Wizyt - należy wyznaczyć sobie cel strategiczny. Może nim być implementacja, czyli kod źródłowy, który uniemożliwi pacjentowi rezerwację więcej wizyt niż ilość wskazana w limicie. Równie dobrze, może, to być funkcjonalność dostępna z panelu administracyjnego, dostępnego dla pracowników przychodni, umożliwiająca ustalenie takiego limitu. Na tym etapie planuję, wyznaczam kroki do osiągnięcia celu. Jednym z kroków może być konwencja nazewnicza dla tworzonych klas i/lub pakietów. Kolejny, to ustalenie czy będzie, to pojedyncza klasa, czy może cały nowy moduł. Bardzo ważnym krokiem jest sprawdzenie czy i jak będę mógł przetestować nową klasę, moduł w kontekście całego systemu - testy integracyjne.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Taktyka</h3>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Taktyka</p>
<!-- /wp:paragraph --><cite>Sposób postępowania mający doprowadzić do osiągnięcia celu. Źródło: <a href=""https://sjp.pwn.pl/szukaj/taktyka.html"" target=""_blank"" rel=""noreferrer noopener"">https://sjp.pwn.pl/szukaj/taktyka.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Taktyka</p>
<!-- /wp:paragraph --><cite>(1.2) sposób działania według wcześniej przemyślanego planu. Źródło: <a href=""https://pl.wiktionary.org/wiki/taktyka"" target=""_blank"" rel=""noreferrer noopener"">https://pl.wiktionary.org/wiki/taktyka</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Czym jest taktyka?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Taktyka jest częścią strategi, można ją opisać jako kolejne kroki - elementy planu - które trzeba wykonać, aby zrealizować założony cel strategiczny. Tutaj po prostu realizuję kolejne kroki wyznaczone dla wybranej strategi.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Przykład programistyczny</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Nawiązując do punktu <a href=""#strategia_przyklad-programistyczny"" data-type=""internal"" data-id=""#strategia_przyklad-programistyczny"">Strategia - Przykład programistyczny</a>, pierwszym krokiem jest ustalenie konwencji nazewniczej. W tym przypadku, ponownie odwołując się do punktu <a href=""#myslenie-abstrakcyjne_przyklad-programistyczny"" data-type=""internal"" data-id=""#myslenie-abstrakcyjne_przyklad-programistyczny"">Myślenie abstrakcyjne - Przykład programistyczny</a>, gdzie powstał model dziedziny - Limit Wizyt. Zastanawiam się jakie będą angielskie odpowiedniki - Limit Wizyt - większość systemów, które implementowałem były w języku angielskim, wyjątkiem był system rządowy, pisany w języku polskim. Wyraz Limit, może być zapisany jako Maximum lub Limit, wyraz Wizyta, może być zapisany jako Appointment lub Visit. Moim zdaniem, ustalenie właściwych nazw ma ogromne znaczenie. Kolejny krok taktyczny, to implementacja nowego modułu czy pojedynczej klasy. Jeżeli tworzony kod ma być używany przez inne moduły w systemie, to warto stworzyć oddzielny moduł, łatwiej go będzie współdzielić w formie zależności w postaci bibliotek - pliki JAR. Co do kwestii testów integracyjnych, to idealnie byłoby mieć możliwość wykonania takich testów na rzeczywistych danych testowych, jeżeli jest, to niemożliwe, to należy posłużyć się mockami - <a rel=""noreferrer noopener"" href=""https://pl.wikipedia.org/wiki/Atrapa_obiektu"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Atrapa_obiektu"" target=""_blank"">Mock, atrapa obiektu</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-dots""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-dots""/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Podsumowując, projektując, a następnie implementując dowolny element - nawet ten najmniejszy - sytemu informatycznego należy podejść do tematu bardzo abstrakcyjnie. Po wykonaniu abstrakcyjnego myślenia - zastanowieniu się nad rzeczami, które nie istnieją - przechodzimy do strategi - planowania i wyznaczania celu, który chcemy osiągnąć - na końcu jest taktyka - przystępujemy do działania, czyli realizacji planu. Mając na uwadze powyższe metody myślenia o wiele łatwiej jest mi podejść do tworzenia i implementacji dowolnej aplikacji, systemu informatycznego. Zachęcam do stosowania tych metod.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/elderly-man-thinking-while-looking-at-a-chessboard-8438918/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/elderly-man-thinking-while-looking-at-a-chessboard-8438918/"" target=""_blank"" rel=""noreferrer noopener"">Pavel Danilyuk</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-06-08
3138,"Jak zacząć przygodę z nauką języka Java?",,1970-01-01
3155,"Nieszablonowy projekt Java do portfolio - zewnętrzne API + Java Sound - Speak Random Chuck Norris Jokes - YouTube","<!-- wp:paragraph -->
<p>Szukasz pomysłu na nieszablonowy projekt do portfolio? Wszyscy mają już dosyć szablonów CRUD w Twoim portfolio? Chcesz zobaczyć namacalne efekty Twojej pracy? Jeżeli Twoja odpowiedź, na któreś z pytań jest twierdząca, to ten video tutorial jest dla Ciebie. Zobacz jak Twoja aplikacja Java może wypowiadać losowe dowcipy o Chucku Norrisie!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ten video tutorial pokazuje jak wykorzystać zewnętrzne API używając protokołu HTTP oraz biblioteki OkHttp do jego obsługi. Pierwsze API zwraca tylko tekst, drugie API zamienia tekst na mowę w dowolnym języku. Tak zamieniony tekst jest następnie odtwarzany przez Java Sound. Wszystko z wykorzystaniem ""czystej Javy"", bez dodatków frameworków. Kod pisany z wykorzystaniem IntelliJ IDEA.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W trakcie pisania kodu objaśniam i pokazuje dobre praktyki programowania obiektowego, dla tworzonych klas piszę testy jednostkowe stosując TDD - JUnit. Pokazuję strony, na których można znaleźć prezentowane pojęcia, biblioteki oraz prezentuję jak z nich skorzystać - biblioteki + Maven. W trakcie pisania omawiam skróty klawiszowe do IntelliJ IDEA. Kodowanie na żywo, krok po kroku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>#externalapi #javasound #oop #chucknorris #jokes #maven #json #okhttp #gson #pojo #tdd #junit #di #dependencyinjection #java #juniorjavadeveloper #youtube #intellij #livecoding #project #portfolioproject</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtu.be/ZT3V8YLqvFA"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/ZT3V8YLqvFA
</div><figcaption class=""wp-element-caption"">Nieszablonowy projekt Java do portfolio - zewnętrzne API + Java Sound - Speak Random Chuck Norris Jokes - YouTube</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center""><strong>Video tutorial celowo nagrany wolno i spokojnie, aby każdy mógł nadążyć za moim przekazem. Dla tych, którzy potrzebują więcej dynamiki, to mogą przyspieszyć video x1.5 bez straty dla materiału :)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poniżej linki wykorzystane w projekcie:</p>
<!-- /wp:paragraph -->

<!-- wp:table {""hasFixedLayout"":true,""align"":""wide""} -->
<figure class=""wp-block-table alignwide""><table class=""has-fixed-layout""><tbody><tr><td class=""has-text-align-center"" data-align=""center""><a href=""https://api.chucknorris.io"" data-type=""URL"" data-id=""https://api.chucknorris.io"" target=""_blank"" rel=""noreferrer noopener"">https://api.chucknorris.io</a></td><td><a href=""https://en.wikipedia.org/wiki/API"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/API"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/API</a></td><td><a href=""https://square.github.io/okhttp/"" data-type=""URL"" data-id=""https://square.github.io/okhttp/"" target=""_blank"" rel=""noreferrer noopener"">https://square.github.io/okhttp/</a></td></tr><tr><td class=""has-text-align-center"" data-align=""center""><a href=""https://www.voicerss.org/api"" data-type=""URL"" data-id=""https://www.voicerss.org/api"" target=""_blank"" rel=""noreferrer noopener"">https://www.voicerss.org/api</a></td><td><a href=""https://en.wikipedia.org/wiki/JSON"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/JSON"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/JSON</a></td><td><a href=""https://www.jsonschema2pojo.org/"" data-type=""URL"" data-id=""https://www.jsonschema2pojo.org/"" target=""_blank"" rel=""noreferrer noopener"">https://www.jsonschema2pojo.org/</a></td></tr><tr><td class=""has-text-align-center"" data-align=""center""><a href=""https://rapidapi.com/hub"" data-type=""URL"" data-id=""https://rapidapi.com/hub"" target=""_blank"" rel=""noreferrer noopener"">https://rapidapi.com/hub</a></td><td><a href=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Plain_old_Java_object"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/Plain_old_Java_object</a></td><td><a href=""https://docs.oracle.com/javase/tutorial/sound/playing.html"" data-type=""URL"" data-id=""https://docs.oracle.com/javase/tutorial/sound/playing.html"" target=""_blank"" rel=""noreferrer noopener"">https://docs.oracle.com/javase/tutorial/sound/playing.html</a></td></tr><tr><td class=""has-text-align-center"" data-align=""center""><a href=""https://api-ninjas.com/api"" data-type=""URL"" data-id=""https://api-ninjas.com/api"" target=""_blank"" rel=""noreferrer noopener"">https://api-ninjas.com/api</a></td><td><a href=""https://github.com/google/gson/blob/main/UserGuide.md"" data-type=""URL"" data-id=""https://github.com/google/gson/blob/main/UserGuide.md"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/google/gson/blob/main/UserGuide.md</a></td><td><a href=""https://www.baeldung.com/java-play-sound"" data-type=""URL"" data-id=""https://www.baeldung.com/java-play-sound"" target=""_blank"" rel=""noreferrer noopener"">https://www.baeldung.com/java-play-sound</a></td></tr></tbody></table><figcaption class=""wp-element-caption"">Linki wykorzystane w projekcie.</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Dodatkowo korzystałem z moich własnych artykułów: <a href=""https://www.juniorjavadeveloper.pl/2020/11/17/stop-zanim-zaczniesz-pisac-kod-zastanow-sie-co-chcesz-kodowac-analiza-projekt-i-implementacja/"" data-type=""post"" data-id=""1238"">Stop! Zanim zaczniesz pisać kod zastanów się, co chcesz kodować? Analiza, projekt i implementacja</a>, <a href=""https://www.juniorjavadeveloper.pl/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"" data-type=""post"" data-id=""746"">Aplikacje Java mają warstwy jak tort urodzinowy – aplikacja trójwarstwowa</a> oraz <a href=""https://www.juniorjavadeveloper.pl/2023/01/19/trzy-trojce-programistyczne-jak-ulatwic-poczatki-programowania/"" data-type=""post"" data-id=""1920"">Trzy trójce programistyczne – jak ułatwić początki programowania</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tak jak wspominałem w tym video tutorialu, powstanie kontynuacja, tego projektu ""Speak Random Chuck Norris Jokes"", która będzie zawierała - git + Spring Framework + Hibernate + opis Java Sound.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dajcie znać w komentarzach czy chcielibyście kolejne video tutoriale zrobione w podobnej konwencji - praktyczny przykład + live coding + IntelliJ.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/brown-monkey-321552/"" data-type=""URL"" data-id=""https://www.pexels.com/photo/brown-monkey-321552/"" target=""_blank"" rel=""noreferrer noopener"">Oleksandr Pidvalnyi</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-06-26
3236,"Jak ćwiczyć umiejętności programistyczne? Platforma CodeWars - krok po kroku, przykład Java + IntelliJ - YouTube","<!-- wp:paragraph -->
<p>Zastanawiasz się jak trenować pisanie kodu Java? Nie wiesz jak skorzystać z platformy CodeWars? Potrzebujesz podnieść swoje umiejętności z Junior Java Developer na Mid-Level Java Developer? Jeżeli Twoja odpowiedź, na któreś z pytań jest twierdząca, to ten video tutorial jest dla Ciebie. Rozwiązuj <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Kata"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Kata"" target=""_blank"">Kata</a>, otrzymuj <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Ky%C5%AB"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Ky%C5%AB"" target=""_blank"">Kyu</a> i <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Dan_(rank)"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Dan_(rank)"" target=""_blank"">Dan</a> - tak, jak w Japońskich sztukach walki - <a rel=""noreferrer noopener"" href=""https://docs.codewars.com/gamification"" target=""_blank"">https://docs.codewars.com/gamification</a>!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>W tym video tutorialu prezentuję jak korzystać z platformy <a href=""http://www.CodeWars.com"" data-type=""URL"" data-id=""www.CodeWars.com"" target=""_blank"" rel=""noreferrer noopener"">www.CodeWars.com</a>, aby doskonalić swój warsztat programistyczny. Wiele osób, które zaczyna swoją przygodę z językiem Java nie wie, jak się zabrać za platformę CodeWars. Sama platforma nie jest skomplikowana, ale przenosi pisanie kodu z IntellJ IDEA do przeglądarki bez pełnego wsparcia oferowanego przez <a href=""https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne"" data-type=""URL"" data-id=""https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne"" target=""_blank"" rel=""noreferrer noopener"">IDE</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center""} -->
<p class=""has-text-align-center""><strong>Video tutorial celowo nagrany wolno i spokojnie, aby każdy mógł nadążyć za moim przekazem. Dla tych, którzy potrzebują więcej dynamiki, to mogą przyspieszyć video x1.5 bez straty dla materiału 🙂</strong></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtu.be/6GHF1qzOKKI"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/6GHF1qzOKKI
</div><figcaption class=""wp-element-caption"">Jak ćwiczyć umiejętności programistyczne? Platforma CodeWars - krok po kroku, przykład Java + IntelliJ - YouTube</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Pokazuję i objaśniam jak wybrać odpowiednie dla siebie zadanie na CodeWars, stworzyć projekt w IntelliJ + Maven na potrzeby obecnego i przyszłych zadań. Przykładowe zadanie z CodeWars przenoszę do IntelliJ celem jego implementacji, a następnie działające rozwiązanie przenoszę do CodeWars.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Wiedzę, którą tu przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie mojego autorstwa, tło pochodzi z <a rel=""noreferrer noopener"" href=""https://www.codewars.com"" target=""_blank"">https://www.codewars.com</a>.</p>
<!-- /wp:paragraph -->",2023-07-05
3261,"Jak użyć bibliotekę Lombok? No more boilerplate code - krok po kroku, przykład IntelliJ + Maven - YouTube","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zastanawiasz się jak dodać bibliotekę Lombok do projektu? Nie wiesz jakie korzyści płyną z wykorzystania Lombok? Masz już dosyć <a rel=""noreferrer noopener"" href=""https://en.wikipedia.org/wiki/Boilerplate_code"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/Boilerplate_code"" target=""_blank"">boilerplate code</a>? Jeżeli Twoja odpowiedź, na któreś z pytań jest twierdząca, to ten video tutorial jest dla Ciebie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym video tutorialu prezentuję jak za pomocą Maven dodać bibliotekę Lombok do projektu w IntelliJ. Pokazuję jak wygląda kod klasy Java bez Lombok oraz z użyciem biblioteki Lombok. Wykorzystuję adnotacje dostępne w Lombok, np.: @Data, @Getter, @NoArgsConstructor. Oficjalna strona biblioteki - <a rel=""noreferrer noopener"" href=""https://projectlombok.org"" target=""_blank"">https://projectlombok.org</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Video tutorial celowo nagrany wolno i spokojnie, aby każdy mógł nadążyć za moim przekazem. Dla tych, którzy potrzebują więcej dynamiki, to mogą przyspieszyć video x1.5 bez straty dla materiału 🙂</strong></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtu.be/Qljidy3mjE8"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/Qljidy3mjE8
</div><figcaption class=""wp-element-caption"">Jak użyć bibliotekę Lombok? No more boilerplate code - krok po kroku, przykład IntelliJ + Maven - YouTube</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Wiedzę, którą tu przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, tło pochodzi z <a rel=""noreferrer noopener"" href=""https://projectlombok.org/"" data-type=""URL"" data-id=""https://projectlombok.org/"" target=""_blank"">https://projectlombok.org/</a>.</p>
<!-- /wp:paragraph -->",2023-07-12
3283,"Ile procentowo czasu programista poświęca na pisanie kodu? - omówienie ankiety i jej wyników","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dzisiaj omówię i podzielę się wynikiem ankiety, którą umieściłem na LinkedIn na moim profilu - <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/posts/jacekjablonka_cz%C4%99sto-powtarzam-osobom-z-kt%C3%B3rymi-pracuj%C4%99-activity-7083010968313565184-yaMw?utm_source=share&amp;utm_medium=member_desktop"" data-type=""URL"" data-id=""https://www.linkedin.com/posts/jacekjablonka_cz%C4%99sto-powtarzam-osobom-z-kt%C3%B3rymi-pracuj%C4%99-activity-7083010968313565184-yaMw?utm_source=share&amp;utm_medium=member_desktop"" target=""_blank"">Ile procentowo czasu programista poświęca na pisanie kodu, a ile spędza na dogadywaniu się z osobami zlecającymi wykonanie oprogramowania?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Sam jestem zaskoczony wynikiem ankiety! Na wstępie chciałem podziękować wszystkim osobom, które wzięły udział w ankiecie oraz dodały swój komentarz. W sumie zagłosowało 145 osób, komentarze pozostawiło 8 osób + moje odpowiedzi na te komentarze. Podział czasu między kodowaniem, a dogadywaniem się wygląda następująco: ""tylko"" ~20% osób dzieli czas 50/50, ~40% osób dzieli czas 70/30, ale również ~40% osób dzieli czas 30/70.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3289,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/07/2023-07-16_Ile-procentowo-czasu-programista-poswieca-na-pisanie-kodu_omowienie-ankiety-wyniki.png"" alt=""Ile procentowo czasu programista poświęca na pisanie kodu, a ile spędza na dogadywaniu się z osobami zlecającymi wykonanie oprogramowania? - Omówienie wyników ankiety - Mentor Junior Java Developer"" class=""wp-image-3289""/><figcaption class=""wp-element-caption"">Ile procentowo czasu programista poswieca na pisanie kodu, a ile spedza na dogadywaniu sie z osobami zlecajacymi wykonanie oprogramowania? - Omowienie wynikow ankiety - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Moje początkowe zaskoczenie wynikiem ankiety bardzo dobrze opisuje komentarz <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/jakub-a-wasek/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/jakub-a-wasek/"" target=""_blank"">Jakuba</a>: ""Jeśli programista poświęca 70% czasu na dogadywanie się, to znaczy, że projekt jest niezorganizowany albo programista jest juniorem."". Zgadza się, jeżeli programista jest juniorem, to ważne, aby więcej czasu poświęcał na dogadywanie się, aby lepiej zrozumieć, to co musi przedstawić w postaci kodu. Więcej pisałem o tym w <a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2020/05/tylko-kod_wymagania-biznesowe_naglowek-ss.jpg"" data-type=""attachment"" data-id=""802"">Ja chcę pisać tylko kod, nie interesują mnie wymagania biznesowe!</a>, celnie opisał, to również <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/mariusz-midor-a28751217/"" target=""_blank"">Mariusz</a> w komentarzu: ""Zgadzam się co do pierwszej części. Ale nie co do radosnego, pełnego optymizmu i napędzanego beztroską twórczością juniora! Taki nie czeka na detale tylko chce natychmiast kodzić!"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kolejne komentarze pokazują, że kodowanie, to tylko jedna strona medalu. Zacznę od wypowiedzi <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/adam-falek/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/adam-falek/"" target=""_blank"">Adama</a>: ""[...] To jednocześnie oznacza, że dbanie o jakość tworzonego kodu zaczyna się już na etapie ustaleń i komunikacji wewnątrz zespołu i warto do tego podejść poważnie, bo to potem rzutuje na implementacje."". Dodam do tego odpowiedź <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/czechpiotr/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/czechpiotr/"" target=""_blank"">Piotra</a>: ""Na ogół im wyżej tym więcej dogadywania się i budowania relacji. Bardziej niż dogadywanie się wolałbym powiedzieć, że ważniejszy jest impakt na danym poziomie i czy potrafisz go zrobić. Gdzie junior myśli o funkcji w danym produkcie, Senior o produkcie, Staff o kilku produktach, Principal o grupie różnych produktów a Distinguished o branży w której jest."". </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z powyższego wyłania się następujący obraz. Jak w każdym projekcie, który wiąże się z pracą zespołową bardzo ważne są relacje z członkami zespołu oraz komunikacja. Każdy członek zespołu ma wpływ na dany element projektu i każdy powinien brać odpowiedzialność za swoją cegiełkę, którą dodał do projektu. Często powtarzam moim uczniom, uczennicom: nie przywiązujemy się do kodu źródłowego, ale bierzemy za niego odpowiedzialność, bo jedyną stałą w kodzie jest zmiana.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Patrząc na wcześniejsze akapity wiemy już mniej więcej jaka jest rola programisty, programistki w projekcie informatycznym. Jak może być w samym projekcie pokazują dwa komentarze, które skrajnie różnią się od siebie. <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/jarek-ksi%C4%85%C5%BCczyk-b82947123/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/jarek-ksi%C4%85%C5%BCczyk-b82947123/"" target=""_blank"">Jarek</a> napisał: ""Weźcie to zróbcie jakoś na szybko bo w sumie to jakoś tak wyszło że klient to wie że to dostanie w piątek. A testy to sobie napiszecie po godzinach albo może w poniedziałek między retro a planingiem"". Natomiast <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/slawomirgrabowski/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/slawomirgrabowski/"" target=""_blank"">Sławomir</a> napisał: ""[...] U nas w projektach nie mamy żadnego daily, raz na tydzień jest spotkanie, a wszystko jest w JIRA i każdy wie co ma robić. Jak jest problem to programiści zgadują się na chat lub szybko zdzwaniają się. W takim zdrowym układzie jest to gdzieś 90% pisania kodu i 10% spotkań, rozmów itd."". Samemu brałem udział w podobnie zorganizowanych i niezorganizowanych projektach, warto mieć doświadczenie w różnych projektach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na koniec komentarz <a rel=""noreferrer noopener"" href=""https://www.linkedin.com/in/jan-m-6467149a/"" data-type=""URL"" data-id=""https://www.linkedin.com/in/jan-m-6467149a/"" target=""_blank"">Jana</a>, który pracuje w startupie: ""99% / 1% Pracuję jak wynalazca: w jednym fajnym startupie tworzę framework (służy do wyświetlania 3D, obsługi nietypowego formatu pliku itp), który jest używany w aplikacji w App Store. I teraz tak: 99% czasu pracuję sam ze swoim umysłem i ewentualnie kodem na ekranie. 1% to jest sprawdzenie bazy z ziomkami w startupie. Wyznaczamy z grubsza szlak na następne dwa miesiące w pół godziny po czym ja się zamykam i wracam ze zrobionymi fajnymi rzeczami. Każda droga jest właściwa. Ta jest moja."". Pokazuje, to że można wybrać inną drogę, taką, która będzie dla nas odpowiednia.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Podsumowując wynik ankiety był dla mnie zaskoczeniem, ale również dostarczył wielu cennych informacji w komentarzach. Mam nadzieję, że powyższe omówienie ankiety pozwoli programistom, programistkom lepiej zrozumieć ich rolę w projekcie informatycznym jako całości.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" target=""_blank"" rel=""noreferrer noopener"">Lukas</a> z <a rel=""noreferrer noopener"" href=""https://www.pexels.com/pl-pl/"" target=""_blank"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-07-17
3362,"VIDEO TUTORIAL - Java CRUD...",,1970-01-01
3364,"Video Tutorial - git, umieszczenie projektu na GitHub, kontynuacja: Nieszablonowy projekt Java do portfolio - YouTube","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworząc video tutorial <a rel=""noreferrer noopener"" href=""https://youtu.be/ZT3V8YLqvFA"" data-type=""URL"" data-id=""https://youtu.be/ZT3V8YLqvFA"" target=""_blank"">Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes</a>, dostępny na YouTube, wspominałem, że powstaną kolejne części, które będą kontynuacją. Tak, też się stało <strong>kolejna, pierwsza część jest już dostępna.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size"">Dlaczego akurat mój video tutorial, co jest w nim takiego unikalnego? Odpowiedź poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial pokazuje jak umieścić istniejący projekt na GitHub jako element portfolio.<strong><em> Czas trwania 25 minut.</em></strong></p>
<!-- /wp:paragraph --><cite>Nie jest to kolejny poradnik z serii „nauka poleceń git – clone, commit, push”.<br><br><strong>Pokazuje on pracę z git z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</strong></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/19-fh3GBwS4"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/19-fh3GBwS4
</div><figcaption class=""wp-element-caption"">git, umieszczenie projektu na GitHub, kontynuacja „Nieszablonowy projekt Java do portfolio”; TRAILER</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kupując ten video tutorial otrzymujesz dożywotni, nielimitowany dostęp do materiału poprzez konto na moim blogu. Video tutorial dostępny z dowolnego urządzenia przez przeglądarkę internetową.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:woocommerce/handpicked-products {""align"":""wide"",""columns"":1,""products"":[3190]} /--></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się on z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Tworzenie repozytorium git na GitHub.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Klonowanie projektu w IntelliJ IDEA.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przenoszenie projektu i umieszczanie na git oraz GitHub.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praca z branch’ami.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">PullRequest i code review.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Polecenia commit i push.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Korzystanie z git z poziomu IntelliJ.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Porady typu, co robić, a czego unikać.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Video tutorial może stanowić oddzielną całość, może być częścią video kursu „Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes”, części video kursu:</em></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">git, umieszczenie projektu na GitHub.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Spring Framework do istniejącego projektu.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Hibernate do projektu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Wiedzę, którą przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-07-24
3382,"Video Tutorial - Spring Framework, dodanie do istniejącego projektu, kontynuacja: Nieszablonowy projekt Java do portfolio - YouTube","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworząc video tutorial <a rel=""noreferrer noopener"" href=""https://youtu.be/ZT3V8YLqvFA"" data-type=""URL"" data-id=""https://youtu.be/ZT3V8YLqvFA"" target=""_blank"">Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes</a>, dostępny na YouTube, wspominałem, że powstaną kolejne części, które będą kontynuacją. Tak, też się stało <strong>kolejna, druga część jest już dostępna.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size"">Dlaczego akurat mój video tutorial, co jest w nim takiego unikalnego? Odpowiedź poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial pokazuje jak dodać Spring Framework do istniejącego projektu. <strong><em>Czas trwania 35 minut.</em></strong></p>
<!-- /wp:paragraph --><cite>Nie jest to kolejny poradnik z serii „poznajmy adnotacje w Spring i zróbmy aplikację CRUD”.<br><br><strong><strong>Pokazuje on pracę ze Spring Framework z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</strong></strong></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/4HNTJk0nvwI"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/4HNTJk0nvwI
</div><figcaption class=""wp-element-caption"">Spring do istniejącego projektu, kontynuacja „Nieszablonowy projekt Java do portfolio”; TRAILER</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kupując ten video tutorial otrzymujesz dożywotni, nielimitowany dostęp do materiału poprzez konto na moim blogu. Video tutorial dostępny z dowolnego urządzenia przez przeglądarkę internetową.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:woocommerce/handpicked-products {""align"":""wide"",""columns"":1,""products"":[3200]} /--></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się on z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie zależności dla Spring do Maven.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wykorzystanie <a href=""http://start.spring.io"" target=""_blank"" rel=""noreferrer noopener"">start.spring.io</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Różnica między Spring Boot, a Spring Framework.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praktyczne zastosowanie adnotacji @Service, @Controller, @Component.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wstrykiwanie zależności przez konstruktor oraz @Autowired.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Testy JUnit dla komponentów Spring w użyciem @SpringBootTest.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Moduł Spring MVC – prosta obsługa GET i POST dla HTTP.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Video tutorial może stanowić oddzielną całość, może być częścią video kursu „Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes”, części video kursu:</em></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">git, umieszczenie projektu na GitHub.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Spring Framework do istniejącego projektu.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Hibernate do projektu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Wiedzę, którą przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-07-26
3390,"Video Tutorial - Hibernate, dodanie do istniejącego projektu, kontynuacja: Nieszablonowy projekt Java do portfolio - YouTube","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworząc video tutorial <a rel=""noreferrer noopener"" href=""https://youtu.be/ZT3V8YLqvFA"" data-type=""URL"" data-id=""https://youtu.be/ZT3V8YLqvFA"" target=""_blank"">Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes</a>, dostępny na YouTube, wspominałem, że powstaną kolejne części, które będą kontynuacją. Tak, też się stało <strong>kolejna, trzecia i ostatnia część jest już dostępna.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size"">Dlaczego akurat mój video tutorial, co jest w nim takiego unikalnego? Odpowiedź poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial pokazuje jak dodać Hibernate ORM do istniejącego projektu. <strong><em>Czas trwania 35 minut.</em></strong></p>
<!-- /wp:paragraph --><cite>Nie jest to kolejny poradnik z serii „zróbmy encję i zapiszmy ją do bazy”.<br><br><strong>Pokazuje on pracę z Hibernate ORM z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</strong></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/4HNTJk0nvwI"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/4HNTJk0nvwI
</div><figcaption class=""wp-element-caption"">Spring do istniejącego projektu, kontynuacja „Nieszablonowy projekt Java do portfolio”; TRAILER</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kupując ten video tutorial otrzymujesz dożywotni, nielimitowany dostęp do materiału poprzez konto na moim blogu. Video tutorial dostępny z dowolnego urządzenia przez przeglądarkę internetową.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class=""wp-block-columns""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:woocommerce/handpicked-products {""align"":""wide"",""columns"":1,""products"":[3203]} /--></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się on z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie zależności dla Hibernate do Maven.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wykorzystanie <a href=""http://hibernate.org"" target=""_blank"" rel=""noreferrer noopener"">hibernate.org</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Różnica między Hibernate „native”, JPA oraz Spring Data JPA.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Elementy niezbędne dla @Entity.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Testy JUnit dla @Entity oraz JpaRepository.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Konfiguracja bazy danych w application.properties.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praca z H2Database, podgląd danych – H2 Console.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Video tutorial może stanowić oddzielną całość, może być częścią video kursu „Nieszablonowy projekt Java do portfolio, zewnętrzne API, Java Sound, Speak Random Chuck Norris Jokes”, części video kursu:</em></p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">git, umieszczenie projektu na GitHub.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Spring Framework do istniejącego projektu.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie Hibernate do projektu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Wiedzę, którą przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-07-28
3398,"Moje video tutoriale są na Odysee.com, oparte na LBRY. Dlaczego, to jest istotne? ""LBRY does to publishing, what Bitcoin did to money.""","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W jednym z moich artykułów <a href=""https://www.juniorjavadeveloper.pl/2023/02/21/dlaczego-moje-artykuly-na-linkedin-kieruja-na-moj-prywatny-blog/"" data-type=""post"" data-id=""2496"">Dlaczego moje artykuły na LinkedIn kierują na mój prywatny blog?</a> pisałem o zachowaniu niezależności publikowanych artykułów od dużego „wydawcy treści”. Publikując moje video tutoriale na <a rel=""noreferrer noopener"" href=""https://www.youtube.com/@mentorjuniorjavadeveloper"" data-type=""URL"" data-id=""https://www.youtube.com/@mentorjuniorjavadeveloper"" target=""_blank"">moim kanale na YouTube</a> zdaję sobie sprawę, że mogą one zniknąć w dowolnym momencie z powodu naruszenia bliżej niesprecyzowanych - community guidelines - wytycznych dla społeczności.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""right"",""id"":3405,""sizeSlug"":""full"",""linkDestination"":""custom""} -->
<figure class=""wp-block-image alignright size-full""><a href=""https://odysee.com/@mentorjuniorjavadeveloper:e"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/07/odysee-logo.png"" alt=""Odysee.com logo - Mentor Junior Java Developer"" class=""wp-image-3405""/></a><figcaption class=""wp-element-caption"">Moj kanal na Odysee: <a rel=""noreferrer noopener"" href=""https://odysee.com/@mentorjuniorjavadeveloper:e"" target=""_blank"">https://odysee.com/@mentorjuniorjavadeveloper:e</a></figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {""align"":""right"",""id"":3406,""width"":400,""height"":120,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image alignright size-full is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/07/youtube-logo.svg"" alt=""YouTube.com logo - Mentor Junior Java Developer"" class=""wp-image-3406"" width=""400"" height=""120""/><figcaption class=""wp-element-caption"">Moj kanal na YouTube: <a rel=""noreferrer noopener"" href=""https://www.youtube.com/@mentorjuniorjavadeveloper"" data-type=""URL"" data-id=""https://www.youtube.com/@mentorjuniorjavadeveloper"" target=""_blank"">https://www.youtube.com/@mentorjuniorjavadeveloper</a></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Chcąc zachować niezależność publikowanych video od dużego ""wydawcy treści"" umieszczam moje video tutoriale na <a href=""https://odysee.com/@mentorjuniorjavadeveloper:e"" data-type=""URL"" data-id=""https://odysee.com/@mentorjuniorjavadeveloper:e"" target=""_blank"" rel=""noreferrer noopener"">moim kanale na Odysee.com</a>. <strong>Odysee to to platforma medialna oparta na blockchain.</strong> Cała zawartość Odysee jest hostowana w sieci LBRY, z której następnie Odysee pobiera pliki. Natomiast <strong>LBRY to oparta na blockchain sieć wymiany plików i płatności</strong>, która zasila zdecentralizowane platformy, głównie sieci społecznościowe i platformy wideo.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><strong>Poniżej wyjaśnienie pojęć LBRY oraz Odysee.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>LBRY does to publishing, what Bitcoin did to money.</p>
<!-- /wp:paragraph --><cite><strong>LBRY</strong> (pronounced ""library"")<sup><a href=""https://en.wikipedia.org/wiki/LBRY#cite_note-:2-4"">[4]</a></sup> is a <a href=""https://en.wikipedia.org/wiki/Blockchain"">blockchain</a>-based <a href=""https://en.wikipedia.org/wiki/File_sharing"">file-sharing</a> and payment network that powers <a href=""https://en.wikipedia.org/wiki/Decentralized_application"">decentralized</a> platforms, primarily <a href=""https://en.wikipedia.org/wiki/Social_networks"">social networks</a> and <a href=""https://en.wikipedia.org/wiki/Online_video_platform"">video platforms</a>.<br><br>LBRY's creators also created <strong>Odysee</strong>, an <a href=""https://en.wikipedia.org/wiki/Open-source_software"">open-source</a> video-sharing website that uses the network, which was split into a separate company on October 1, 2021.<sup><a href=""https://en.wikipedia.org/wiki/LBRY#cite_note-:2-4"">[4]</a><a href=""https://en.wikipedia.org/wiki/LBRY#cite_note-5"">[5]</a><a href=""https://en.wikipedia.org/wiki/LBRY#cite_note-:14-6"">[6]</a></sup> Video platforms built on LBRY, such as Odysee, have been described as decentralized, fringe alternatives to <a href=""https://en.wikipedia.org/wiki/YouTube"">YouTube</a>.<sup><a href=""https://en.wikipedia.org/wiki/LBRY#cite_note-:0-7"">[7]</a></sup><br><br>Źródło Wikipedia: <a href=""https://en.wikipedia.org/wiki/LBRY"" data-type=""URL"" data-id=""https://en.wikipedia.org/wiki/LBRY"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/LBRY</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Czym jest Odysee?</p>
<!-- /wp:paragraph --><cite>Odysee is a blockchain-based media platform. We host all kinds of media such as images, articles, PDFs, audio files, etc., but we're best known for hosting videos. [...] All content on Odysee is hosted on the LBRY network, which Odysee then pulls from.<br><br>Odysee seeks to recapture the spirit of the 2000s internet. Rather than favoring corporate content such as late night talk shows, network television, and TV news, Odysee is a place for everyone, including independent creators.<br><br>Źródło Odysee: <a href=""https://help.odysee.tv/category-basics/whatisodysee/"" data-type=""URL"" data-id=""https://help.odysee.tv/category-basics/whatisodysee/"" target=""_blank"" rel=""noreferrer noopener"">https://help.odysee.tv/category-basics/whatisodysee/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Wiedzę, którą przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie pochodzi z <a href=""http://www.odysee.com"" data-type=""URL"" data-id=""www.odysee.com"" target=""_blank"" rel=""noreferrer noopener"">odysee.com</a>.</p>
<!-- /wp:paragraph -->",2023-07-31
3509,"Udemy, video kurs - Nieszablonowy projekt Java do portfolio - Chuck Norris Jokes","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Mój video kurs jest już dostępny na <a href=""https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/"">Udemy.com</a> - <a rel=""noreferrer noopener"" href=""https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/"" target=""_blank"">https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/</a>! Projekt Java z praktycznym wykorzystaniem: git, Spring Framework i Hibernate ORM - IntelliJ, Maven, JUnit, H2Database.  </p>
<!-- /wp:paragraph -->

<!-- wp:media-text {""align"":""wide"",""mediaPosition"":""right"",""mediaId"":3177,""mediaLink"":""https://www.juniorjavadeveloper.pl/2023/06/26/nieszablonowy-projekt-java-do-portfolio-zewnetrzne-api-java-sound-speak-random-chuck-norris-jokes-youtube/nieszablonowy-projekt-java-do-portfolio_zewnatrzne-api_java-sound_speak-random-chuck-norris-jokes_mentor-junior-java-developer/"",""linkDestination"":""custom"",""mediaType"":""image"",""verticalAlignment"":""center""} -->
<div class=""wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center""><div class=""wp-block-media-text__content""><!-- wp:paragraph {""align"":""center"",""placeholder"":""Treść..."",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size""><a rel=""noreferrer noopener"" href=""https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/"" target=""_blank"">https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/</a></p>
<!-- /wp:paragraph --></div><figure class=""wp-block-media-text__media""><a href=""https://www.udemy.com/course/nieszablonowy-projekt-java-do-portfolio-speak-chuck-norris-jokes/"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/06/nieszablonowy-projekt-Java-do-portfolio_zewnatrzne-API_Java-Sound_Speak-Random-Chuck-Norris-Jokes_Mentor-Junior-Java-Developer-1024x682.jpg"" alt=""Nieszablonowy projekt Java do portfolio - zewnętrzne API + Java Sound - Speak Random Chuck Norris Jokes - Mentor Junior Java Developer"" class=""wp-image-3177 size-full""/></a></figure></div>
<!-- /wp:media-text -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Szukasz pomysłu na nieszablonowy projekt do portfolio? Wszyscy mają już dosyć szablonów CRUD w Twoim portfolio? Chcesz zobaczyć namacalne efekty Twojej pracy? Jeżeli Twoja odpowiedź, na któreś z pytań jest twierdząca, to ten video tutorial jest dla Ciebie. Zobacz jak Twoja aplikacja Java może wypowiadać losowe dowcipy o Chucku Norrisie!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Nie jest to kolejny poradnik z serii ""zróbmy aplikację CRUD w Spring Framework + Hibernate ORM"". Pokazuje on pracę nad projektem z perspektywy osoby na stanowisku Java Developera - tak jak w prawdziwej pracy.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kurs pokazuje krok po kroku:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Tworzenie nieszablonowego projektu Java w IntelliJ z wykorzystaniem Maven,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Umieszczanie istniejącego projektu na GitHub jako element portfolio,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodawanie Spring Framework do istniejącego projektu,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodawanie Hibernate ORM do istniejącego projektu.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ten video tutorial pokazuje jak wykorzystać zewnętrzne API używając protokołu HTTP oraz biblioteki OkHttp do jego obsługi. Pierwsze API zwraca tylko tekst, drugie API zamienia tekst na mowę w dowolnym języku. Tak zamieniony tekst jest następnie odtwarzany przez Java Sound.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W trakcie pisania kodu objaśniam i pokazuje dobre praktyki programowania obiektowego, dla tworzonych klas piszę testy jednostkowe stosując TDD - JUnit. Pokazuję strony, na których można znaleźć prezentowane pojęcia, biblioteki oraz prezentuję jak z nich skorzystać - biblioteki + Maven. W trakcie pisania omawiam skróty klawiszowe do IntelliJ IDEA. Kodowanie na żywo, krok po kroku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Ad. 2. git, umieszczenie projektu na GitHub</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Nie jest to kolejny poradnik z serii „nauka poleceń git – clone, commit, push”.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pokazuje on pracę z git z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Tworzenie repozytorium git na GitHub,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Klonowanie projektu w IntelliJ IDEA,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przenoszenie projektu i umieszczanie na git oraz GitHub,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praca z branch’ami,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">PullRequest i code review,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Polecenia commit i push,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Korzystanie z git z poziomu IntelliJ,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Porady typu, co robić, a czego unikać.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Ad. 3. Spring Framework, dodanie do istniejącego projektu</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Nie jest to kolejny poradnik z serii „poznajmy adnotacje w Spring i zróbmy aplikację CRUD”.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pokazuje on pracę ze Spring Framework z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie zależności dla Spring do Maven,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wykorzystanie Spring Initializr,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Różnica między Spring Boot, a Spring Framework,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praktyczne zastosowanie adnotacji: Service, Controller, Component,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wstrykiwanie zależności przez konstruktor oraz Autowired,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Testy JUnit dla komponentów Spring w użyciem SpringBootTest,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Moduł Spring MVC – prosta obsługa GET i POST dla HTTP.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>Ad. 4. Hibernate, dodanie do istniejącego projektu</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><em>Nie jest to kolejny poradnik z serii „zróbmy encję i zapiszmy ją do bazy”.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pokazuje on pracę z Hibernate ORM z perspektywy osoby na stanowisku Java Developera – tak jak w prawdziwej pracy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Składa się on z następujących elementów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Dodanie zależności dla Hibernate do Maven,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Wykorzystanie oficjalnej dokumentacji dla Hibernate,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Różnica między Hibernate „native”, JPA oraz Spring Data JPA,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Elementy niezbędne dla Entity,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Testy JUnit dla Entity oraz JpaRepository,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Konfiguracja bazy danych w application . properties,</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Praca z H2Database, podgląd danych – H2 Console.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2271""><em>Wiedzę, którą przedstawiłem nie przyswoiłem w “jeden dzień”, jest ona wynikiem “kompilacji” wiedzy z różnych źródeł z celowym pominięciem – “dobrze przeszkolonego pracownik informacji turystycznej” – sztucznej inteligencji, AI.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2272""><a href=""https://www.linkedin.com/feed/hashtag/externalapi"">#externalapi</a> <a href=""https://www.linkedin.com/feed/hashtag/javasound"">#javasound</a> <a href=""https://www.linkedin.com/feed/hashtag/oop"">#oop</a> <a href=""https://www.linkedin.com/feed/hashtag/chucknorris"">#chucknorris</a> <a href=""https://www.linkedin.com/feed/hashtag/jokes"">#jokes</a> <a href=""https://www.linkedin.com/feed/hashtag/maven"">#maven</a> <a href=""https://www.linkedin.com/feed/hashtag/json"">#json</a> <a href=""https://www.linkedin.com/feed/hashtag/okhttp"">#okhttp</a> <a href=""https://www.linkedin.com/feed/hashtag/gson"">#gson</a> <a href=""https://www.linkedin.com/feed/hashtag/pojo"">#pojo</a> <a href=""https://www.linkedin.com/feed/hashtag/tdd"">#tdd</a> <a href=""https://www.linkedin.com/feed/hashtag/junit"">#junit</a> <a href=""https://www.linkedin.com/feed/hashtag/di"">#di</a> <a href=""https://www.linkedin.com/feed/hashtag/dependencyinjection"">#dependencyinjection</a> <a href=""https://www.linkedin.com/feed/hashtag/java"">#java</a> <a href=""https://www.linkedin.com/feed/hashtag/juniorjavadeveloper"">#juniorjavadeveloper</a> <a href=""https://www.linkedin.com/feed/hashtag/youtube"">#youtube</a> <a href=""https://www.linkedin.com/feed/hashtag/intellij"">#intellij</a> <a href=""https://www.linkedin.com/feed/hashtag/livecoding"">#livecoding</a> <a href=""https://www.linkedin.com/feed/hashtag/project"">#project</a> <a href=""https://www.linkedin.com/feed/hashtag/portfolioproject"">#portfolioproject</a> #udemy</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przyszlych-junior-java-developer-039-ow"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przyszlych-junior-java-developer-039-ow wp-block-embed-poradnik-dla-przyszlych-junior-java-developer-039-ow""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2273"">Zdjęcie autorstwa <a href=""https://www.pexels.com/photo/brown-monkey-321552/"">Oleksandr Pidvalnyi</a> z <a href=""https://www.pexels.com/pl-pl/"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-09-26
3625,"Ile zasobów potrzeba do programowania w języku Java? - omówienie wyników ankiet. Bonus: JConsole, JMeter","<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nawet luźne piątkowe ankiety mogą nieść ze sobą jakąś wartość edukacyjną. Skoro, ""już wiemy"", że Java ""potrzebuje więcej niż 32 GB pamięci RAM"", to pojawiają się pytania, jak monitorować zużycie pamięci dla aplikacji napisanych w języku Java? Jak sprawdzić wydajność aplikacji Java pod dużym obciążeniem? Odpowiedzi na, te pytania są w sekcji bonusowej. W dwóch piątkowych ankietach zadałem następujące pytania: <a href=""https://www.linkedin.com/posts/jacekjablonka_przy-pi%C4%85tku-pytanie-kt%C3%B3re-zapewne-zadaje-activity-7118493678322528256-qa9a?utm_source=share&amp;utm_medium=member_desktop"" data-type=""link"" data-id=""https://www.linkedin.com/posts/jacekjablonka_przy-pi%C4%85tku-pytanie-kt%C3%B3re-zapewne-zadaje-activity-7118493678322528256-qa9a?utm_source=share&amp;utm_medium=member_desktop"" target=""_blank"" rel=""noreferrer noopener"">Ile pamięci RAM potrzeba do kodowania w języku Java?</a> oraz <a href=""https://www.linkedin.com/posts/jacekjablonka_java-juniordeveloper-tipsandtricks-activity-7126122648757022720-Y1id?utm_source=share&amp;utm_medium=member_desktop"" data-type=""link"" data-id=""https://www.linkedin.com/posts/jacekjablonka_java-juniordeveloper-tipsandtricks-activity-7126122648757022720-Y1id?utm_source=share&amp;utm_medium=member_desktop"" target=""_blank"" rel=""noreferrer noopener"">Ile monitorów potrzeba do kodowania w języku Java?</a>. <strong>Wszystkim serdecznie dziękuję za odpowiedzi oraz udział w ankiecie!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Omówienie ankiet</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zarówno ilość pamięci RAM, jak ilość monitorów są bardzo istotnymi elementami, jeżeli chodzi o komfort pracy programisty, programistki. W kwestii ilości pamięci RAM nie chodzi o to, że Java potrzebuje dużo RAMu, ale wszystkie niezbędne narzędzia developerskie połączone razem dają wysokie zapotrzebowanie na pamięć RAM. Kilka dodatkowych monitorów pozwala na korzystanie z wielu narzędzi developerskich jednocześnie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Ile monitorów potrzeba do kodowania w języku Java?</h3>
<!-- /wp:heading -->

<!-- wp:image {""align"":""center"",""id"":3628,""width"":""600px"",""height"":""auto"",""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full is-resized""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/ile-monitorow-potrzeba-do-kodowania-w-jezyku-java_junior-java-developer-mentor-mentoring.png"" alt=""Ile monitorów potrzeba do kodowania w języku Java - Junior Java Developer Mentor Mentoring"" class=""wp-image-3628"" style=""width:600px;height:auto""/><figcaption class=""wp-element-caption"">Ile monitorow potrzeba do kodowania w jezyku Java - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Wynik ankiety</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Widać, że idealnym połączeniem, jeżeli chodzi o ilość monitorów jest jeden monitor z laptopa plus dodatkowy monitor na biurku - 46% osób, tak odpowiedziało. Sam nie pracowałem w takiej konfiguracji. Używałem tylko laptopa (25% głosów) lub dwóch zewnętrznych monitorów i laptopa (21% głosów). Wygląda, na to że 1/2 osób korzysta z laptopa plus dodatkowego monitora. Natomiast, mniej więcej po 1/4 osób korzysta z samego laptopa i/lub laptopa plus dwa dodatkowe monitory.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Do czego więcej niż jeden monitor?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przy programowaniu, na jednym monitorze można pisać kod źródłowy aplikacji, na drugim sprawdzać logi działającej aplikacji, a na kolejnym przeglądać stronę www aplikacji i/lub szukać informacji w internecie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Przykłady monitorów - Midjourney AI</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""align"":""left"",""fontSize"":""large""} -->
<p class=""has-text-align-left has-large-font-size"">Poniżej przykładowy zestaw dwóch monitorów oraz jeden długi monitor z zakrzywionym wyświetlaczem. Mój prompt: <strong>/imagine two monitors desktop set</strong> oraz <strong>/imagine long curved monitor desktop set</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center"",""align"":""wide""} -->
<div class=""wp-block-columns alignwide are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":3672,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/zestaw-dwoch-monitorow_Midjourney_Junior-Java-Developer-Mentor-Mentoring-.png"" alt=""Zestaw dwóch monitorów - Midjourney - Junior Java Developer Mentor Mentoring"" class=""wp-image-3672""/><figcaption class=""wp-element-caption"">Zestaw dwoch monitorow - Midjourney - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":3673,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/jeden-dlugi-monitor-z-zakrzywionym-wyswietlaczem_Midjourney_Junior-Java-Developer-Mentor-Mentoring.png"" alt=""Jeden długi monitor z zakrzywionym wyświetlaczem - Midjourney - Junior Java Developer Mentor Mentoring"" class=""wp-image-3673""/><figcaption class=""wp-element-caption"">Jeden dlugi monitor z zakrzywionym wyswietlaczem - Midjourney - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Ile pamięci RAM potrzeba do kodowania w języku Java?</h3>
<!-- /wp:heading -->

<!-- wp:image {""align"":""center"",""id"":3627,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/ile-pamieci-ram-potrzeba-do-kodowania-w-jezyku-java_junior-java-developer-mentor-mentoring.png"" alt=""Ile pamięci RAM potrzeba do kodowania w języku Java? - Junior Java Developer Mentor Mentoring"" class=""wp-image-3627""/><figcaption class=""wp-element-caption"">Ile pamieci RAM potrzeba do kodowania w jezyku Java? - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Wynik ankiety</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Do pisania kodu w języku Java potrzeba 32 GB pamięci RAM, a nawet jeszcze więcej - 43% osób, tak odpowiedziało. Domyślam się, co osoby głosujące chciały przez to chciały przekazać. Środowisko programistyczne i zestaw narzędzi jako całość wymaga dużej ilości pamięci RAM. Kiedyś próbowałem programować na laptopie z 8 GB pamięci RAM, ale szybko skończyło się, to na wymianie laptopa, na takiego z 32 GB RAMu. Część osób - 20% - programuje z 8GB RAMu, a kolejna grupa osób - 26% - potrzebuje 16 GB pamięci RAM.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Dlaczego minimum 16 GB pamięci RAM?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak, jak wspomniałem powyżej, szybko musiałem przesiąść się z 8 GB na 32 GB pamięci RAM. Dlaczego? Do programowania w ""czystej Javie"", plus IDE, np.: IntelliJ IDEA wystarczy 8GB RAMu. Sama czysta Java nie wystarczy, programiści, programistki potrzebują jeszcze serwer aplikacyjny, bazę danych + graficzną aplikację do jej obsługi oraz jakiś mechanizm konteneryzacji, np.: Docker. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Sam IntelliJ IDEA, ""jak się rozpędzi"", to potrafi wykorzystać 2 GB pamięci RAM. Dlatego programiści szukają ""lekkich"" serwerów aplikacji i baz danych. Co rozumiem pod pojęciem ""lekki""? To, taki, który wykorzystuje mało pamięci RAM, zużywa niewiele zasobów systemu operacyjnego oraz zajmuje mało miejsca na dysku. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Spring Boot korzysta z wbudowanego serwera Tomcat oraz wspiera wbudowaną bazę danych H2Database, to było jednym z elementów, które pozwoliły stać się Spring Framework tak popularnym. Więcej pisałem o tym w moim artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/09/uzywamy-starych-frameworkow-java-ee-vs-spring-framework-dawid-kontra-goliat/"" data-type=""post"" data-id=""2800"">Używamy „starych” frameworków – Java EE vs. Spring Framework – Dawid kontra Goliat</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4,""fontSize"":""large""} -->
<h4 class=""wp-block-heading has-large-font-size"">Porównanie zapotrzebowania serwerów na pamięć RAM</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Serwery aplikacyjne:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Apache Tomcat - 512 MB RAM.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">WildFly (dawniej JBoss) - od 2-4 GB do 8 GB RAM.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Serwery bazodanowe:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">H2Database - 2 MB RAM.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Oracle Database - od 4 GB do 16 GB.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdaję sobie sprawę, że powyższe porównanie dotyczy różnych klas serwerów do różnych zastosowań, ale chcę pokazać, jak różne może być zapotrzebowanie na zasoby systemowe takie, jak np.: pamięć RAM.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":4} -->
<h4 class=""wp-block-heading"">Podsumowanie różnic serwerów - ChatGPT AI</h4>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Prompty, które użyłem: ""Compare system requirements for servers: Tomcat and Wildfly"" oraz ""Compare system requirements for Oracle Database and H2Database"".</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Serwery aplikacyjne</p>
<!-- /wp:paragraph --><cite>In summary, Tomcat is a lightweight and flexible servlet container, suitable for a wide range of applications with modest system requirements. WildFly is a more comprehensive Java EE application server designed for enterprise-grade applications, and it requires higher system resources to operate efficiently. Your choice between the two should depend on the specific needs and scale of your application.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Serwery bazodanowe</p>
<!-- /wp:paragraph --><cite>In summary, Oracle Database is a heavyweight, enterprise-grade database system with high system requirements, designed for large-scale and mission-critical applications. H2 Database, on the other hand, is a lightweight, embeddable database system with modest system requirements, making it suitable for smaller projects, prototyping, and embedded scenarios. The choice between the two should depend on your specific use case and the resources available for your database system.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">BONUS: Wydajność aplikacji Java - monitorowanie i testowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pomimo, że Java sama w sobie nie zużywa dużej ilości pamięci RAM, to aplikacje napisane przez nas mogą konsumować jej ogromne ilości z powodu np.:  wycieków pamięci. W takim przypadku pierwszą kwestią jest monitorowanie zasobów używanych przez aplikacje Java. Druga kwestia, to w jaki sposób, w bezpiecznych warunkach doprowadzić do takiego obciążenia aplikacji Java, żeby wystąpiły problemy z wydajnością. Z pomocą przychodzą nam poniżej przedstawione narzędzia: JConsole oraz JMeter.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Monitorowanie zasobów oraz wydajności aplikacji Java - JConsole</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">JConsole stanowi część pakietu Java Development Kit (JDK), a konsolę graficzną można uruchomić za pomocą polecenia „jconsole”. Za jej pomocą można uzyskać informacje o wydajności i zużyciu zasobów w aplikacjach działających na platformie Java.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""> JConsole</p>
<!-- /wp:paragraph --><cite>The JConsole graphical user interface is a monitoring tool that complies to the Java Management Extensions (JMX) specification. JConsole uses the extensive instrumentation of the Java Virtual Machine (Java VM) to provide information about the performance and resource consumption of applications running on the Java platform. Źródło: <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html"" target=""_blank"" rel=""noreferrer noopener"">https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:image {""align"":""center"",""id"":3665,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/JConsole_Overview-tab_docs.oracle.com_.gif"" alt=""JConsole - Overview Tab - docs.oracle.com - Junior Java Developer Mentor Mentoring"" class=""wp-image-3665""/><figcaption class=""wp-element-caption"">JConsole - Overview Tab - docs.oracle.com - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zakładka Overview wyświetla graficzne informacje monitorujące dotyczące użycia procesora, użycia pamięci, liczby wątków i klas załadowanych do maszyny wirtualnej Java, a wszystko to na jednym ekranie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Testy obciążeniowe i monitorowanie wydajności aplikacji Java - JMeter</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>JMeter jest używany jako narzędzie do testowania obciążenia do analizowania i pomiaru wydajności różnych usług, ze szczególnym uwzględnieniem aplikacji internetowych.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>JMeter</p>
<!-- /wp:paragraph --><cite>The <strong>Apache JMeter™</strong> application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. Źródło: <a href=""https://jmeter.apache.org/"" target=""_blank"" rel=""noreferrer noopener"">https://jmeter.apache.org/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:image {""align"":""center"",""id"":3668,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/JMeter-Console_Junior-Java-Developer-Mentor-Mentoring.png"" alt=""JMeter - Console - Junior Java Developer Mentor Mentoring"" class=""wp-image-3668""/><figcaption class=""wp-element-caption"">JMeter - Console - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Za jego pomocą można weryfikować wydajność ""czystych klas Java"" z wykorzystaniem ""Java Request"".</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Java Request - JMeter</p>
<!-- /wp:paragraph --><cite>This sampler lets you control a java class that implements the org.apache.jmeter.protocol.java.sampler.JavaSamplerClient interface. By writing your own implementation of this interface, you can use JMeter to harness multiple threads, input parameter control, and data collection. Źródło: <a href=""https://jmeter.apache.org/usermanual/component_reference.html#Java_Request"">https://jmeter.apache.org/usermanual/component_reference.html#Java_Request</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Można, również użyć JMeter do weryfikacji wydajności testów jednostkowych napisanych w JUnit z wykorzystaniem ""JUnit Sampler"". Źródło <a href=""https://jmeter.apache.org/usermanual/junitsampler_tutorial.html"">https://jmeter.apache.org/usermanual/junitsampler_tutorial.html</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tak, jak napisałem na wstępie, nawet luźne piątkowe ankiety mogą nieść ze sobą jakąś wartość edukacyjną. Omawiając ilość pamięci RAM potrzebną do pisania aplikacji w języku Java dowiedzieliśmy się, że sama Java, tak na prawdę nie zużywa, tak dużo pamięci RAM. To środowisko programistyczne, czyli narzędzia i serwery potrzebują dużo RAMu. Odpowiadając na pytanie o ilość potrzebnych monitorów, poznaliśmy się, że przy programowaniu, na jednym monitorze można pisać kod źródłowy aplikacji, na drugim sprawdzać logi działającej aplikacji, a na kolejnym przeglądać stronę www aplikacji i/lub szukać informacji w internecie. Na koniec pokazałem przydatne narzędzia do monitorowania zasobów oraz wydajności - JConsole - oraz narzędzie do testów obciążeniowych i monitorowania wydajności - JMeter - oba narzędzia dla aplikacji napisanych w języku Java.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"" id=""ember2273"">Zdjęcie autorstwa <a href=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" data-type=""URL"" data-id=""https://www.pexels.com/pl-pl/zdjecie/ilustracja-wykres-kolowy-669621/"" target=""_blank"" rel=""noreferrer noopener"">Lukas</a> z <a href=""https://www.pexels.com/pl-pl/"" target=""_blank"" rel=""noreferrer noopener"">Pexels</a>.</p>
<!-- /wp:paragraph -->",2023-11-10
3686,"Video Tutorial - Java Exceptions, przykłady obsługi wyjątków, tworzenia własnego wyjątku, finally, try-with-resources - YouTube","<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial - czas trwania 30 minut</p>
<!-- /wp:paragraph --><cite>W jaki sposób obsłużyć ""podstępne"" wyjątki <code>unchecked</code>? Jak stworzyć własny wyjątek <code>checked</code>, który trzeba obsłużyć? try-catch me, jeśli potrafisz ;) No i na koniec <code>finally</code>, zastosujemy ""nowość"" z Java 1.7, czyli <code>try-with-resources</code>. Praktyczny przykład jak postępować z wyjątkami w języku Java.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/umuUGLSQqiw"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/umuUGLSQqiw
</div><figcaption class=""wp-element-caption"">Java Exceptions, przyklady obslugi wyjatkow, tworzenia wlasnego wyjatku, finally, try-with-resources - YouTube</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej diagram przedstawiający hierarchię klas wyjątków w języku Java. Wyjątki w języku Java służą do obsługi sytuacji wyjątkowych oraz stanowią dodatkową wartość zwracaną z metody.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3689,""sizeSlug"":""full"",""linkDestination"":""media""} -->
<figure class=""wp-block-image aligncenter size-full""><a href=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/Exception_Hierarchy.png"" target=""_blank"" rel=""noreferrer noopener""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/11/Exception_Hierarchy.png"" alt=""Java Exception Hierarchy - Junior Java Developer Mentor Mentoring"" class=""wp-image-3689""/></a><figcaption class=""wp-element-caption"">Java Exception Hierarchy - Junior Java Developer Mentor Mentoring</figcaption></figure>
<!-- /wp:image -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-11-13
3787,"OMG! ORM, JPA, Hibernate - SessionFactory, EntityManager, JpaRepository / CrudRepository - wyjaśnione","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W tym artykule postaram się pomóc odnaleźć się w gąszczu możliwości jakie daje Hibernate. Wyjaśnię, gdzie i jak wykorzystać tytułowe SessionFactory, EntityManager oraz JpaRepository/CrudRepository. Osoby uczące się Hibernate nieraz szukając rozwiązań w internecie natrafiają na morze możliwości.</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zaczynając swoją przygodę z Hibernate wiele osób gubi się w morzu możliwości, które oferuje Hibernate. Zacznę od tego, że Hibernate jest jedną z implementacji JPA - Java/Jakarta Persistence API. Popularne implementacje JPA: <a href=""https://hibernate.org/"" data-type=""link"" data-id=""https://hibernate.org/"" target=""_blank"" rel=""noreferrer noopener"">Hibernate</a>, <a href=""https://eclipse.dev/eclipselink/"" data-type=""link"" data-id=""https://eclipse.dev/eclipselink/"" target=""_blank"" rel=""noreferrer noopener"">EclipseLink</a>, <a href=""https://openjpa.apache.org/"" data-type=""link"" data-id=""https://openjpa.apache.org/"" target=""_blank"" rel=""noreferrer noopener"">OpenJPA</a> oraz <a href=""https://www.datanucleus.org/"" data-type=""link"" data-id=""https://www.datanucleus.org/"" target=""_blank"" rel=""noreferrer noopener"">DataNucleus</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Naukę Hibernate - jak większość frameworków - warto zacząć od <a href=""https://hibernate.org/"" data-type=""link"" data-id=""https://hibernate.org/"" target=""_blank"" rel=""noreferrer noopener"">oficjalnej dokumentacji</a>. Już na stronie głównej widzimy bardzo wymowny banner ""<strong>More than an ORM, discover the Hibernate galaxy.</strong>"" W skład Hibernate wchodzą np.: Hibernate Search oraz Hibernate Validator (używany w Spring Framework - Spring MVC).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Sposoby działania z Hibernate - 4 różne</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Z oficjalnej dokumentacji, a dokładnie z części ""<a href=""https://docs.jboss.org/hibernate/orm/6.4/quickstart/html_single/"" data-type=""link"" data-id=""https://docs.jboss.org/hibernate/orm/6.4/quickstart/html_single/"" target=""_blank"" rel=""noreferrer noopener"">Getting Started with Hibernate</a>"", dowiadujemy się, że Hibernate można używać na trzy sposoby, ja dorzucę czwarty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Getting Started with Hibernate:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Using native Hibernate APIs.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Using JPA-standard APIs.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Using Envers.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">(dorzucam) Using Spring DataJPA.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Każdy z powyższych punktów szczegółowo opiszę w dalszej części.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wyjaśnienie podstawowych elementów</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zanim zagłębimy się sposoby używania Hibernate wyjaśnijmy podstawowe pojęcia. Umieszczę techniczne opisy oraz moją własną interpretację.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">API</p>
<!-- /wp:paragraph --><cite>An <strong>application programming interface</strong> (<strong>API</strong>) is a way for two or more <a href=""https://en.wikipedia.org/wiki/Computer_program"">computer programs</a> to communicate with each other. It is a type of <a href=""https://en.wikipedia.org/wiki/Software_interface"">software interface</a>, offering a service to other pieces of <a href=""https://en.wikipedia.org/wiki/Software"">software</a>. Źródło Wikipedia.<br><br>Moja interpretacja: API, to zbiór interfejsów programistycznych, których cechą jest, to, że wskazują, że coś można zrobić, ale nie mówią jak, to zrobić. Np. JPA ""mówi że"" można utrwalać obiekty Java, ale nie wskazuje jak utrwalać, to konkretna implementacja JPA np. Hibernate zawiera kod zapisujący do bazy danych.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">JPA</p>
<!-- /wp:paragraph --><cite><strong>Jakarta Persistence</strong> (<strong>JPA</strong>; formerly <strong>Java Persistence API</strong>) is a <a href=""https://en.wikipedia.org/wiki/Jakarta_EE"">Jakarta EE</a> <a href=""https://en.wikipedia.org/wiki/Application_programming_interface"">application programming interface</a> specification that describes the management of <a href=""https://en.wikipedia.org/wiki/Relational_data_model"">relational data</a> in enterprise <a href=""https://en.wikipedia.org/wiki/Java_(software_platform)"">Java</a> applications. Źródło Wikipedia.<br><br>Moja interpretacja: JPA zawiera zbiór adnotacji, za pomocą, których można stworzyć definicję klasy Java, która odzwierciedla tabelę w bazie danych - encja, <code>@Entity</code>. Dostarcza zbiór interfejsów z metodami do utrwalania danych - <code>EntityManager</code>, np. metoda <code>persist()</code>.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">ORM</p>
<!-- /wp:paragraph --><cite><strong>Object–relational mapping</strong> (<strong>ORM</strong>, <strong>O/RM</strong>, and <strong>O/R mapping tool</strong>) in <a href=""https://en.wikipedia.org/wiki/Computer_science"">computer science</a> is a <a href=""https://en.wikipedia.org/wiki/Computer_programming"">programming</a> technique for converting data between a <a href=""https://en.wikipedia.org/wiki/Relational_database"">relational database</a> and the <a href=""https://en.wikipedia.org/wiki/Memory_management#HEAP"">heap</a> of an <a href=""https://en.wikipedia.org/wiki/Object-oriented"">object-oriented</a> programming language. Źródło Wikipedia.<br><br>Moja interpretacja: Mechanizm mapowania klas Java na tabele w bazie danych - na podstawie definicji - encji, <code>@Entity</code> - zawartej w klasie Java.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Czym jest Hibernate?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zacznę od mojej własnej interpretacji. Hibernate, to ORM, który umożliwia mapowanie klas Java na tabele bazodanowe. Hibernate jest jedną z implementacji JPA. Warto pamiętać, że Hibernate w swojej implementacji korzysta z Javowego JDBC. Znajomość Hibernate nie zwalnia ze znajomości JDBC oraz SQL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na oficjalnej stronie <a href=""https://hibernate.org/"" data-type=""link"" data-id=""https://hibernate.org/"" target=""_blank"" rel=""noreferrer noopener"">Hibernate</a> przeczytamy: ""Hibernate ORM. Domain model persistence for relational databases."" Na temat <a href=""https://hibernate.org/orm/"" data-type=""link"" data-id=""https://hibernate.org/orm/"" target=""_blank"" rel=""noreferrer noopener"">Hibernate ORM</a> przeczytamy: ""Object/Relational Mapping. Hibernate ORM enables developers to more easily write applications whose data outlives the application process. As an Object/Relational Mapping (ORM) framework, Hibernate is concerned with data persistence as it applies to relational databases (via JDBC).""</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3,""fontSize"":""large""} -->
<h3 class=""wp-block-heading has-large-font-size"">Dlaczego ORM?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego mapujemy klasy Java na tabele w bazie danych? Pierwsze, co przychodzi na myśl, to zapisanie stanu obiektów Java do bazy danych. Jak, to możliwe, że klasy Java można ""zapisać w bazie daych""? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pierwsza kwestia, to właśnie ORM - więcej na ten temat można przeczytać ""<a href=""https://hibernate.org/orm/what-is-an-orm/"" data-type=""link"" data-id=""https://hibernate.org/orm/what-is-an-orm/"" target=""_blank"" rel=""noreferrer noopener"">Hibernate ORM - What is Object/Relational Mapping?</a>"" Druga kwestia, to, że klasy Java są bardzo podobne do tabel bazodanowych. Jak, to? Klasy Java są jak tabele? Wyjaśnienie poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Język Java jest obiektowy, między klasami są zależności, asocjacje, połączenia. Natomiast bazy danych, z których korzysta Hibernate ORM są bazami relacyjnymi, między tabelami są relacjie z wykorzystaniem klucza głównego oraz klucza obcego. </p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Address {
    private Long id;
    private String street;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""sql""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""sql"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">CREATE TABLE ADDRESSES (
    ID BIGINT PRIMARY KEY,
    STREET VARCHAR(255)
)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższa klasa Java <code>Address</code> oraz tabela bazodanowa  <code>ADDRESSES</code> wyglądają podobnie, jeżeli używają ""prostych typów"", sprawa wygląda inaczej, gdy klasa ma zależności, a w tabeli pojawia się relacje.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class Client {
    private Long id;
    private String name;
    private Address address;
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:enlighter/codeblock {""language"":""sql""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""sql"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">CREATE TABLE CLIENTS (
    ID BIGINT PRIMARY KEY,
    NAME VARCHAR(255),
    ADDRESS_ID BIGINT,
    CONSTRAINT FK_CLIENTS_ADDRESSES 
        FOREIGN KEY (ADDRESS_ID) 
        REFERENCES ADDRESSES(ID)
)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Powyższa klasa Java <code>Client</code> zawiera zależność do innej klasy <code>Address</code>. Natomiast w tabeli bazodanowej <code>CLIENTS</code> pojawia się klucz obcy - <code>FOREIGN KEY</code> - do klucza głównego - <code>PRIMARY KEY</code> - w tabeli <code>ADDRESSES</code>. Klucz obcy o nazwie <code>FK_CLIENTS_ADDRESSES</code>, a klucz główny dla kolumny <code>ID</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Jak używać Hibernate</h2>
<!-- /wp:heading -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Całość kodu można znaleźć na moim koncie GitHub </p>
<!-- /wp:paragraph --><cite><a href=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/"" data-type=""link"" data-id=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/juniorjavadeveloper-pl/hibernate-examples</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Oficjalna dokumentacja - Getting Started with Hibernate</p>
<!-- /wp:paragraph --><cite><a href=""https://docs.jboss.org/hibernate/orm/6.4/quickstart/html_single/"" data-type=""link"" data-id=""https://docs.jboss.org/hibernate/orm/6.4/quickstart/html_single/"" target=""_blank"" rel=""noreferrer noopener"">https://docs.jboss.org/hibernate/orm/6.4/quickstart/html_single/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Mapowanie Java na TABLE - @Entity</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Konfiguracja Hibernate oraz sposoby korzystania z niego, to jedno, ale efekt końcowy jest taki, że zapisujemy coś w relacyjnej bazie danych. <strong>Musimy odwzorować, mapować klasę języka Java na tabele bazodanowe, do tego służą nam encje, klasy oznaczone adnotacją </strong><code>@Entity</code><strong>.</strong> Takie klasy stanowią pomost, szablon, definicję dla Hibernate, który wykona za nas całą pracę, którą do tej pory musieliśmy samodzielnie robić za pomocą czystego JDBC.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@Entity
@Table(name = ""ZOO"")
public class Animal {
    @Id
    @GeneratedValue
    private Long id;

    @Column(name = ""BIRTH_DATE"", nullable = false)
    private Date date;
    private String name;

    public Animal() {
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Który ze sposobów użycia Hibernate był pierwszy? Odpowiedź ChatGPT</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co było pierwsze jajko czy kura? Podobne pytanie można sobie zadać w związku z Hibernate. </p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Który ze sposobów użycia Hibernate był pierwszy?</p>
<!-- /wp:paragraph --><cite>Hibernate był pierwszym rozwiązaniem jako samodzielny framework ORM z natywnym API (2001 r.). Specyfikacja JPA została wprowadzona (2006 r.) później w celu ujednolicenia ORM w Javie, a Hibernate ostatecznie zintegrował obsługę JPA (2010 r.). Następnie w ramach projektu Spring Data wprowadzono Spring Data JPA (2011 r.), aby uprościć dostęp do danych w aplikacjach Spring korzystających z JPA.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>2001 r. - Native Hibernate API.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>2006 r. - JPA specification.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>2010 r. - JPA-standard API w Hibernate.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>2011 r. - Spring Data JPA.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Native Hibernate API - SessionFactory</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jedną z dostępnych możliwości jest Native Hibernate API, czyli natywne, naturalne/rdzenne API Hibernate. W telegraficznym skrócie, aby korzystać z Native Hibernate API potrzebujemy SessionFactory - <a href=""https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-native"" data-type=""link"" data-id=""https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-native"" target=""_blank"" rel=""noreferrer noopener"">Hibernate Native Bootstrapping</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph {""fontSize"":""normal""} -->
<p class=""has-normal-font-size"">SessionFactory</p>
<!-- /wp:paragraph --><cite><strong>Javadoc:</strong> The main contract here is the creation of Session instances. Usually an application has a single SessionFactory instance and threads servicing client requests obtain Session instances from this factory.<br><br>The internal state of a SessionFactory is immutable. Once it is created this internal state is set. This internal state includes all of the metadata about Object/Relational Mapping.<br><br>Implementors must be threadsafe.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class HibernateNativeBasicConfigurationTest {
    private SessionFactory sessionFactory;

    @BeforeEach
    void setUp() {
        StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                .configure()
                .build();

        try {
            sessionFactory = new MetadataSources(serviceRegistry)
                    .buildMetadata()
                    .buildSessionFactory();
        } catch (Exception e) {
            e.printStackTrace();
            StandardServiceRegistryBuilder.destroy(serviceRegistry);
        }
    }

    @AfterEach
    void tearDown() {
        if (sessionFactory != null) {
            sessionFactory.close();
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""align"":""left"",""fontSize"":""large""} -->
<p class=""has-text-align-left has-large-font-size"">Kod na GitHub -&gt; <a href=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/blob/master/src/test/java/pl/juniorjavadeveloper/examples/hibernate/basic/configuration/HibernateNativeBasicConfigurationTest.java"" data-type=""link"" data-id=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/blob/master/src/test/java/pl/juniorjavadeveloper/examples/hibernate/basic/configuration/HibernateNativeBasicConfigurationTest.java"" target=""_blank"" rel=""noreferrer noopener"">HibernateNativeBasicConfigurationTest</a></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poza SessionFactory potrzebujemy jeszcze konfiguracje Hibernate np.: w postaci pliku XML - <strong>hibernate.cfg.xml</strong>. Poniżej fragment konfiguracji z linkiem do GitHub z pełną zawartością pliku konfiguracyjnego.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""xml""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""xml"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;?xml version='1.0' encoding='utf-8'?>
&lt;!DOCTYPE hibernate-configuration PUBLIC
        ""-//Hibernate/Hibernate Configuration DTD 3.0//EN""
        ""http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"">
&lt;hibernate-configuration>
    &lt;session-factory>
        &lt;!-- https://github.com/juniorjavadeveloper-pl/hibernate-examples/blob/master/src/test/resources/hibernate.cfg.xml -->
    &lt;/session-factory>
&lt;/hibernate-configuration></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">JPA-standard API - EntityManager</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kolejną opcją jest JPA-standard API, czyli implementacja specyfikacji Java/Jakarta Persistence API w Hibernate. W telegraficznym skrócie, aby korzystać z JPA-standard API potrzebujemy EntityManager - <a href=""https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-jpa"" data-type=""link"" data-id=""https://docs.jboss.org/hibernate/orm/6.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-native"" target=""_blank"" rel=""noreferrer noopener"">Hibernate Jakarta Persistence Bootstrapping</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""normal""} -->
<blockquote class=""wp-block-quote has-normal-font-size""><!-- wp:paragraph {""fontSize"":""normal""} -->
<p class=""has-normal-font-size"">EntityManager</p>
<!-- /wp:paragraph --><cite><strong>Javadoc:</strong> Interface used to interact with the persistence context.<br><br>An EntityManager instance is associated with a persistence context. A persistence context is a set of entity instances in which for any persistent entity identity there is a unique entity instance. Within the persistence context, the entity instances and their lifecycle are managed. The EntityManager API is used to create and remove persistent entity instances, to find entities by their primary key, and to query over entities.<br><br>The set of entities that can be managed by a given EntityManager instance is defined by a persistence unit. A persistence unit defines the set of all classes that are related or grouped by the application, and which must be colocated in their mapping to a single database.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">public class HibernateJpaBasicConfigurationTest {
    private EntityManagerFactory entityManagerFactory;

    @BeforeEach
    void setUp() {
        entityManagerFactory = Persistence.createEntityManagerFactory(
                ""pl.juniorjavadeveloper.examples.hibernate.basic.configuration.pu"");
    }

    @AfterEach
    void tearDown() {
        if (entityManagerFactory != null) {
            entityManagerFactory.close();
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kod na GitHub -&gt; <a href=""https://github.com/juniorjavadeveloper-pl/hibernate-examples/blob/master/src/test/java/pl/juniorjavadeveloper/examples/hibernate/basic/configuration/HibernateJpaBasicConfigurationTest.java"" target=""_blank"" rel=""noreferrer noopener"">HibernateJpaBasicConfigurationTest</a></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poza EntityManager potrzebujemy jeszcze konfiguracje Java/Jakarta Persistence np.: w postaci pliku XML - <strong>persistence.xml</strong>. Poniżej fragment konfiguracji z linkiem do GitHub z pełną zawartością pliku konfiguracyjnego.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {""language"":""xml""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""xml"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">&lt;persistence xmlns=""http://java.sun.com/xml/ns/persistence""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd""
             version=""2.0"">
    &lt;persistence-unit name=""pl.juniorjavadeveloper.examples.hibernate.basic.configuration.pu"">
        &lt;!-- https://github.com/juniorjavadeveloper-pl/hibernate-examples/blob/master/src/test/resources/META-INF/persistence.xml -->
    &lt;/persistence-unit>
&lt;/persistence></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Spring Data JPA - JpaRepository / CrudRepository</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Korzystając z Spring Framework mamy możliwość dodania modułu Spring Data JPA, aby uprościć dostęp do danych w aplikacjach Spring korzystających z JPA.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Repository</p>
<!-- /wp:paragraph --><cite><strong>Javadoc:</strong> Central repository marker interface. Captures the domain type to manage as well as the domain type's id type. General purpose is to hold type information as well as being able to discover interfaces that extend this one during classpath scanning for easy Spring bean creation.<br><br>Domain repositories extending this interface can selectively expose CRUD methods by simply declaring methods of the same signature as those declared in CrudRepository.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:enlighter/codeblock {""language"":""java""} -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""java"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">@Repository
public interface AnimalRepository extends JpaRepository&lt;Animal, Long> {
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Oficjalny tutorial -&gt; <a href=""https://spring.io/guides/gs/accessing-data-jpa/"" data-type=""link"" data-id=""https://spring.io/guides/gs/accessing-data-jpa/"">Accessing Data with JPA</a></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Spring Boot dostarcza nam domyślną konfiguracje w postaci pliku properties - <strong>application.properties</strong>. Poniżej przykład konfiguracji.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class=""EnlighterJSRAW"" data-enlighter-language=""generic"" data-enlighter-theme="""" data-enlighter-highlight="""" data-enlighter-linenumbers="""" data-enlighter-lineoffset="""" data-enlighter-title="""" data-enlighter-group="""">spring.datasource.url=jdbc:h2:~/hibernate-examples
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Gdzie używać Hibernate</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej w telegraficznym skrócie opiszę, gdzie z mojego doświadczenia można użyć różne sposoby korzystania z Hibernate.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Native - aplikacje stand-alone</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jeżeli chcemy ""lekką"" aplikację&nbsp; i nie potrzebujemy całego ""bagażu"" związanego z Java EE oraz Spring Framework, to w zupełności wystarczy nam Hibernate Native API. Używałem tej opcji do tworzenia aplikacji desktopowych np.: w JavaFX lub dla oddzielnych, niezależnych modułów aplikacji.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">JPA-standard - aplikacje Java EE</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Tworząc aplikacje Java EE możemy użyć JPA, ale wtedy musimy dodać (plik JAR) implementację JPA, może, to być właśnie Hibernate. Aplikacje dla Java EE umieszczamy na serwerach aplikacyjnych, które mogą mieć dostępną implementację JPA, wtedy, po prostu podmieniamy ją na Hibernate.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Spring Data JPA - aplikacje dla Spring Framework</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Odpowiedź na to pytanie jest oczywista - aplikacje dla Spring Framework.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Czy ktoś w ogóle używa Hibernate?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Uwaga, na koniec granat! Z mojego komercyjnego doświadczenia wynika, że Hibernate nie jest używany w systemach produkcyjnych. Jak, to możliwe?! Niestety Hibernate jest wolny i niewydajny, ma za duży narzut generycznych, ogólnych koncepcji i rozwiązań. Jest, to ""kombajn"" do wszystkiego i dla każdej bazy danych. Hibernate bardzo dobrze się sprawdza do szybkiego prototypownia oraz tworzenia aplikacji typu proof-of-concept. No i oczywiście do tworzenia aplikacji CRUD do naszego portfolio na potrzeby rekrutacji ;) Jeżeli nie Hibernate, to co? Oczywiście dobre stare JDBC i/lub Spring JdbcTemplate.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Lesson: JDBC Basics (The Java™ Tutorials &gt; JDBC Database Access)</p>
<!-- /wp:paragraph --><cite>In this lesson you will learn the basics of the JDBC API. Źródło: <a href=""https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html"" data-type=""link"" data-id=""https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html"" target=""_blank"" rel=""noreferrer noopener"">https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p>Accessing Relational Data using JDBC with Spring</p>
<!-- /wp:paragraph --><cite>You will build an application that uses Spring’s <code>JdbcTemplate</code> to access data stored in a relational database. Źródło: <a href=""https://spring.io/guides/gs/relational-data-access/"" data-type=""link"" data-id=""https://spring.io/guides/gs/relational-data-access/"" target=""_blank"" rel=""noreferrer noopener"">https://spring.io/guides/gs/relational-data-access/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Wierzę, że rzucony na koniec granat nie zniechęci do korzystania z Hibernate. Kiedy już poznamy możliwości Hibernate, to łatwiej będzie zastosować do naszych potrzeb konkretny sposób korzystania z Hibernate. Mam nadzieję, że osoby uczące się Hibernate szukając rozwiązań w internecie już nie utoną w morzu możliwości jakie daje Hibernate. Korzystając z Hibernate łatwo i szybko tworzy się aplikacje typu proof-of-concept.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2024-01-08
3887,"Obrazy w połowie podróży, jak Midjourney pomaga mi generować obrazy z użyciem AI","<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wstęp</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dziś napiszę o tym jak AI - sztuczna inteligencja - wspomaga mnie w tworzeniu grafiki i obrazów na mojego bloga.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Pozyskiwanie zdjęć i grafiki</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kiedyś musiałem ręcznie zdobywać zdjęcia na mojego bloga. Dzięki generowaniu obrazów przez AI, zwanym też sztuką generatywną, oszczędzam czas i pieniądze. Obecnie korzystam z ""w połowie podróży"" - <a href=""https://www.midjourney.com"" data-type=""link"" data-id=""https://www.midjourney.com"" target=""_blank"" rel=""noreferrer noopener"">Midjourney bot to generate stunning images from simple text prompts in seconds</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Wyszukiwanie zdjęć</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Najczęściej przeszukiwałem strony oferujące darmowe i/lub płatne zdjęcia. Zajmowało mi, to sporo czasu, a znalezione zdjęcia były przymusowym kompromisem. Wybrane zdjęcia nigdy nie były nawet bliskie temu, czego oczekiwałem. Najczęściej korzystałem z <a href=""https://www.pexels.com/"" data-type=""link"" data-id=""https://www.pexels.com/"" target=""_blank"" rel=""noreferrer noopener"">Pexels - Darmowe zdjęcia z galerii, obrazy z galerii bez opłat licencyjnych i zdjęcia bez praw autorskich</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3914,""sizeSlug"":""medium"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Jak-Midjourney-pomaga-mi-generowac-obrazy-z-uzyciem-AI_Pexels.com_Mentor-Junior-Java-Developer-276x300.png"" alt=""Pexels - Darmowe zdjęcia z galerii, obrazy z galerii bez opłat licencyjnych i zdjęcia bez praw autorskich - Mentor Junior Java Developer"" class=""wp-image-3914""/><figcaption class=""wp-element-caption"">Pexels - Darmowe zdjecia z galerii, obrazy z galerii bez oplat licencyjnych i zdjecia bez praw autorskich - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Zlecanie wykonania grafiki</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Kolejnym sposobem pozyskania właściwych zdjęć było zlecanie wykonania grafiki na takich portalach, jak <a href=""https://www.fiverr.com/"" data-type=""link"" data-id=""https://www.fiverr.com/"" target=""_blank"" rel=""noreferrer noopener"">Fiverr - Freelance Services Marketplace</a>. Tutaj była wolna amerykanka i ruletka, jeżeli chodzi o jakość wykonywanych usług. Pamiętam, jak w ""nieskończoność"" pisałem z osobą, której zlecałem stworzenie grafiki za $5. Można powiedzieć, że promptowałem osobę zamiast obecnie chatbota.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3923,""sizeSlug"":""medium"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Jak-Midjourney-pomaga-mi-generowac-obrazy-z-uzyciem-AI_Fiverr.com_Mentor-Junior-Java-Developer-276x300.png"" alt=""Fiverr - Freelance Services Marketplace - Mentor Junior Java Developer"" class=""wp-image-3923""/><figcaption class=""wp-element-caption"">Fiverr - Freelance Services Marketplace - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Generowanie grafiki z AI</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Obecnie wystarczy kilka sekund na stworzenie tekstowego opisu obrazu, który chcę uzyskać, a po chwili otrzymuję wygenerowany obraz z użyciem AI. Dla mnie wystarczy kilka powtórek/iteracji, aby uzyskać obraz, który jest w 90% zgodny z moimi oczekiwaniami.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sposób korzystania z samego narzędzia Midjourney wybiega poza zakres tego artykułu, poniżej link do oficjalnej dokumentacji. </p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Midjourney Quick Start Guide</p>
<!-- /wp:paragraph --><cite>Z oficjalnej dokumentacji dowiemy się jak korzystać z Midjourney oraz jak połączyć go z Discord. Źródło: <a href=""https://docs.midjourney.com/docs/quick-start"" data-type=""link"" data-id=""https://docs.midjourney.com/docs/quick-start"" target=""_blank"" rel=""noreferrer noopener"">https://docs.midjourney.com/docs/quick-start</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Po mimo, że 90% jest zgodnych z moimi oczekiwaniami, to zdarzają się różne sytuacje, jak generowanie sześciu palców u ręki lub jak na poniższym obrazku. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dla wygenerowanych żyraf wpisałem <strong>prompt</strong>: <br><code>/imagine giraffe on the top eiffle tower</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Niestety nie otrzymałem, tego, czego oczekiwałem. Wygląda, na to, że duży model językowy nie znalazł nigdzie w internecie grafiki z żyrafą na wieży Eiffla. Tym samym nie wiedział jak wygenerować, to o, co prosiłem. </p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center""} -->
<div class=""wp-block-columns are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":3927,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Midjourney_giraffe-limitation_Mentor-Junior-Java-Developer.png"" alt=""Jak Midjourney pomaga mi generować obrazy z użyciem AI - żyrafa na wieży Eiffla, brak obrazu - Mentor Junior Java Developer"" class=""wp-image-3927""/><figcaption class=""wp-element-caption"">Jak Midjourney pomaga mi generowac obrazy z uzyciem AI - zyrafa na wiezy Eiffla, brak obrazu - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""id"":3928,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Midjourney_giraffe-selfie_Mentor-Junior-Java-Developer.png"" alt=""Jak Midjourney pomaga mi generować obrazy z użyciem AI - żyrafa na wieży Eiffla, selfie - Mentor Junior Java Developer"" class=""wp-image-3928""/><figcaption class=""wp-element-caption"">Jak Midjourney pomaga mi generowac obrazy z uzyciem AI - zyrafa na wiezy Eiffla, selfie - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Więcej o generowaniu obrazów za pomocą Midjourney oraz Discord napiszę w dalszej części artykułu. Na razie, poniżej praktyczny przykład użycia Midjourney.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Przykład użycia Midjourney</h2>
<!-- /wp:heading -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Generowanie obrazów - prompt /imagine</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Należy zacząć od wspomnianego tekstowego opisu zwanego <code>prompt</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph -->
<p><code>/imagine</code> two monitors desktop set</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej wynik generowania obrazów, dostajemy cztery wersje, na których operujemy, działamy. Na wygenerowanie obrazu musimy chwilę poczekać.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Modyfikacja - Version, Upscale, Re-run</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Za pomocą przycisków <strong>V1, V2, V3, V4</strong> (V - version; wersja) - Image Variation - wybieramy obraz do ponownego wygenerowania na podstawie otrzymanego wyniku.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Używając przycisków <strong>U1, U2, U3, U4</strong> (U - upscale, to increase the size; scope, or scale of (something); ""powięszkenie"") - Image Selection - wybieramy ""finalny"" obraz, który ponownie generujemy w lepszej jakości oraz rozdzielczości.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3905,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Midjourney-prompt_imagine_two-monitors-desktop-set_Mentor-Junior-Java-Developer_v2.png"" alt=""Midjourney prompt /imagine two monitors desktop set - Mentor Junior Java Developer"" class=""wp-image-3905""/><figcaption class=""wp-element-caption"">Midjourney prompt /imagine two monitors desktop set - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Do ""modyfikacji"", ponownego wykonania tekstowego opisu - prompt - należy użyć przycisku 🔄. <strong>UWAGA: opcja remiksowania prompt musi zostać włączona za pomocą oddzielnego polecenia. Use the <a href=""https://docs.midjourney.com/settings-and-presets""><code>/settings</code> command</a> and select <code>🎛️ Remix</code> from the pop-up.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej wybrany obraz (U4 - Upscale) do dalszej obróbki, jak widać na zrzucie ekranu. Dostajemy dużo więcej opcji np. Vary, Zoom. Zachęcam do eksperymentowania z wygenerowaną grafiką. Wykracza, to poza treść artykułu, odsyłam do oficjalnej dokumentacji - <a href=""https://docs.midjourney.com/docs/vary-region-remix"" data-type=""link"" data-id=""https://docs.midjourney.com/docs/vary-region-remix"" target=""_blank"" rel=""noreferrer noopener"">How to Use Remix Mode with Vary (Region)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3906,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Midjourney-upscale_imagine_two-monitors-desktop-set_Mentor-Junior-Java-Developer_v2.png"" alt=""Midjourney, upscale; wybrany obraz do dalszej edycji - Mentor Junior Java Developer"" class=""wp-image-3906""/><figcaption class=""wp-element-caption"">Midjourney, upscale; wybrany obraz do dalszej edycji - Mentor Junior Java Developer</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wyjaśnienie pojęć</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Uważam, że zawsze należy wyjaśnić pojęcia, które dotyczą nowych narzędzi oraz technologii. Bez znajomości podstawowych pojęć czujemy się jeszcze bardziej zagubieni w świecie nowych rozwiązań, niezależnie, od tego, czy, to AI, czy nowy nowy program komputerowy.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Midjourney</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Midjourney to program i usługa generatywnej sztucznej inteligencji stworzona i prowadzona przez niezależne laboratorium badawcze Midjourney, Inc. z siedzibą w San Francisco. Midjourney generuje obrazy na podstawie opisów w języku naturalnym, zwanych promptami. Źródło Wikipedia: <a href=""https://en.wikipedia.org/wiki/Midjourney"" data-type=""link"" data-id=""https://en.wikipedia.org/wiki/Midjourney"">https://en.wikipedia.org/wiki/Midjourney</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Discord</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Discord to komunikator internetowy i platforma społecznościowa VoIP, która umożliwia komunikację za pośrednictwem połączeń głosowych, połączeń wideo, wiadomości tekstowych oraz multimediów i plików. Źródło Wikipedia: <a href=""https://en.wikipedia.org/wiki/Discord"" data-type=""link"" data-id=""https://en.wikipedia.org/wiki/Discord"" target=""_blank"" rel=""noreferrer noopener"">https://en.wikipedia.org/wiki/Discord</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Dlaczego Midjourney wymaga Discord?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Na oficjalnej stronie można znaleźć informacje jak używać Discord z Midjourney oraz drobną wzmiankę, dlaczego trzeba używać takie połączenie: ""The community is supportive, encouraging, and eager to share their knowledge with users just starting out."". Źródło: <a href=""https://docs.midjourney.com/docs/midjourney-discord"" data-type=""link"" data-id=""https://docs.midjourney.com/docs/midjourney-discord"" target=""_blank"" rel=""noreferrer noopener"">Midjourney - Discord Interface</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">ChatGPT zapytany o ""Why midjourney uses discord?""</p>
<!-- /wp:paragraph --><cite>Odpowiada: ""By leveraging Discord, Midjourney can maintain an active, engaged, and collaborative community, essential for its mission of fostering new modes of thought and creativity."".</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Co z prawami autorskimi?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ciężko mi było znaleźć jakieś konkretne informacje odnośnie praw autorskich i/lub plagiatów związanych z wygenerowanymi obrazami za pomocą Midjourney i innych podobnych narzędzi korzystających z AI.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Can I use my images commercially?</p>
<!-- /wp:paragraph --><cite>Midjourney subscribers own all the images they’ve created, even if their subscription has expired, and they’re free to use those images however they’d like. There are two small exceptions:<br><br>- If you upscale an image of another user, that upscale is owned by the original creator, not by you. It will appear in their gallery on the website instead of yours, and you’ll need their permission to use it.<br>- If you are a business grossing more than $1,000,000 USD a year, you need a Pro or Mega Plan to use your images commercially for your company.<br><br>Full details can be found in the <a href=""https://docs.midjourney.com/docs/terms-of-service"" target=""_blank"" rel=""noreferrer noopener"">Midjourney Terms of Service</a>, Section 4: Copyright and Trademark.<br><br>Źródło: https://help.midjourney.com/en/articles/8150363-can-i-use-my-images-commercially</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">OpenAI broni swoich klientów</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Nie wiemy jak Midjourney, ale OpenAI broni swoich klientów. Na blogu OpenAI można przeczytać ""OpenAI stara się chronić swoich klientów za pomocą wbudowanych zabezpieczeń praw autorskich w naszych systemach."".</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Copyright Shield</p>
<!-- /wp:paragraph --><cite>OpenAI is committed to protecting our customers with built-in copyright safeguards in our systems. Today, we’re going one step further and introducing Copyright Shield—we will now step in and defend our customers, and pay the costs incurred, if you face legal claims around copyright infringement. This applies to generally available features of ChatGPT Enterprise and our developer platform.<br><br>Źródło: <a href=""https://openai.com/blog/new-models-and-developer-products-announced-at-devday"" data-type=""link"" data-id=""https://openai.com/blog/new-models-and-developer-products-announced-at-devday"" target=""_blank"" rel=""noreferrer noopener"">https://openai.com/blog/new-models-and-developer-products-announced-at-devday</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dziś, ciężko mi wyobrazić sobie tworzenie grafiki bez narzędzi do generowania obrazów wspieranych przez sztuczną inteligencję. Kilkadziesiąt złotych zapłacone za Midjourney zwraca się z nawiązką z każdą wygenerowaną grafiką. Pisząc ten artykuł nauczyłem się nowych rzeczy o Midjourney. Zachęcam do nieustannej nauki nowych technologii, które mogą zautomatyzować, ułatwić naszą pracę.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->",2023-12-13
3935,"Video Tutorial - Klasa Java jako serwis CRUD. Czym jest CRUD? Praktyczny przykład, JUnit, TDD, IntelliJ. Dobre praktyki - YouTube","<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial - czas trwania 40 minut</p>
<!-- /wp:paragraph --><cite>Praktyczny przykład implementacji CRUDa w języku Java - krok po kroku. IntelliJ, każda metoda posiada test jednostkowy z użyciem JUnit. Testy tworzone zgodnie z TDD - Test Driven Development. Implementacja pokazuje dobre praktyki programistyczne.<br>Pisząc serwis nie mam namyśli serwisu www, chodzi o klasę, która ma specjalne przeznaczenie i zawiera operacje CRUD – Create, Read, Update, Delete.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/5q4arrxenFk"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/5q4arrxenFk
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Bardzo wiele aplikacji jest tzw. CRUD’ami, czyli udostępnia podstawowe operacje tworzenia (create), odczytu (read), modyfikacji (update) oraz usuwania (delete) obiektów jakiejś klasy. Dla przykładu weźmy aplikację przechowującą notatki, gdzie mamy klasę Note.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej operacje CRUD dla klasy Note:<br>– CREATE – dodawanie notatki do notatnika,<br>– READ – odczytanie szczegółów notatki z notatnika,<br>– UPDATE – zmiana, modyfikacja informacji o notatce z notatnika,<br>– DELETE – usunięcie notatki z notatnika.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3937,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/REST_CRUD_SQL-Junior-Java-Developer-Mentor.png"" alt=""CRUD dla HTTP oraz baz danych - Junior Java Developer Mentor"" class=""wp-image-3937""/><figcaption class=""wp-element-caption"">CRUD dla HTTP oraz baz danych - Junior Java Developer Mentor</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Przykład katalogu samochodowego opartego na CRUD jest opisany na moim bogu. Zapraszam serdecznie do zapoznania się z moim artykułem.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/2020/04/25/pierwsza-klasa-jako-serwis-crud-kod-java-intellij-krok-po-kroku/
</div></figure>
<!-- /wp:embed -->

<!-- wp:separator {""className"":""is-style-wide""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-wide""/>
<!-- /wp:separator -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-12-14
3961,"Video Poradnik - Czy za pomocą obrazka ze słodkim kotem można przejąć zdalną kontrolę nad komputerem? Ethical Hacking - YouTube","<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video poradnik - czas trwania 19 minut</p>
<!-- /wp:paragraph --><cite>Czy wiesz, że za pomocą obrazka ze słodkim kotkiem można przejąć zdalną kontrolę nad Twoim komputerem? Praktyczny przykład jak stworzyć i przeprowadzić zdalnie atak na komputer. Użyte narzędzia: Kali Linux, msfconsole, msfvenom, VirtualBox, Windows 64-bit, archiwum ZIP (SFX).</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://youtu.be/8RRm3x5jWJE"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtu.be/8RRm3x5jWJE
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">UWAGA! To video nie zachęca do tworzenia, generowania złośliwego oprogramowania, ani do hackowania czyjegoś komputera. Stworzone jest w celach edukacyjnych, demonstracyjnych potencjalnego zagrożenia oraz na potrzeby praktycznego przykładu!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Obrazek może zostać przesłany przez email, komunikator. Nie musi, to być słodki kotek, ale może, to być raport, albo oferta sprzedażowa, albo oferta marketingowa, wysłana do jakiegoś pracownika danej firmy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video celowo nagrane wolno i spokojnie, aby każdy mógł nadążyć za moim przekazem. Dla tych, którzy potrzebują więcej dynamiki, to mogą przyspieszyć video 1.5x bez straty dla materiału :)</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""id"":3963,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2023/12/Video-Poradnik_Czy-za-pomoca-obrazka-ze-slodkim-kotem-mozna-przejac-zdalna-kontrole-nad-komputerem_Ethical-Hacking_YouTube-1024x576.png"" alt=""Video Poradnik - Czy za pomocą obrazka ze słodkim kotem można przejąć zdalną kontrolę nad komputerem? Ethical Hacking - YouTube"" class=""wp-image-3963""/><figcaption class=""wp-element-caption"">Video Poradnik - Czy za pomoca obrazka ze slodkim kotem mozna przejac zdalna kontrole nad komputerem? Ethical Hacking - YouTube</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list {""fontSize"":""large""} -->
<ul class=""has-large-font-size""><!-- wp:list-item -->
<li>Darmowy obraz systemu Windows został pobrany z oficjalnej strony firmy Microsoft - <a href=""https://www.microsoft.com/pl-pl/software-download/windows10ISO"" target=""_blank"" rel=""noreferrer noopener"">https://www.microsoft.com/pl-pl/software-download/windows10ISO</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Darmowy obraz systemu Kali Linux pobrany z oficjalnej strony - <a href=""https://www.kali.org/get-kali/"" target=""_blank"" rel=""noreferrer noopener"">https://www.kali.org/get-kali/</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Darmowa wersja VirtualBox - <a href=""https://www.virtualbox.org/wiki/Downloads"" target=""_blank"" rel=""noreferrer noopener"">https://www.virtualbox.org/wiki/Downloads</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2023-12-28
4110,"GitHub Copilot Practical Code Example: generate, explain, test. Java Spring Framework in IntelliJ and Visual Studio Code. Copilot - AI Developer Tool - YouTube","<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Video tutorial – czas trwania 22 minut</p>
<!-- /wp:paragraph --><cite>This video tutorial shows live coding for a practical example of how to use GitHub Copilot + Chat (AI Developer Tool) to create a Spring Boot Web Application in Java - IntelliJ and Visual Studio Code. AI-based code suggestions in real time, ask for assistance right in the Chat window to explain the code, write tests, and many more.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:embed {""url"":""https://www.youtube.com/watch?v=R6Nfw8-kVdc"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://www.youtube.com/watch?v=R6Nfw8-kVdc
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Do you want to unleash your programming potential, are you tired of constant searching through many web pages over the internet, want to know if your code is properly written? If the answer to any of these questions is yes, then this video tutorial is for you!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Bear in mind that GitHub Copilot will not teach you a programming language and/or how to use a specific framework. If you are a Senior developer it will boost your productivity, but as a Junior developer, you might get confused and lost with all the possibilities that now you have. In this video I have a few sections ""Disclaimer - GitHub Copilot won't teach you"", and ""Changes that Chat didn't suggest - your knowledge"".</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie mojego autorstwa, jako tło narzędzie <a href=""https://www.jetbrains.com/idea/"" data-type=""URL"" data-id=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA – the Leading Java and Kotlin IDE</a>.</p>
<!-- /wp:paragraph -->",2024-02-02
4150,"Popular Java System Architectures - a quick overview","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Several popular system architectures in Java are commonly used to design and build robust, scalable, and maintainable applications. Here are some of the most prevalent ones:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Monolithic Architecture</strong>: This is the traditional architecture where all components of an application are tightly coupled and deployed as a single unit. While simple to develop and deploy, it may suffer from scalability and maintainability issues as the application grows.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/en/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/"",""type"":""wp-embed"",""providerNameSlug"":""the-guide-for-future-junior-java-developers""} -->
<figure class=""wp-block-embed is-type-wp-embed is-provider-the-guide-for-future-junior-java-developers wp-block-embed-the-guide-for-future-junior-java-developers""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/en/2020/05/13/aplikacje-java-maja-warstwy-jak-tort-urodzinowy-aplikacja-trojwarstwowa/
</div><figcaption class=""wp-element-caption"">I described a Layered (n-tier) Architecture in one of my articles - the English version is available.</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Layered (n-tier) Architecture</strong>: This architecture separates the application into distinct layers such as the presentation layer, business logic layer, and data access layer. Each layer communicates only with the layer directly beneath or above it, promoting modularity and maintainability.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Service-Oriented Architecture (SOA)</strong>: SOA is an architectural style where application components are designed to be loosely coupled and interact through services. These services are typically self-contained, reusable, and can be accessed remotely over a network. Java EE (Enterprise Edition) provides frameworks like JAX-WS (Java API for XML Web Services) and JAX-RS (Java API for RESTful Web Services) to implement SOA.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Microservices Architecture</strong>: Microservices break down the application into small, independently deployable services, each responsible for a specific business function. These services communicate through lightweight protocols such as HTTP/REST or messaging systems like Kafka or RabbitMQ. Java frameworks like Spring Boot and Micronaut are commonly used for building microservices.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Event-Driven Architecture (EDA)</strong>: In EDA, the flow of information is based on events triggered by various actions or changes in the system. Components react to these events asynchronously, promoting decoupling and scalability. Java frameworks like Spring Cloud Stream and Apache Kafka are often used to implement EDA.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Domain-Driven Design (DDD)</strong>: DDD focuses on modeling a system based on its domain logic and language. It emphasizes the collaboration between domain experts and developers to create a shared understanding of the system. Java frameworks like Axon Framework and Hibernate can be used to implement DDD principles.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Hexagonal (Ports and Adapters) Architecture</strong>: This architecture emphasizes separating the application's business logic from external concerns such as databases, UIs, or external services. It consists of an inner core representing the domain logic, surrounded by adapters that handle communication with external systems. Java frameworks like Spring and Jakarta EE can be utilized to implement the hexagonal architecture.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">These architectures are not mutually exclusive, and often elements from multiple architectures are combined to suit the specific requirements of an application. Choosing the right architecture depends on factors such as scalability needs, development team expertise, and project requirements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A quick summary of the above is available in the form of a YouTube Short.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtube.com/shorts/0nWmlbrqAlw?feature=share"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtube.com/shorts/0nWmlbrqAlw?feature=share
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>The script for the above AI video:</strong> ""Java system architectures provide diverse approaches to design and develop robust applications. Monolithic Architecture consolidates components into a single unit for simplicity but may hinder scalability. Layered Architecture organizes applications into distinct layers, enhancing modularity. Service-Oriented Architecture (SOA) fosters loose coupling through reusable services. Microservices Architecture breaks down applications into small, independently deployable services for agility. Event-Driven Architecture (EDA) enables asynchronous communication based on triggered events, promoting scalability. Domain-Driven Design (DDD) emphasizes modeling systems based on domain logic. Hexagonal Architecture separates core logic from external concerns using adapters. These architectures, leveraged with Java frameworks like Spring and Jakarta EE, cater to various scalability, maintainability, and development needs."".</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zdjęcie wygenerowane za pomocą Midjourney.</p>
<!-- /wp:paragraph -->",2024-02-11
4180,"What is needed for Java programming? Java Programming Essentials: a Quick Guide","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">To start programming in Java, you'll need a few essential tools and resources:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Java Development Kit (JDK)</strong>: This is the most crucial requirement. JDK includes the Java Runtime Environment (JRE), which allows you to run Java applications, and various development tools like the Java compiler (javac), debugger, etc. You can download the JDK from the official Oracle website or choose alternatives like OpenJDK.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Integrated Development Environment (IDE)</strong>: While you can write Java code in a simple text editor, using an IDE significantly improves productivity. Popular choices include IntelliJ IDEA, Eclipse, and NetBeans. These IDEs provide features like code completion, debugging, refactoring, and project management.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Text Editor or IDE Configuration</strong>: If you choose to use a text editor instead of a full-fledged IDE, ensure that it supports Java syntax highlighting and possibly code completion. Common choices include Visual Studio Code, Sublime Text, Atom, or Notepad++.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Learning Resources</strong>: Java has an extensive ecosystem with various libraries, frameworks, and APIs. To learn Java, you can refer to online tutorials, books, documentation, and video courses. Websites like Oracle's Java Tutorials, Baeldung, and Java Code Geeks offer comprehensive learning materials.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Version Control</strong>: Familiarize yourself with version control systems like Git. Git helps you manage your codebase, collaborate with others, and track changes efficiently. Platforms like GitHub, GitLab, and Bitbucket offer hosting services for Git repositories.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Build Automation Tools</strong>: Tools like Apache Maven or Gradle help manage project dependencies, compile code, run tests, and package applications. They automate repetitive tasks and streamline the development process.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Debugging Tools</strong>: Familiarize yourself with debugging tools provided by your IDE or standalone debuggers like jdb (Java Debugger) for troubleshooting code issues.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Understanding of Object-Oriented Programming (OOP)</strong>: Java is an object-oriented programming language, so having a solid understanding of OOP concepts such as classes, objects, inheritance, polymorphism, and encapsulation is essential.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>A quick summary of the above is available in the form of a YouTube Short.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://youtube.com/shorts/g3B1-qQxSN8?feature=share"",""type"":""video"",""providerNameSlug"":""youtube"",""responsive"":true,""className"":""wp-embed-aspect-16-9 wp-has-aspect-ratio""} -->
<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
https://youtube.com/shorts/g3B1-qQxSN8?feature=share
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>The script for the above AI video:</strong> ""Dive into the world of Java programming! Essential tools include the Java Development Kit, or JDK, housing the Java Runtime Environment and development tools such as the Java compiler and debugger. An Integrated Development Environment or IDE, like IntelliJ IDEA or Eclipse, can boost productivity. Text editor supporting Java syntax highlighting, such as Visual Studio Code, could be your preference. Learning resources are crucial. Tutorials, books, and video courses can guide you. Websites like Oracle's Java Tutorials and Baeldung are highly informative. Familiarize yourself with version control systems like Git, used for managing your codebase. Platforms like GitHub are ideal for hosting Git repositories. Build Automation Tools like Apache Maven can cut redundancy. Understanding Object-Oriented Programming and good coding practices are vital. Now, you're ready to embark your journey to Java mastery. So, which fact did you find extraordinary?"".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">By setting up these tools and resources, you'll be well-equipped to start programming in Java and embark on your journey to becoming proficient in this language.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/kontakt/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/kontakt/
</div></figure>
<!-- /wp:embed -->

<!-- wp:embed {""url"":""https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/"",""type"":""wp-embed"",""providerNameSlug"":""poradnik-dla-przysz-ych-junior-java-developer-039-w"",""align"":""center""} -->
<figure class=""wp-block-embed aligncenter is-type-wp-embed is-provider-poradnik-dla-przysz-ych-junior-java-developer-039-w wp-block-embed-poradnik-dla-przysz-ych-junior-java-developer-039-w""><div class=""wp-block-embed__wrapper"">
https://www.juniorjavadeveloper.pl/mentoring-rezerwuj-termin/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Image generated with Midjourney.</p>
<!-- /wp:paragraph -->",2024-02-16
4199,"All AI tools for free on your local computer, privately! - Pinokio makes it super easy! AI: Text, Image, Video, Sound, and more","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Have you ever wondered if there is an easy and free way to have all the AI tools on a local computer, privately? <strong>AI tools like ChatGPT for text generation, or AI tools like Midjourney/DALL-E for image generation</strong>. You can have it all and even more, e.g.: an AI tool for voice generation or video generation from text prompts.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""huge""} -->
<blockquote class=""wp-block-quote has-huge-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Before Pinokio I had to pay at least <strong>$70</strong> for each month.<br>Now, the cost of using AI tools with Pinokio is <strong>$0</strong>.</p>
<!-- /wp:paragraph --><cite>$5 - (AI Sound) ElevenLabs<br>$10 - (AI Image) Midjourney<br>$10 - (AI Coding) GitHub Copilot<br>$20 - (AI Video) invideo AI<br>$25 - (AI Text) ChatGPT Plus<br>--------------------<br>$70 - Total</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Without any technical knowledge, simply download the Pinokio from <a href=""https://pinokio.computer/"" target=""_blank"" rel=""noreferrer noopener"">https://pinokio.computer/</a> and browse for available AI tools as you would normally search for a plugin for your favorite web browser!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">And finally, it's possible to run all the AI tools using CPU, now GPU is not mandatory, wow!</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">What Pinokio can do?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Putting it simply. Pinokio will do you all the tedious and hard work with the installation and setup of the proper environment on your local machine. You don't need to know anything about Conda, Python, git, LLMs, etc. With Pinokio you just simply browse for available AI tools click install and then simply run.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>NOTE:</strong> it will take time to install AI tools with Pionkio because of the LLMs needed to be present for AI tools. The size of the example LLM <a href=""https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca"" target=""_blank"" rel=""noreferrer noopener"">Mistral-7B-OpenOrca</a> is around 15 GB. You don't need to know anything about LLMs, Pinokio knows what to do for you!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Available AI tools in Pinokio</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">I will just mention a few of the available AI tools in Pinokio. Those that I've found to be most useful for my daily operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">To find available AI tools we need to go to the ""Discover"" view, after installation we will get a list of installed AI tools - presented below.</p>
<!-- /wp:paragraph -->

<!-- wp:columns {""verticalAlignment"":""center""} -->
<div class=""wp-block-columns are-vertically-aligned-center""><!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""lightbox"":{""enabled"":true},""id"":4224,""sizeSlug"":""medium"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/Pinokio-Discover-view_AI-tools-browser-276x300.png"" alt=""Discover view in Pinokio - AI tools browser"" class=""wp-image-4224""/><figcaption class=""wp-element-caption"">Discover view in Pinokio - AI tools browser</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {""verticalAlignment"":""center""} -->
<div class=""wp-block-column is-vertically-aligned-center""><!-- wp:image {""align"":""center"",""lightbox"":{""enabled"":true},""id"":4242,""sizeSlug"":""medium"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-medium""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/Pinokio_Installed-AI-tools-view-276x300.png"" alt=""Pinokio - Installed AI tools view"" class=""wp-image-4242""/><figcaption class=""wp-element-caption"">Pinokio - Installed AI tools view</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Text generators like ChatGPT</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">I've used Text Generation WebUI - oobabooga - <a href=""https://github.com/oobabooga/text-generation-webui"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/oobabooga/text-generation-webui</a></p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Text prompt - Write 50 words about Artificial Intelligence</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""lightbox"":{""enabled"":true},""id"":4231,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/Pinokio_Text-Generation-WebUI-oobabooga_Chat-text-generation-1024x559.png"" alt=""Chat Text Generation WebUI - oobabooga - Pinokio"" class=""wp-image-4231""/><figcaption class=""wp-element-caption"">Chat Text Generation WebUI - oobabooga - Pinokio</figcaption></figure>
<!-- /wp:image --><cite>Embracing artificial intelligence presents numerous opportunities for businesses, including enhanced customer service, improved data analysis, and innovative product development. However, ethical considerations surrounding privacy, bias, and potential job displacement must be carefully addressed as AI becomes increasingly integrated into our daily lives.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Image generators like Midjourney/DALL-E</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">I've used Image Generation Automatic1111 WebUI using Stable Diffusion - <a href=""https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features"" target=""_blank"" rel=""noreferrer noopener"">https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features</a></p>
<!-- /wp:paragraph -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Text prompt - Small Mouse</p>
<!-- /wp:paragraph -->

<!-- wp:image {""align"":""center"",""lightbox"":{""enabled"":true},""id"":4246,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<figure class=""wp-block-image aligncenter size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/Pinokio_Image-Generation_Automatic1111_Stable-Diffusion-WebUI-1024x559.png"" alt=""Pinokio - Image Generation with Automatic1111 WebUI using Stable Diffusion"" class=""wp-image-4246""/><figcaption class=""wp-element-caption"">Image Generation with Automatic1111 WebUI using Stable Diffusion - Pinokio</figcaption></figure>
<!-- /wp:image --></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Video generators like invideo AI</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">I have not tested it yet.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Voice generators like ll ElevenLabs</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">I have not tested it yet.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Pinokio's official definition</h2>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">AI Browser</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pinokio is a browser that lets you <strong>install, run, and automate any AI applications and models</strong> automatically and effortlessly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">No more opening the terminal. No more <code>git clone</code>. No more <code>conda install</code>. No more <code>pip install</code>. No more messing with execution environments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>All of them automated with one click</strong>, as easy as using a browser.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">LLMs computation CPU vs GPU</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">It's very important to know why GPUs are gaining popularity nowadays.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""large""} -->
<p class=""has-text-align-center has-large-font-size"">As always, a picture is worth a thousand words.</p>
<!-- /wp:paragraph -->

<!-- wp:image {""lightbox"":{""enabled"":true},""id"":4221,""sizeSlug"":""full"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-full""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/1708200065188.png"" alt=""CPU vs GPU in Machine Learning Algorithms: Which is Better?"" class=""wp-image-4221""/><figcaption class=""wp-element-caption"">CPU vs GPU in Machine Learning Algorithms: Which is Better?</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">For further reading <a href=""https://thinkml.ai/cpu-vs-gpu-in-machine-learning-algorithms-which-is-better/"" target=""_blank"" rel=""noreferrer noopener"">CPU vs GPU in Machine Learning Algorithms: Which is Better?</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Local AI tools, why it's important?</h2>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""huge""} -->
<p class=""has-huge-font-size""><strong>Make sure you own your AI. AI in the cloud is not aligned with you, it’s aligned with the company that owns it.</strong></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Why is it so super important for you to have all the tools on your local computer?</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>Privacy issue</strong> - all the data from text prompts will stay on your local machine, they won't be sent to companies like Microsoft or Google.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>No more paying for subscriptions</strong> - bear in mind that most of the stuff related to AI and LLM is free and publicly available to anyone.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>No more being a source of income for the Big Tech companies</strong> - probably you didn't realize that you are an income for the Big Tech companies. With all the AI stuff is even worse. You may ask, how is it possible?</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:quote -->
<blockquote class=""wp-block-quote""><!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size""><strong>We do fine-tuning of their LLMs for free because other options cost them millions of dollars.</strong></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:image {""lightbox"":{""enabled"":true},""id"":4213,""sizeSlug"":""large"",""linkDestination"":""none""} -->
<figure class=""wp-block-image size-large""><img src=""https://www.juniorjavadeveloper.pl/wp-content/uploads/2024/02/1708178535815-1024x461.jpg"" alt=""YouTube [1hr Talk] Intro to Large Language Models - 
Andrej Karpathy - Introduction to LLM, training ChatGPT/LLM"" class=""wp-image-4213""/><figcaption class=""wp-element-caption"">YouTube [1hr Talk] Intro to Large Language Models - 
Andrej Karpathy - Introduction to LLM, training ChatGPT/LLM</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">The image comes from the YouTube video <a href=""https://www.youtube.com/watch?v=zjkBMFhNj_g"" target=""_blank"" rel=""noreferrer noopener"">[1hr Talk] Intro to Large Language Models</a>, a great introduction to LLMs made by Andrej Karpathy.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Disclaimer </h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Don't let my over-enthusiasm dissuade you from reading the official documentation for the Pinocchio project yourself - <a href=""https://docs.pinokio.computer/"" target=""_blank"" rel=""noreferrer noopener"">https://docs.pinokio.computer/</a>. For me, experimenting and learning new technologies and tools is not a problem. Nevertheless, I consider this project to be very stable in its current phase.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">What I noticed while working with Pinokio (Linux, CPU, no GPU):</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">During the installation step, I didn't experience any issues or problems.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">I had to restart Pinokio after installing some tools, but that's fine.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Loading LLM for AI Text and AI Image took some time, and crashed a few times, but that's fine.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size""><strong>It does what is made for!</strong></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">The Pinokio - AI Browser is a tool that I was waiting for, and it reduces the cost of AI tools to $0. Currently, for me, a few minutes for AI content is worth waiting. The most important thing for me is the privacy issues, I can write no privacy issues because all my data belongs to me and stays on my local computer!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">While I was getting familiar with Pinokio I learned so much about available AI tools, LLMs, and computing capabilities (CPU vs GPU) that I would not have normally learned with any online course in that short period (2 days, weekend). Having said that, there is no better way than a hands-on project and real demand for working tools.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Image generated with Midjourney, edited in GIMP.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""align"":""center"",""fontSize"":""huge""} -->
<p class=""has-text-align-center has-huge-font-size""><strong>What do you think about this? </strong><br><strong>Let me know in the comments!</strong></p>
<!-- /wp:paragraph -->",2024-02-19
4506,"Ciągła nauka i doskonalenie w IT - dobrodziejstwo czy przekleństwo?","<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Jeżeli nie chcesz codziennie uczyć się czegoś nowego i doskonalić swój warsztat pracy, to IT chyba nie jest dla Ciebie. Pracując w IT przechodziłem przez zafascynowanie nowymi technologiami oraz znużenie powtarzalnością ""nowych technologii"".</p>
<!-- /wp:paragraph -->

<!-- wp:wpjoli/joli-table-of-contents /-->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Nauka</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dosłownie wieczna nauka, czy tego chcesz czy nie. Jeżeli samemu nie znajdziesz czasu na nauke, to będzie wymagał, tego od Ciebie pracodawca. Niezależnie czy programujesz (dev), testujesz oprogramowanie (test) czy zarządzasz serwerami (admin) musisz uczyć się nowych rzeczy. Na programowanie składa się wiele elementów, nie tylko język programowania, są jeszcze algorytmy, bazy danych, cloud, jest czego się uczyć.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Doskonalenie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Skoro nauczyłeś się już nowych rzeczy, to za jakiś czas, na pewno będzie nowsza wersja narzędzia Y, które używałeś i niezbędne będzie doskonalenie się w tym zakresie. Czy, aby na pewno dobrze znasz używane narzędzie? Kiedy ostatnio czytałeś jego dokumentację techniczną? Zawsze można dowiedzieć się czegoś nowego i poćwiczyć z istniejącym narzędziem, ale w innej konfiguracji. Można optymalizować istniejące rozwiązania.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Nowe technologie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">To, jak to jest z tym zafascynowanie nowymi technologiami oraz znużeniem powtarzalnością ""nowych technologii""?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Zafascynowanie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zafascynowanie nowymi technologiami związane było z ich potencjalnie nowymi możliwościami. Technologia Y miała rozwiązać problem Z, nie zawsze tak było. Mnie zawsze interesowało poznawanie nowych rzeczy i nadal tak jest. Dla mnie naturalnym jest, że jak trzeba poznać nową technologię, to angażuję się na 100% w jej poznanie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Pamiętam jak z aplikacji desktop pisanych w Java Swing przechodziliśmy na aplikacje web, dostępne przez przeglądarkę. Aplikacja desktop wymagała tylko uruchomienia gotowego pliku JAR, no i może jeszcze znajomości wzorca MVC. Dla aplikacji web należało poznać jak działają serwery, protokuł HTTP, nauczyć się HTML'a, nowych frameworków. W międzyczasie, gdzieś pojawiły się rozwiązania low-code i no-code, o których pisałem w innym artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/03/low-code-i-no-code-czy-generatory-kodu-zrodlowego-zastapia-programistow/"" data-type=""post"" data-id=""2562"">Low-code i No-code – czy generatory kodu źródłowego zastąpią programistów?</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Znużenie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Znużenie nowymi technologiami nie wynikało z braku chęci poznawania nowych rzeczy, ale po pewnym czasie okazywało się, że wszystko jest podobne do siebie i działa na podobnych zasadach - wszystko, to samo. Warto dostrzec powtarzający się wzorzec i na ich podstawie budować solidną bazę do dalszego rozwoju.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Zmiana bazy danych z Oracle na PostgreSQL, już, to widziałem, po prostu język SQL i coś do zarządzania bazą danych. Serwer aplikacyjny JBoss, zmiana na Glassfish, już, to widziałem, domeny, klastry, źródła danych, panel administracyjny. Aplikacje desktop w JavaFX zamiast Java Swing, już, to widziałem, wzorzec MVC, akcje jako callback na przyciskach, no dobra, tu było lepiej, ale dowiedziałem się o tym po czasie. O frameworkach opiszę więcej poniżej w sekcji ""wszytko to samo"".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Wszystko to samo</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Dlaczego używam stwierdzenia, że wszystko to samo? Baza wiedzy i rozwiązań technologicznych w IT jest w miarę niezmienna. Elementami, które się zmieniają, to nazwy i wersje narzędzi, frameworków które korzystają z tych podstawowych rozwiązań. Pozwolę sobie celowo pominąć AI, która trochę namieszała w IT, ale zapewne z czasem i AI stanie się bazą do innych rozwiązań w IT.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Podstawowe technologie i rozwiązania</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Poniżej w dużym uproszczeniu opisałem, niektóre podstawowe technologie/rozwiązania:</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Podstawą dla większości aplikacji web, jeżeli chodzi o komunikację klient-serwer jest protokół HTTP. <!-- wp:list -->
<ul><!-- wp:list-item -->
<li>W kwestii strony wizualnej, to podstawą jest język HTML, Javascript oraz style CSS.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przechowywanie i dostęp do danych, to w większości przypadków bazy danych niezależnie od typu (SQL, NoSQL).<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Tutaj wyróżniamy tabele, zapytania, operacje CRUD.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Zarówno aplikacje web jak i bazy danych muszą działać na jakimś serwerze, a tu należy znać podstawy administracji serwerów.<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Komunikacja sieciowa np. adres IP i port.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {""level"":3} -->
<h3 class=""wp-block-heading"">Podstawa rozwiązań opartych o język Java</h3>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Co jest podstawą dla technologii/rozwiązań w języku Java?</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">JDBC (Java Database Connectivity) API - komunikacja z dowolną relacyjną bazą danych.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph -->
<p>JDBC (Java Database Connectivity) API - Official Documentation</p>
<!-- /wp:paragraph --><cite>The JDBC™ API provides programmatic access to relational data from the Java™ programming language. Źródło: <a href=""https://docs.oracle.com/javase/tutorial/jdbc/overview/index.html"">https://docs.oracle.com/javase/tutorial/jdbc/overview/index.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph -->
<p>Hibernate ORM korzysta z JDBC</p>
<!-- /wp:paragraph --><cite>Hibernate is concerned with data persistence as it applies to relational databases (via JDBC) Źródło: <a href=""https://hibernate.org/orm/"">https://hibernate.org/orm/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:list {""ordered"":true,""start"":2} -->
<ol start=""2""><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Java/Jakarta Servlet API - komunikacja klient-serwer.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph -->
<p>Java/Jakarta Servlet API - Official Documentation</p>
<!-- /wp:paragraph --><cite>A <strong>servlet</strong> is a Java programming language class that is used to extend the capabilities of servers that host applications accessed by means of a request-response programming model. Źródło: <a href=""https://docs.oracle.com/javaee/5/tutorial/doc/bnafe.html"">https://docs.oracle.com/javaee/5/tutorial/doc/bnafe.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote {""fontSize"":""large""} -->
<blockquote class=""wp-block-quote has-large-font-size""><!-- wp:paragraph -->
<p>SpringMVC korzysta z Java/Jakarta Servlet</p>
<!-- /wp:paragraph --><cite>This part of the documentation covers support for Servlet-stack web applications built on the Servlet API and deployed to Servlet containers. Individual chapters include <a href=""https://docs.spring.io/spring-framework/reference/web/webmvc.html#mvc"">Spring MVC</a> [...] Źródło: <a href=""https://docs.spring.io/spring-framework/reference/web.html"">https://docs.spring.io/spring-framework/reference/web.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:list {""ordered"":true,""start"":3} -->
<ol start=""3""><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">HTML i ExpressionLanguage (EL) - ""wymiana danych backend-frontend i vice versa"".</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Expression language (EL), język wyrażeń, np. ${} jest powszechnie używany w tworzeniu stron internetowych za pomocą frameworków. Gdzie wyrażenia w nawiasach klamrowych {} są przetwarzane, a ich wyniki są renderowane w interfejsie użytkownika. Expression language (EL) jest również używany w frameworkach i bibliotekach front-end jako sposób na osadzanie dynamicznych danych lub wyrażeń w składni podobnej do HTML - <code data-enlighter-language=""kotlin"" class=""EnlighterJSRAW"">&lt;h1&gt;</code><code data-enlighter-language=""html"" class=""EnlighterJSRAW"">Hello, ${name}&lt;/h1&gt;</code> </p>
<!-- /wp:paragraph -->

<!-- wp:separator {""className"":""is-style-default""} -->
<hr class=""wp-block-separator has-alpha-channel-opacity is-style-default""/>
<!-- /wp:separator -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ad. 1. Większość narzędzi do komunikacji z bazą danych w języku Java używa JDBC API np.: <a href=""https://hibernate.org"" target=""_blank"" rel=""noreferrer noopener"">Hibernate</a>, <a href=""https://mybatis.org/"" target=""_blank"" rel=""noreferrer noopener"">MyBatis</a>, <a href=""https://jdbi.org/"" target=""_blank"" rel=""noreferrer noopener"">Jdbi</a>, <a href=""https://spring.io/guides/gs/relational-data-access"" target=""_blank"" rel=""noreferrer noopener"">Spring JDBC Template</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ad. 2. Niezależnie od wybranego frameworka web w języku Java podstawą będzie Java/Jakarta Servlet API np.: <a href=""https://www.thymeleaf.org/"" target=""_blank"" rel=""noreferrer noopener"">Thymeleaf,</a> <a href=""https://tapestry.apache.org/"" target=""_blank"" rel=""noreferrer noopener"">Tapestry,</a> <a href=""https://www.playframework.com/"" target=""_blank"" rel=""noreferrer noopener"">Play Framework</a> i wiele innych.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Ad. 3. Sporo frameworków i bibliotek używa Expression Language (EL) np. <a href=""https://www.thymeleaf.org/"" target=""_blank"" rel=""noreferrer noopener"">Thymeleaf</a> lub ma swoje oddzielne EL np. <a href=""https://docs.spring.io/spring-framework/reference/core/expressions.html"" target=""_blank"" rel=""noreferrer noopener"">Spring Expression Language (SpEL)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Jednak coś innego</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">W trakcie mojej pracy jako programisty Java rewolucje były dwie.</p>
<!-- /wp:paragraph -->

<!-- wp:list {""ordered"":true} -->
<ol><!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Przesiadka z Java EE na Spring Framework. Dlaczego, to takie ważne pisałem w artykule <a href=""https://www.juniorjavadeveloper.pl/2023/03/09/uzywamy-starych-frameworkow-java-ee-vs-spring-framework-dawid-kontra-goliat/"" data-type=""post"" data-id=""2800"">Używamy „starych” frameworków – Java EE vs. Spring Framework – Dawid kontra Goliat</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item {""fontSize"":""large""} -->
<li class=""has-large-font-size"">Zmiana IDE z <a href=""https://eclipseide.org/"" target=""_blank"" rel=""noreferrer noopener"">Eclipse IDE</a> na <a href=""https://www.jetbrains.com/idea/"" target=""_blank"" rel=""noreferrer noopener"">IntelliJ IDEA</a>.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class=""wp-block-heading"">Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Mam nadzieję, że w dzisiejszych szybko zmieniających się technologicznie czasach nie trzeba nikogo przekonywać, że adaptacja przez naukę jest kluczem do sukcesu. Żeby nie było, że tylko narzekam, to jestem wdzięczny za proces, który przeszedłem z nowymi technologiami w świecie IT, konkretnie związanym z programowaniem. Wiem jaką muszę mieć bazę techniczną, żeby w miarę płynnie przełączyć się z rozwiązania Y na nowe rozwiązanie Z - ""bo wszystko, to samo"" ;)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {""fontSize"":""large""} -->
<p class=""has-large-font-size"">Thumbnail background photo by <a href=""https://www.pexels.com/photo/inner-yard-with-plants-and-yin-and-yang-symbol-5999543/"">Tom Fisk</a> from <a href=""http://www.paxels.com"">www.paxels.com</a> edited in <a href=""https://www.gimp.org/"" target=""_blank"" rel=""noreferrer noopener"">GIMP</a>.</p>
<!-- /wp:paragraph -->",2024-05-09
4585,"Interaktywny tutorial Java - puzzle/kafelki","<!-- wp:paragraph -->
<p>Puzzle/kafelki przechodzące od najłatwiejszych, bazowych zagadnień do kolejnych, trudniejszych, np. zmienne/typy -> klasa -> pola w klasie ...</p>
<!-- /wp:paragraph -->",1970-01-01
